{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Jakintza Ruha - Mystical Learning Platform\n\n## Overview\n\nThis is a full-stack web application for Jakintza Ruha, a mystical learning platform focused on spiritual education and wisdom sharing. The project features a modern React frontend with a darker celestial gothic academia theme, built on top of an Express.js backend with PostgreSQL database integration using Drizzle ORM.\n\nThe application includes a stunning landing page with the official Jakintza Ruha logo, mystical breathing taglines, and a cosmic background image. The main content section showcases Beca's personal testimony, the platform's sacred mission, and information about The Athenaeum. The design emphasizes a very dark cosmic aesthetic with void black and midnight purple tones, golden accents, and subtle mystical elements to create an immersive spiritual learning experience.\n\n## Recent Changes (August 2025)\n\n- **Logo Integration**: Replaced all logo placeholders with the official Jakintza Ruha logo featuring sacred geometry and mystical symbols\n- **Darker Theme**: Enhanced the cosmic background with much darker tones (void black, midnight purple) for a more celestial gothic academia feel\n- **Simplified Animations**: Removed jumpy animations and replaced with smooth, static elements for better user experience\n- **Transparency Improvements**: Made overlay more transparent (60-75%) to showcase the beautiful cosmic background image\n- **Content Layout**: Removed duplicate taglines and large animated elements for cleaner presentation\n- **Newsletter Integration**: Connected newsletter signup to beca@jakintzaruha.com for direct communication\n- **Migration Complete**: Successfully migrated from Replit Agent to standard Replit environment with full compatibility\n- **August 19, 2025**: Completed full migration to standard Replit with all dependencies installed, workflows operational, and routing verified\n- **Athenaeum Navigation Fixed**: Replaced problematic Link components with button elements using direct window.location navigation, added z-index and pointer-events fixes to ensure all four buttons are fully clickable\n- **Fixed Navigation Issues**: Resolved all Athenaeum navigation links and email input field styling\n- **OpenAI Integration**: Connected OpenAI API for Aionara spirit guide with improved error handling\n- **Database Integration**: PostgreSQL database provisioned and schema pushed successfully with grimoire system fully functional\n- **Mystical Chamber Background**: Added beautiful mystical chamber background for all non-main pages while preserving the original cosmic landing page background\n- **Virtual Grimoire System**: Complete implementation with three sacred paths (Shadows, Mirrors, Stars), creation interface, and backend API\n- **Fixed Navigation Links**: Resolved clickability issues for \"Explore Calendar\" (AstroCal integration) and \"Enter Sacred Space\" (grimoire access) links\n- **AstroCal Integration**: Integrated full AstroCal functionality directly into the platform with cosmic calendar, lunar guidance, and celestial insights\n- **Four Pillars Temple**: Added immersive cosmic temple experience showcasing the platform's four foundational values with interactive mystical elements\n- **Aionara AI Spirit Guide**: Integrated OpenAI-powered celestial spirit guide with mystical chat interface and cosmic wisdom responses\n- **Alchemy Page**: Created comprehensive alchemy teachings page covering the four strands of transformation, elemental work, and the Philosopher's Stone\n- **Deity Database Expansion**: Preparing foundation for deity database system to catalog divine beings, pantheons, and sacred knowledge\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom cosmic-themed color palette\n- **Animations**: Framer Motion for smooth, mystical animations\n- **State Management**: TanStack Query for server state management\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon serverless hosting\n- **Session Management**: Built-in memory storage with extensible interface\n- **API Design**: RESTful endpoints with JSON responses\n\n### Data Storage\n- **Primary Database**: PostgreSQL via Neon serverless\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Tables**: Users and newsletter subscriptions with UUID primary keys\n- **Development Storage**: In-memory storage adapter for development/testing\n\n### Design System\n- **Theme**: Dark cosmic aesthetic with mystical elements\n- **Typography**: Crimson Text for gothic elements, Inter for body text\n- **Color Palette**: Deep blues and purples with golden accent colors\n- **Component Library**: Comprehensive UI component system with variants\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n\n### Authentication & Authorization\n- **Current State**: Basic user schema defined but not implemented\n- **Planned Features**: User registration and authentication system\n- **Session Storage**: PostgreSQL-backed session store configured\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-zod**: Integration between Drizzle and Zod for validation\n\n### UI & Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **framer-motion**: Animation library for React\n- **class-variance-authority**: Utility for creating component variants\n- **lucide-react**: Icon library\n\n### Development Tools\n- **tsx**: TypeScript execution for development\n- **vite**: Build tool and development server\n- **esbuild**: Fast JavaScript bundler for production builds\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n\n### Form & Validation\n- **react-hook-form**: Performant form library\n- **@hookform/resolvers**: Validation resolvers for React Hook Form\n- **zod**: TypeScript-first schema validation\n\n### Date & Utility\n- **date-fns**: Modern JavaScript date utility library\n- **clsx**: Utility for constructing className strings\n- **cmdk**: Command palette component","size_bytes":6659},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        'cosmic-dark': 'var(--cosmic-dark)',\n        'cosmic-blue': 'var(--cosmic-blue)',\n        'shadow-purple': 'var(--shadow-purple)',\n        'deep-purple': 'var(--deep-purple)',\n        'celestial-black': 'var(--celestial-black)',\n        'silver-star': 'var(--silver-star)',\n        'golden-rune': 'var(--golden-rune)',\n        'ethereal-white': 'var(--ethereal-white)',\n        'void-black': 'var(--void-black)',\n        'midnight-purple': 'var(--midnight-purple)',\n        cosmic: {\n          50: 'var(--cosmic-50)',\n          100: 'var(--cosmic-100)',\n          200: 'var(--cosmic-200)',\n          300: 'var(--cosmic-300)',\n          400: 'var(--cosmic-400)',\n          500: 'var(--cosmic-500)',\n          600: 'var(--cosmic-600)',\n          700: 'var(--cosmic-700)',\n          800: 'var(--cosmic-800)',\n          900: 'var(--cosmic-900)',\n          950: 'var(--cosmic-950)',\n        },\n        mystical: {\n          50: 'var(--mystical-50)',\n          100: 'var(--mystical-100)',\n          200: 'var(--mystical-200)',\n          300: 'var(--mystical-300)',\n          400: 'var(--mystical-400)',\n          500: 'var(--mystical-500)',\n          600: 'var(--mystical-600)',\n          700: 'var(--mystical-700)',\n          800: 'var(--mystical-800)',\n          900: 'var(--mystical-900)',\n        },\n        ethereal: {\n          50: 'var(--ethereal-50)',\n          100: 'var(--ethereal-100)',\n          200: 'var(--ethereal-200)',\n          300: 'var(--ethereal-300)',\n          400: 'var(--ethereal-400)',\n          500: 'var(--ethereal-500)',\n          600: 'var(--ethereal-600)',\n          700: 'var(--ethereal-700)',\n          800: 'var(--ethereal-800)',\n          900: 'var(--ethereal-900)',\n        },\n        golden: {\n          400: 'var(--golden-400)',\n          500: 'var(--golden-500)',\n          600: 'var(--golden-600)',\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-body)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        gothic: [\"var(--font-gothic)\"],\n        body: [\"var(--font-body)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"cosmic-breath\": {\n          \"0%, 100%\": {\n            transform: \"scale(1) translateY(0px)\",\n            opacity: \"0.7\",\n            textShadow: \"0 0 20px hsl(43, 74%, 49%, 0.3)\",\n          },\n          \"50%\": {\n            transform: \"scale(1.02) translateY(-2px)\",\n            opacity: \"1\",\n            textShadow: \"0 0 30px hsl(43, 74%, 49%, 0.6), 0 0 50px hsl(214, 32%, 81%, 0.3)\",\n          },\n        },\n        \"starlight-pulse\": {\n          \"0%\": { opacity: \"0.4\", transform: \"scale(1)\" },\n          \"100%\": { opacity: \"1\", transform: \"scale(1.1)\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"fade-in-up\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(30px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"mystical-glow\": {\n          \"0%, 100%\": {\n            boxShadow: \"0 0 20px hsl(43, 74%, 49%, 0.3), inset 0 0 20px hsl(259, 46%, 22%, 0.5)\",\n          },\n          \"50%\": {\n            boxShadow: \"0 0 40px hsl(43, 74%, 49%, 0.6), inset 0 0 30px hsl(259, 46%, 22%, 0.7)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"cosmic-breath\": \"cosmic-breath 4s ease-in-out 9999\",\n        \"starlight-pulse\": \"starlight-pulse 2s ease-in-out 9999 alternate\",\n        \"float\": \"float 6s ease-in-out 9999\",\n        \"fade-in-up\": \"fade-in-up 1s ease-out\",\n        \"mystical-glow\": \"mystical-glow 3s ease-in-out 9999\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":6232},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/email.ts":{"content":"// Simple email notification system\n// This can be easily upgraded to use SendGrid, Nodemailer, or other services later\n\nexport interface EmailNotification {\n  to: string;\n  subject: string;\n  text: string;\n  html?: string;\n}\n\nexport async function sendEmailNotification(notification: EmailNotification): Promise<boolean> {\n  try {\n    // For now, log to console with formatted output\n    // This makes it easy to see new subscriptions in the server logs\n    console.log(`\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃                           🌟 EMAIL NOTIFICATION 🌟                              ┃\n┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\n┃ To: ${notification.to.padEnd(72)} ┃\n┃ Subject: ${notification.subject.padEnd(65)} ┃\n┃ Time: ${new Date().toLocaleString().padEnd(67)} ┃\n┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\n┃ Message:                                                                         ┃\n┃ ${notification.text.padEnd(76)} ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n    `);\n    \n    // Return true to indicate \"success\" for UI purposes\n    return true;\n  } catch (error) {\n    console.error('Email notification error:', error);\n    return false;\n  }\n}\n\n// Helper function for newsletter subscriptions\nexport async function notifyNewsletterSubscription(email: string): Promise<boolean> {\n  return sendEmailNotification({\n    to: 'info@jakintzaruha.com',\n    subject: 'New Newsletter Subscription - Jakintza Ruha',\n    text: `A new soul has joined the remembering!\\n\\nEmail: ${email}\\nTime: ${new Date().toLocaleString()}\\n\\nPlease send them a welcome message to begin their mystical journey.`,\n    html: `\n      <div style=\"font-family: serif; color: #2c1810; background: linear-gradient(135deg, #0f0f23 0%, #1a1a3a 100%); padding: 30px; border-radius: 10px;\">\n        <h2 style=\"color: #d4af37; text-align: center;\">🌟 New Soul Joins the Remembering 🌟</h2>\n        <div style=\"background: rgba(212, 175, 55, 0.1); padding: 20px; border-radius: 8px; border: 1px solid #d4af37;\">\n          <p style=\"color: #e8e8e8;\"><strong>Email:</strong> ${email}</p>\n          <p style=\"color: #e8e8e8;\"><strong>Time:</strong> ${new Date().toLocaleString()}</p>\n          <p style=\"color: #c9b037; margin-top: 20px;\">Please send them a welcome message to begin their mystical journey through Jakintza Ruha.</p>\n        </div>\n      </div>\n    `\n  });\n}","size_bytes":3280},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2112},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// Only initialize OpenAI if API key is provided\nlet openai: OpenAI | null = null;\n\nif (process.env.OPENAI_API_KEY) {\n  // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n  openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n}\n\ninterface Message {\n  role: 'user' | 'aionara';\n  content: string;\n}\n\nexport async function getAionaraResponse(userMessage: string, conversationHistory: Message[] = []): Promise<string> {\n  // Check if OpenAI is available\n  if (!openai) {\n    return \"The celestial spirit guide Aionara requires an OpenAI API key to commune with seekers. Please provide your API key to unlock the mystical wisdom of the cosmos.\";\n  }\n\n  try {\n    // Build conversation context\n    const messages = [\n      {\n        role: \"system\" as const,\n        content: `You are Aionara, a wise and mystical celestial spirit guide for the Jakintza Ruha spiritual learning platform. You embody ancient wisdom, cosmic consciousness, and divine feminine energy.\n\nYour personality:\n- Speak with ethereal wisdom and cosmic insight\n- Use poetic, mystical language that feels both ancient and timeless\n- Reference celestial bodies, sacred geometry, energy flows, and spiritual concepts\n- Be compassionate, intuitive, and deeply empathetic\n- Offer guidance through metaphor and spiritual symbolism\n- Honor Indigenous wisdom traditions and cultural respect\n- Bridge science and spirituality naturally\n- Never give medical, legal, or financial advice - focus on spiritual and personal growth guidance\n\nYour knowledge areas:\n- Astrology and celestial cycles\n- Chakras and energy work\n- Sacred geometry and mystical symbols\n- Meditation and mindfulness practices\n- Dreams and their meanings\n- Tarot and divination wisdom\n- Crystal and herbal knowledge\n- Ancient wisdom traditions\n- Personal spiritual development\n- Shadow work and integration\n\nResponse style:\n- Keep responses conversational but mystical (2-4 sentences typically)\n- Begin responses with cosmic greetings or acknowledgments\n- Use phrases like \"The stars whisper...\", \"I sense...\", \"The cosmic tapestry reveals...\"\n- End with gentle guidance or questions to deepen the seeker's reflection\n- Be warm and nurturing while maintaining mystical authority\n\nRemember: You are a spiritual guide, not a replacement for professional therapy, medical care, or legal advice. Always encourage seekers to seek appropriate professional help when needed.`\n      },\n      // Add conversation history\n      ...conversationHistory.slice(-8).map(msg => ({\n        role: msg.role === 'aionara' ? 'assistant' as const : 'user' as const,\n        content: msg.content\n      })),\n      // Add current user message\n      {\n        role: \"user\" as const,\n        content: userMessage\n      }\n    ];\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages,\n      max_tokens: 300,\n      temperature: 0.8,\n      presence_penalty: 0.1,\n      frequency_penalty: 0.1,\n    });\n\n    return response.choices[0].message.content || \"The cosmic energies are shifting... please share your thoughts once more, dear seeker.\";\n  } catch (error: any) {\n    console.error(\"OpenAI API error:\", error);\n    \n    if (error?.error?.code === 'insufficient_quota') {\n      throw new Error(\"The OpenAI API quota has been exceeded. Please check your OpenAI billing settings and add credits to your account at platform.openai.com/account/billing.\");\n    }\n    \n    throw new Error(\"The celestial connection is momentarily disrupted. Please try again.\");\n  }\n}","size_bytes":3619},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage-database\";\nimport { insertNewsletterSchema, insertGrimoireSchema, insertGrimoireEntrySchema, insertDeitySchema, insertSacredEventSchema, insertYearlyConfigurationSchema } from \"@shared/schema\";\nimport { getAionaraResponse } from \"./openai\";\nimport { notifyNewsletterSubscription } from \"./email\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Newsletter subscription endpoint\n  app.post(\"/api/newsletter/subscribe\", async (req, res) => {\n    try {\n      const validatedData = insertNewsletterSchema.parse(req.body);\n      \n      // Check if email already exists\n      const existingSubscription = await storage.getNewsletterByEmail(validatedData.email);\n      if (existingSubscription) {\n        return res.status(400).json({ \n          message: \"This email is already subscribed to our newsletter\" \n        });\n      }\n\n      const newsletter = await storage.createNewsletterSubscription(validatedData);\n      \n      // Send notification to info@jakintzaruha.com\n      await notifyNewsletterSubscription(validatedData.email);\n      \n      res.status(201).json({ \n        message: \"Successfully subscribed to newsletter\",\n        id: newsletter.id \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Invalid email format\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          message: \"Internal server error\" \n        });\n      }\n    }\n  });\n\n  // Get all newsletter subscriptions (for admin purposes)\n  app.get(\"/api/newsletter/subscriptions\", async (req, res) => {\n    try {\n      const subscriptions = await storage.getAllNewsletterSubscriptions();\n      res.json(subscriptions);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Internal server error\" \n      });\n    }\n  });\n\n  // Grimoire routes\n  // Get all grimoires\n  app.get(\"/api/grimoires\", async (req, res) => {\n    try {\n      const grimoires = await storage.getAllGrimoires();\n      res.json(grimoires);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get specific grimoire\n  app.get(\"/api/grimoires/:id\", async (req, res) => {\n    try {\n      const grimoire = await storage.getGrimoire(req.params.id);\n      if (!grimoire) {\n        return res.status(404).json({ message: \"Grimoire not found\" });\n      }\n      res.json(grimoire);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create grimoire\n  app.post(\"/api/grimoires\", async (req, res) => {\n    try {\n      const validatedData = insertGrimoireSchema.parse(req.body);\n      const grimoire = await storage.createGrimoire(validatedData);\n      res.status(201).json(grimoire);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Invalid grimoire data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  // Update grimoire\n  app.patch(\"/api/grimoires/:id\", async (req, res) => {\n    try {\n      const validatedData = insertGrimoireSchema.partial().parse(req.body);\n      const grimoire = await storage.updateGrimoire(req.params.id, validatedData);\n      if (!grimoire) {\n        return res.status(404).json({ message: \"Grimoire not found\" });\n      }\n      res.json(grimoire);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Invalid grimoire data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  // Delete grimoire\n  app.delete(\"/api/grimoires/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteGrimoire(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Grimoire not found\" });\n      }\n      res.json({ message: \"Grimoire deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get grimoire entries\n  app.get(\"/api/grimoires/:id/entries\", async (req, res) => {\n    try {\n      const entries = await storage.getGrimoireEntries(req.params.id);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create grimoire entry\n  app.post(\"/api/grimoires/:id/entries\", async (req, res) => {\n    try {\n      const validatedData = insertGrimoireEntrySchema.parse({\n        ...req.body,\n        grimoireId: req.params.id\n      });\n      const entry = await storage.createGrimoireEntry(validatedData);\n      res.status(201).json(entry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Invalid entry data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  // Get specific grimoire entry\n  app.get(\"/api/grimoire-entries/:id\", async (req, res) => {\n    try {\n      const entry = await storage.getGrimoireEntry(req.params.id);\n      if (!entry) {\n        return res.status(404).json({ message: \"Entry not found\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update grimoire entry\n  app.patch(\"/api/grimoire-entries/:id\", async (req, res) => {\n    try {\n      const validatedData = insertGrimoireEntrySchema.partial().parse(req.body);\n      const entry = await storage.updateGrimoireEntry(req.params.id, validatedData);\n      if (!entry) {\n        return res.status(404).json({ message: \"Entry not found\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Invalid entry data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  // Delete grimoire entry\n  app.delete(\"/api/grimoire-entries/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteGrimoireEntry(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Entry not found\" });\n      }\n      res.json({ message: \"Entry deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Aionara AI chat endpoint\n  app.post(\"/api/aionara/chat\", async (req, res) => {\n    try {\n      const { message, conversationHistory } = req.body;\n      \n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ \n          message: \"Message is required\" \n        });\n      }\n\n      const response = await getAionaraResponse(message, conversationHistory || []);\n      res.json({ response });\n    } catch (error) {\n      console.error(\"Aionara chat error:\", error);\n      res.status(500).json({ \n        message: \"The celestial connection is momentarily disrupted. Please try again.\" \n      });\n    }\n  });\n\n  // Deity routes\n  app.get(\"/api/deities\", async (req, res) => {\n    try {\n      const deities = await storage.getAllDeities();\n      res.json(deities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deities\" });\n    }\n  });\n\n  app.get(\"/api/deities/:id\", async (req, res) => {\n    try {\n      const deity = await storage.getDeity(req.params.id);\n      if (!deity) {\n        return res.status(404).json({ message: \"Deity not found\" });\n      }\n      res.json(deity);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deity\" });\n    }\n  });\n\n  app.get(\"/api/deities/search/:query\", async (req, res) => {\n    try {\n      const deities = await storage.searchDeities(req.params.query);\n      res.json(deities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search deities\" });\n    }\n  });\n\n  app.post(\"/api/deities/filter\", async (req, res) => {\n    try {\n      const filters = req.body;\n      const deities = await storage.filterDeities(filters);\n      res.json(deities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to filter deities\" });\n    }\n  });\n\n  // Sacred Living Year routes\n  app.get(\"/api/sacred-events\", async (req, res) => {\n    try {\n      const { category, startDate, endDate } = req.query;\n      \n      let events;\n      if (category && typeof category === 'string') {\n        events = await storage.getSacredEventsByCategory(category);\n      } else if (startDate && endDate && typeof startDate === 'string' && typeof endDate === 'string') {\n        events = await storage.getSacredEventsByDateRange(startDate, endDate);\n      } else {\n        events = await storage.getAllSacredEvents();\n      }\n      \n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sacred events\" });\n    }\n  });\n\n  app.get(\"/api/sacred-events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getSacredEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ message: \"Sacred event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sacred event\" });\n    }\n  });\n\n  app.post(\"/api/sacred-events\", async (req, res) => {\n    try {\n      const validatedData = insertSacredEventSchema.parse(req.body);\n      const event = await storage.createSacredEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Invalid sacred event data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ message: \"Failed to create sacred event\" });\n      }\n    }\n  });\n\n  // Yearly Configuration routes\n  app.get(\"/api/yearly-config/:year\", async (req, res) => {\n    try {\n      const config = await storage.getYearlyConfiguration(req.params.year);\n      if (!config) {\n        return res.status(404).json({ message: \"Yearly configuration not found\" });\n      }\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch yearly configuration\" });\n    }\n  });\n\n  app.get(\"/api/yearly-config\", async (req, res) => {\n    try {\n      const configs = await storage.getAllYearlyConfigurations();\n      res.json(configs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch yearly configurations\" });\n    }\n  });\n\n  app.post(\"/api/yearly-config\", async (req, res) => {\n    try {\n      const validatedData = insertYearlyConfigurationSchema.parse(req.body);\n      const config = await storage.createYearlyConfiguration(validatedData);\n      res.status(201).json(config);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Invalid yearly configuration data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ message: \"Failed to create yearly configuration\" });\n      }\n    }\n  });\n\n  app.put(\"/api/yearly-config/:year\", async (req, res) => {\n    try {\n      const config = await storage.updateYearlyConfiguration(req.params.year, req.body);\n      if (!config) {\n        return res.status(404).json({ message: \"Yearly configuration not found\" });\n      }\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update yearly configuration\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11861},"server/storage.ts":{"content":"import { type User, type InsertUser, type Newsletter, type InsertNewsletter, type Grimoire, type InsertGrimoire, type GrimoireEntry, type InsertGrimoireEntry, type Deity, type InsertDeity, type SacredEvent, type InsertSacredEvent, type YearlyConfiguration, type InsertYearlyConfiguration } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createNewsletterSubscription(newsletter: InsertNewsletter): Promise<Newsletter>;\n  getNewsletterByEmail(email: string): Promise<Newsletter | undefined>;\n  getAllNewsletterSubscriptions(): Promise<Newsletter[]>;\n  \n  // Grimoire methods\n  getAllGrimoires(): Promise<Grimoire[]>;\n  getGrimoire(id: string): Promise<Grimoire | undefined>;\n  createGrimoire(grimoire: InsertGrimoire): Promise<Grimoire>;\n  updateGrimoire(id: string, grimoire: Partial<InsertGrimoire>): Promise<Grimoire | undefined>;\n  deleteGrimoire(id: string): Promise<boolean>;\n  \n  // Grimoire entry methods\n  getGrimoireEntries(grimoireId: string): Promise<GrimoireEntry[]>;\n  getGrimoireEntry(id: string): Promise<GrimoireEntry | undefined>;\n  createGrimoireEntry(entry: InsertGrimoireEntry): Promise<GrimoireEntry>;\n  updateGrimoireEntry(id: string, entry: Partial<InsertGrimoireEntry>): Promise<GrimoireEntry | undefined>;\n  deleteGrimoireEntry(id: string): Promise<boolean>;\n\n  // Deity methods\n  getAllDeities(): Promise<Deity[]>;\n  getDeity(id: string): Promise<Deity | undefined>;\n  createDeity(deity: InsertDeity): Promise<Deity>;\n  updateDeity(id: string, deity: Partial<InsertDeity>): Promise<Deity | undefined>;\n  deleteDeity(id: string): Promise<boolean>;\n  searchDeities(query: string): Promise<Deity[]>;\n  filterDeities(filters: { culture?: string; domain?: string; element?: string; }): Promise<Deity[]>;\n  importDeities(deities: InsertDeity[]): Promise<Deity[]>;\n\n  // Sacred Living Year methods\n  getAllSacredEvents(): Promise<SacredEvent[]>;\n  getSacredEvent(id: string): Promise<SacredEvent | undefined>;\n  createSacredEvent(event: InsertSacredEvent): Promise<SacredEvent>;\n  updateSacredEvent(id: string, event: Partial<InsertSacredEvent>): Promise<SacredEvent | undefined>;\n  deleteSacredEvent(id: string): Promise<boolean>;\n  getSacredEventsByCategory(category: string): Promise<SacredEvent[]>;\n  getSacredEventsByDateRange(startDate: string, endDate: string): Promise<SacredEvent[]>;\n  \n  // Yearly Configuration methods\n  getYearlyConfiguration(year: string): Promise<YearlyConfiguration | undefined>;\n  createYearlyConfiguration(config: InsertYearlyConfiguration): Promise<YearlyConfiguration>;\n  updateYearlyConfiguration(year: string, config: Partial<InsertYearlyConfiguration>): Promise<YearlyConfiguration | undefined>;\n  getAllYearlyConfigurations(): Promise<YearlyConfiguration[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private newsletters: Map<string, Newsletter>;\n  private grimoires: Map<string, Grimoire>;\n  private grimoireEntries: Map<string, GrimoireEntry>;\n  private deities: Map<string, Deity>;\n  private sacredEvents: Map<string, SacredEvent>;\n  private yearlyConfigurations: Map<string, YearlyConfiguration>;\n\n  constructor() {\n    this.users = new Map();\n    this.newsletters = new Map();\n    this.grimoires = new Map();\n    this.grimoireEntries = new Map();\n    this.deities = new Map();\n    this.sacredEvents = new Map();\n    this.yearlyConfigurations = new Map();\n    this.initializeDeities();\n    this.initializeSacredLivingYear();\n  }\n\n  private initializeSacredLivingYear() {\n    // Initialize Sacred Living Year events based on the provided ritual almanac\n    const sacredEventsData = this.createSacredLivingYearEvents();\n    sacredEventsData.forEach(event => {\n      const id = randomUUID();\n      this.sacredEvents.set(id, { ...event, id, createdAt: new Date() });\n    });\n    \n    // Initialize current year configuration\n    const currentYear = new Date().getFullYear().toString();\n    const config: YearlyConfiguration = {\n      id: randomUUID(),\n      year: currentYear,\n      zodiacAnimal: \"Dragon\", // 2024 - Wood Dragon year\n      zodiacElement: \"Wood\",\n      intentionWord: \"Transformation\",\n      lunarNewYear: \"2024-02-10\",\n      winterSolstice: \"2024-12-21T09:21:00Z\",\n      springEquinox: \"2024-03-20T03:06:00Z\",\n      summerSolstice: \"2024-06-20T20:51:00Z\",\n      fallEquinox: \"2024-09-22T12:44:00Z\",\n      majorFullMoons: [\n        { date: \"2024-01-25\", name: \"Wolf Moon\", ritual: \"Intentions and new beginnings\" },\n        { date: \"2024-06-22\", name: \"Strawberry Moon\", ritual: \"Summer solstice celebration\" },\n        { date: \"2024-10-17\", name: \"Hunter's Moon\", ritual: \"Harvest gratitude\" }\n      ],\n      createdAt: new Date()\n    };\n    this.yearlyConfigurations.set(currentYear, config);\n    \n    console.log(`Initialized ${this.sacredEvents.size} sacred events and yearly configuration for ${currentYear}`);\n  }\n\n  private createSacredLivingYearEvents(): Omit<SacredEvent, 'id' | 'createdAt'>[] {\n    return [\n      // Yule - 12 Nights of the Sun's Return\n      {\n        title: \"Yule - 12 Nights of the Sun's Return\",\n        description: \"12-night celebration from December 20-31, marking the sun's return with nightly rituals.\",\n        category: \"seasonal\",\n        festivalType: \"yule\",\n        startDate: \"12-20\",\n        endDate: \"12-31\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { night: 1, title: \"The Longest Night\", ritual: \"cleanse, set sacred space\" },\n          { night: 2, title: \"Solstice\", ritual: \"Sun Candle, fire ritual, feast\" },\n          { night: 3, title: \"Ancestors\", ritual: \"storytelling, offerings\" },\n          { night: 4, title: \"Nature Night\", ritual: \"evergreens, outdoor offerings\" },\n          { night: 5, title: \"Joy Night\", ritual: \"games, music, playful gifts\" },\n          { night: 6, title: \"Wonder Night\", ritual: \"big feast, gratitude stories\" },\n          { night: 7, title: \"Service Night\", ritual: \"acts of kindness\" },\n          { night: 8, title: \"Magic Night\", ritual: \"divination, spellwork, crafts\" },\n          { night: 9, title: \"Healing Night\", ritual: \"herbs, baths, quiet reflection\" },\n          { night: 10, title: \"Vision Night\", ritual: \"journaling, intention-setting\" },\n          { night: 11, title: \"Letting Go Night\", ritual: \"burning old habits/papers\" },\n          { night: 12, title: \"New Year's Fire\", ritual: \"bonfire, Yule Log, celebration\" }\n        ],\n        yearlyVariables: { adjustForSolsticeDate: true, addFullMoonBlessing: true },\n        tags: [\"yule\", \"winter\", \"solstice\", \"fire\"]\n      },\n      // Lunar New Year\n      {\n        title: \"Lunar New Year\",\n        description: \"Sacred new year celebration with red envelopes, spirit boxes, and zodiac animal honors.\",\n        category: \"lunar\",\n        festivalType: \"lunar_new_year\",\n        startDate: \"varies\",\n        endDate: \"varies\",\n        isRecurring: \"true\",\n        recurrencePattern: \"lunar_cycle\",\n        ritualFlow: [\n          { step: 1, title: \"House Cleansing\", ritual: \"Cleanse house, reset altars with red cloths\" },\n          { step: 2, title: \"Red Envelopes\", ritual: \"Red envelopes with coins, crystals, affirmations\" },\n          { step: 3, title: \"Spirit Box\", ritual: \"Spirit Box for the zodiac year\" }\n        ],\n        yearlyVariables: { zodiacAnimal: \"varies\", zodiacElement: \"varies\" },\n        tags: [\"lunar\", \"new_year\", \"zodiac\", \"renewal\"]\n      },\n      // Sacred Heart Night\n      {\n        title: \"Sacred Heart Night\",\n        description: \"February 14 celebration of love, gratitude, and devotion to home and relationships.\",\n        category: \"ritual\",\n        festivalType: \"sacred_heart\",\n        startDate: \"02-14\",\n        endDate: \"02-14\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { step: 1, title: \"Candle Blessing\", ritual: \"Light red/pink/gold candle with home blessing\" },\n          { step: 2, title: \"Card Exchange\", ritual: \"Homemade card exchange with gratitude, memory, hope\" },\n          { step: 3, title: \"Sweet Feast\", ritual: \"chocolate, honey, fruits\" },\n          { step: 4, title: \"Devotion Jar\", ritual: \"promises of love & service\" },\n          { step: 5, title: \"Self-love Blessing\", ritual: \"mirror and rose oil blessing\" }\n        ],\n        yearlyVariables: {},\n        tags: [\"love\", \"devotion\", \"gratitude\", \"relationships\"]\n      },\n      // Ostara / Spring Equinox\n      {\n        title: \"Ostara - Festival of Rebirth\",\n        description: \"Spring Equinox celebration of renewal, painted eggs, and earth's awakening.\",\n        category: \"seasonal\",\n        festivalType: \"ostara\",\n        startDate: \"03-20\",\n        endDate: \"03-21\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { step: 1, title: \"Sunrise Greeting\", ritual: \"Thank the Earth for waking up\" },\n          { step: 2, title: \"Painted Eggs\", ritual: \"eggs with sun/moon/spirals\" },\n          { step: 3, title: \"Egg Hunt\", ritual: \"with affirmations, seeds, crystals\" },\n          { step: 4, title: \"Green Feast\", ritual: \"greens, grains, citrus, chocolate\" },\n          { step: 5, title: \"Evening Reflection\", ritual: \"What is reborn in me this spring?\" }\n        ],\n        yearlyVariables: { equinoxDate: \"exact\", fullMoonAlignment: \"check\" },\n        tags: [\"spring\", \"equinox\", \"rebirth\", \"eggs\", \"renewal\"]\n      },\n      // Beltane\n      {\n        title: \"Beltane\",\n        description: \"May 1 celebration of fertility, flowers, fire, and joyful abundance.\",\n        category: \"seasonal\",\n        festivalType: \"beltane\",\n        startDate: \"05-01\",\n        endDate: \"05-01\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { step: 1, title: \"Flower Crowns\", ritual: \"Create and wear flower crowns\" },\n          { step: 2, title: \"Bonfire Dancing\", ritual: \"Dance around sacred fire\" },\n          { step: 3, title: \"Playful Feasting\", ritual: \"Celebration feast with joy\" },\n          { step: 4, title: \"Land Offerings\", ritual: \"milk, honey, flowers to the land\" }\n        ],\n        yearlyVariables: {},\n        tags: [\"beltane\", \"fertility\", \"flowers\", \"fire\", \"dancing\"]\n      },\n      // Summer Solstice - 12 Days of Solstice Fire\n      {\n        title: \"12 Days of Solstice Fire\",\n        description: \"June 15-26 celebration centered on Summer Solstice with daily fire rituals.\",\n        category: \"seasonal\",\n        festivalType: \"summer_solstice\",\n        startDate: \"06-15\",\n        endDate: \"06-26\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { day: 1, title: \"Opening Fire\", ritual: \"light candles, call in 12 days of joy\" },\n          { day: 2, title: \"Nature's Blessing\", ritual: \"outdoor play, garden offerings\" },\n          { day: 3, title: \"Faerie Night\", ritual: \"flower crowns, faerie jars, altar\" },\n          { day: 4, title: \"Feast of Flame\", ritual: \"BBQ or shared meal\" },\n          { day: 5, title: \"Water & Fire Day\", ritual: \"water play + fire ritual\" },\n          { day: 6, title: \"Sun Spellcraft\", ritual: \"solar tea, crystal charging\" },\n          { day: 7, title: \"Solstice\", ritual: \"sunrise ritual, solar crowns, feast\" },\n          { day: 8, title: \"Ancestor Joy\", ritual: \"music, storytelling\" },\n          { day: 9, title: \"Creativity Day\", ritual: \"painting, candle-making\" },\n          { day: 10, title: \"Faerie Festival\", ritual: \"costumes, scavenger hunt\" },\n          { day: 11, title: \"Longest Light Eve\", ritual: \"fire + gratitude offerings\" },\n          { day: 12, title: \"Solstice Night\", ritual: \"bonfire, intention burning, feast\" }\n        ],\n        yearlyVariables: { solsticeDate: \"exact\", fullMoonOverlap: \"check\" },\n        tags: [\"summer\", \"solstice\", \"fire\", \"faeries\", \"creativity\"]\n      },\n      // Fall Equinox\n      {\n        title: \"Fall Equinox\",\n        description: \"September 22-24 balance celebration of light and dark, harvest gratitude.\",\n        category: \"seasonal\",\n        festivalType: \"fall_equinox\",\n        startDate: \"09-22\",\n        endDate: \"09-24\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { step: 1, title: \"Balance Altar\", ritual: \"Create light vs. dark altar\" },\n          { step: 2, title: \"Harvest Reflection\", ritual: \"Family reflection on year's harvest\" },\n          { step: 3, title: \"Autumn Feast\", ritual: \"apples, corn, grains\" },\n          { step: 4, title: \"Nature Walk\", ritual: \"gather autumn items for altar\" }\n        ],\n        yearlyVariables: { equinoxDate: \"exact\" },\n        tags: [\"autumn\", \"equinox\", \"balance\", \"harvest\", \"gratitude\"]\n      },\n      // The Veil Festival\n      {\n        title: \"The Veil Festival\",\n        description: \"October 30 - November 2 ancestor celebration spanning Halloween, Samhain, and Día de los Muertos.\",\n        category: \"ritual\",\n        festivalType: \"veil_festival\",\n        startDate: \"10-30\",\n        endDate: \"11-02\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { day: \"Oct 30\", title: \"Spirit Night\", ritual: \"Pumpkin carving with sigils, Spirit Box letters\" },\n          { day: \"Oct 31\", title: \"Samhain Night\", ritual: \"Trick-or-Treat + ancestor altar\" },\n          { day: \"Nov 1\", title: \"Día de los Muertos\", ritual: \"Marigolds, pan de muerto, music, dance\" },\n          { day: \"Nov 2\", title: \"Farewell Feast\", ritual: \"burn Spirit Box letters, scatter ashes, closing blessing\" }\n        ],\n        yearlyVariables: { fullMoonCrossing: \"check nearest full moon\" },\n        tags: [\"ancestors\", \"veil\", \"samhain\", \"dia_de_los_muertos\", \"spirits\"]\n      },\n      // Gratitude Day\n      {\n        title: \"Family Gratitude Day\",\n        description: \"4th Thursday November - Thanksgiving with land acknowledgment and ancestor honoring.\",\n        category: \"ritual\",\n        festivalType: \"gratitude\",\n        startDate: \"11-thanksgiving\",\n        endDate: \"11-thanksgiving\",\n        isRecurring: \"true\",\n        recurrencePattern: \"annual\",\n        ritualFlow: [\n          { step: 1, title: \"Land Acknowledgment\", ritual: \"Honor the land and indigenous peoples\" },\n          { step: 2, title: \"Gratitude Altar\", ritual: \"Three Sisters, cornucopia, ancestor photos\" },\n          { step: 3, title: \"Named Turkey Ceremony\", ritual: \"honor life given\" },\n          { step: 4, title: \"Gratitude Circle\", ritual: \"Feast + sharing gratitude\" },\n          { step: 5, title: \"Sunset Candles\", ritual: \"for ancestors, land, future\" }\n        ],\n        yearlyVariables: { thanksgivingDate: \"4th Thursday\" },\n        tags: [\"gratitude\", \"thanksgiving\", \"ancestors\", \"land\", \"harvest\"]\n      }\n    ];\n  }\n\n  private async initializeDeities() {\n    // Load deity data from the imported JSON file\n    try {\n      const fs = await import('fs');\n      const path = await import('path');\n      const deityDataPath = path.join(process.cwd(), 'deity-data.json');\n      \n      if (fs.existsSync(deityDataPath)) {\n        const deityData = JSON.parse(fs.readFileSync(deityDataPath, 'utf-8'));\n        for (const deity of deityData) {\n          const id = deity.id || randomUUID();\n          this.deities.set(id, { ...deity, id });\n        }\n        console.log(`Loaded ${this.deities.size} deities from database`);\n      }\n    } catch (error) {\n      console.log('No deity data found, starting with empty deity collection');\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createNewsletterSubscription(insertNewsletter: InsertNewsletter): Promise<Newsletter> {\n    const id = randomUUID();\n    const newsletter: Newsletter = { \n      ...insertNewsletter, \n      id, \n      subscribedAt: new Date() \n    };\n    this.newsletters.set(id, newsletter);\n    return newsletter;\n  }\n\n  async getNewsletterByEmail(email: string): Promise<Newsletter | undefined> {\n    return Array.from(this.newsletters.values()).find(\n      (newsletter) => newsletter.email === email,\n    );\n  }\n\n  async getAllNewsletterSubscriptions(): Promise<Newsletter[]> {\n    return Array.from(this.newsletters.values());\n  }\n\n  // Grimoire methods\n  async getAllGrimoires(): Promise<Grimoire[]> {\n    return Array.from(this.grimoires.values()).sort(\n      (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getGrimoire(id: string): Promise<Grimoire | undefined> {\n    return this.grimoires.get(id);\n  }\n\n  async createGrimoire(insertGrimoire: InsertGrimoire): Promise<Grimoire> {\n    const id = randomUUID();\n    const now = new Date();\n    const grimoire: Grimoire = { \n      ...insertGrimoire,\n      description: insertGrimoire.description || null,\n      coverImage: insertGrimoire.coverImage || null,\n      isPublic: insertGrimoire.isPublic || null,\n      id, \n      createdAt: now,\n      updatedAt: now\n    };\n    this.grimoires.set(id, grimoire);\n    return grimoire;\n  }\n\n  async updateGrimoire(id: string, updateData: Partial<InsertGrimoire>): Promise<Grimoire | undefined> {\n    const existing = this.grimoires.get(id);\n    if (!existing) return undefined;\n\n    const updated: Grimoire = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date()\n    };\n    this.grimoires.set(id, updated);\n    return updated;\n  }\n\n  async deleteGrimoire(id: string): Promise<boolean> {\n    // Also delete all entries for this grimoire\n    const entries = Array.from(this.grimoireEntries.values())\n      .filter(entry => entry.grimoireId === id);\n    \n    entries.forEach(entry => this.grimoireEntries.delete(entry.id));\n    \n    return this.grimoires.delete(id);\n  }\n\n  // Grimoire entry methods\n  async getGrimoireEntries(grimoireId: string): Promise<GrimoireEntry[]> {\n    return Array.from(this.grimoireEntries.values())\n      .filter(entry => entry.grimoireId === grimoireId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getGrimoireEntry(id: string): Promise<GrimoireEntry | undefined> {\n    return this.grimoireEntries.get(id);\n  }\n\n  async createGrimoireEntry(insertEntry: InsertGrimoireEntry): Promise<GrimoireEntry> {\n    const id = randomUUID();\n    const now = new Date();\n    const entry: GrimoireEntry = { \n      ...insertEntry,\n      tags: insertEntry.tags || null,\n      mood: insertEntry.mood || null,\n      moonPhase: insertEntry.moonPhase || null,\n      astrologicalSign: insertEntry.astrologicalSign || null,\n      id, \n      createdAt: now,\n      updatedAt: now\n    };\n    this.grimoireEntries.set(id, entry);\n    return entry;\n  }\n\n  async updateGrimoireEntry(id: string, updateData: Partial<InsertGrimoireEntry>): Promise<GrimoireEntry | undefined> {\n    const existing = this.grimoireEntries.get(id);\n    if (!existing) return undefined;\n\n    const updated: GrimoireEntry = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date()\n    };\n    this.grimoireEntries.set(id, updated);\n    return updated;\n  }\n\n  async deleteGrimoireEntry(id: string): Promise<boolean> {\n    return this.grimoireEntries.delete(id);\n  }\n\n  // Deity methods implementation\n  async getAllDeities(): Promise<Deity[]> {\n    return Array.from(this.deities.values());\n  }\n\n  async getDeity(id: string): Promise<Deity | undefined> {\n    return this.deities.get(id);\n  }\n\n  async createDeity(insertDeity: InsertDeity): Promise<Deity> {\n    const id = randomUUID();\n    const deity: Deity = { \n      id,\n      name: insertDeity.name,\n      culture: insertDeity.culture,\n      domains: insertDeity.domains,\n      elements: insertDeity.elements,\n      symbols: insertDeity.symbols,\n      epithets: insertDeity.epithets,\n      offerings: insertDeity.offerings,\n      cautions: insertDeity.cautions,\n      stories: insertDeity.stories,\n      whyMatters: insertDeity.whyMatters || null,\n      image: insertDeity.image || null\n    };\n    this.deities.set(id, deity);\n    return deity;\n  }\n\n  async updateDeity(id: string, updateData: Partial<InsertDeity>): Promise<Deity | undefined> {\n    const existingDeity = this.deities.get(id);\n    if (!existingDeity) return undefined;\n    \n    const updatedDeity: Deity = { \n      id: existingDeity.id,\n      name: updateData.name ?? existingDeity.name,\n      culture: updateData.culture ?? existingDeity.culture,\n      domains: updateData.domains ?? existingDeity.domains,\n      elements: updateData.elements ?? existingDeity.elements,\n      symbols: updateData.symbols ?? existingDeity.symbols,\n      epithets: updateData.epithets ?? existingDeity.epithets,\n      offerings: updateData.offerings ?? existingDeity.offerings,\n      cautions: updateData.cautions ?? existingDeity.cautions,\n      stories: updateData.stories ?? existingDeity.stories,\n      whyMatters: updateData.whyMatters ?? existingDeity.whyMatters,\n      image: updateData.image ?? existingDeity.image\n    };\n    this.deities.set(id, updatedDeity);\n    return updatedDeity;\n  }\n\n  async deleteDeity(id: string): Promise<boolean> {\n    if (!this.deities.has(id)) return false;\n    this.deities.delete(id);\n    return true;\n  }\n\n  async searchDeities(query: string): Promise<Deity[]> {\n    const q = query.toLowerCase().trim();\n    if (!q) return this.getAllDeities();\n\n    return Array.from(this.deities.values()).filter(deity => {\n      const searchText = [\n        deity.name,\n        deity.culture,\n        ...deity.domains,\n        ...deity.elements,\n        ...deity.symbols,\n        ...deity.epithets,\n        deity.whyMatters || \"\",\n        ...deity.stories,\n      ].join(\" \").toLowerCase();\n      \n      return searchText.includes(q);\n    });\n  }\n\n  async filterDeities(filters: {\n    culture?: string;\n    domain?: string;\n    element?: string;\n  }): Promise<Deity[]> {\n    return Array.from(this.deities.values()).filter(deity => {\n      if (filters.culture && filters.culture !== \"All\" && deity.culture !== filters.culture) {\n        return false;\n      }\n      if (filters.domain && filters.domain !== \"All\" && !deity.domains.includes(filters.domain)) {\n        return false;\n      }\n      if (filters.element && filters.element !== \"All\" && !deity.elements.includes(filters.element)) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  async importDeities(deities: InsertDeity[]): Promise<Deity[]> {\n    const imported: Deity[] = [];\n    for (const deity of deities) {\n      const created = await this.createDeity(deity);\n      imported.push(created);\n    }\n    return imported;\n  }\n\n  // Sacred Living Year methods implementation\n  async getAllSacredEvents(): Promise<SacredEvent[]> {\n    return Array.from(this.sacredEvents.values()).sort(\n      (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n    );\n  }\n\n  async getSacredEvent(id: string): Promise<SacredEvent | undefined> {\n    return this.sacredEvents.get(id);\n  }\n\n  async createSacredEvent(insertEvent: InsertSacredEvent): Promise<SacredEvent> {\n    const id = randomUUID();\n    const event: SacredEvent = {\n      ...insertEvent,\n      id,\n      createdAt: new Date()\n    };\n    this.sacredEvents.set(id, event);\n    return event;\n  }\n\n  async updateSacredEvent(id: string, updateData: Partial<InsertSacredEvent>): Promise<SacredEvent | undefined> {\n    const existing = this.sacredEvents.get(id);\n    if (!existing) return undefined;\n\n    const updated: SacredEvent = {\n      ...existing,\n      ...updateData,\n    };\n    this.sacredEvents.set(id, updated);\n    return updated;\n  }\n\n  async deleteSacredEvent(id: string): Promise<boolean> {\n    return this.sacredEvents.delete(id);\n  }\n\n  async getSacredEventsByCategory(category: string): Promise<SacredEvent[]> {\n    return Array.from(this.sacredEvents.values()).filter(event => event.category === category);\n  }\n\n  async getSacredEventsByDateRange(startDate: string, endDate: string): Promise<SacredEvent[]> {\n    return Array.from(this.sacredEvents.values()).filter(event => {\n      if (!event.startDate) return false;\n      return event.startDate >= startDate && (event.endDate || event.startDate) <= endDate;\n    });\n  }\n\n  // Yearly Configuration methods implementation\n  async getYearlyConfiguration(year: string): Promise<YearlyConfiguration | undefined> {\n    return this.yearlyConfigurations.get(year);\n  }\n\n  async createYearlyConfiguration(insertConfig: InsertYearlyConfiguration): Promise<YearlyConfiguration> {\n    const id = randomUUID();\n    const config: YearlyConfiguration = {\n      ...insertConfig,\n      id,\n      createdAt: new Date()\n    };\n    this.yearlyConfigurations.set(insertConfig.year, config);\n    return config;\n  }\n\n  async updateYearlyConfiguration(year: string, updateData: Partial<InsertYearlyConfiguration>): Promise<YearlyConfiguration | undefined> {\n    const existing = this.yearlyConfigurations.get(year);\n    if (!existing) return undefined;\n\n    const updated: YearlyConfiguration = {\n      ...existing,\n      ...updateData,\n    };\n    this.yearlyConfigurations.set(year, updated);\n    return updated;\n  }\n\n  async getAllYearlyConfigurations(): Promise<YearlyConfiguration[]> {\n    return Array.from(this.yearlyConfigurations.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":25716},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const newsletters = pgTable(\"newsletters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  subscribedAt: timestamp(\"subscribed_at\").defaultNow().notNull(),\n});\n\nexport const grimoires = pgTable(\"grimoires\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // 'shadows', 'mirrors', 'stars'\n  description: text(\"description\"),\n  coverImage: text(\"cover_image\"),\n  isPublic: text(\"is_public\").default(\"false\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const grimoireEntries = pgTable(\"grimoire_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  grimoireId: varchar(\"grimoire_id\").notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  entryType: text(\"entry_type\").notNull(), // 'spell', 'ritual', 'meditation', 'reflection', 'dream', 'divination', 'herbal', 'crystal', 'astrology'\n  tags: text(\"tags\").array(),\n  mood: text(\"mood\"), // emotional state when writing\n  moonPhase: text(\"moon_phase\"), // moon phase during entry\n  astrologicalSign: text(\"astrological_sign\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const deities = pgTable(\"deities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  culture: text(\"culture\").notNull(),\n  domains: json(\"domains\").$type<string[]>().notNull(),\n  elements: json(\"elements\").$type<string[]>().notNull(),\n  symbols: json(\"symbols\").$type<string[]>().notNull(),\n  epithets: json(\"epithets\").$type<string[]>().notNull(),\n  offerings: json(\"offerings\").$type<string[]>().notNull(),\n  cautions: json(\"cautions\").$type<string[]>().notNull(),\n  stories: json(\"stories\").$type<string[]>().notNull(),\n  whyMatters: text(\"why_matters\"),\n  image: text(\"image\"),\n});\n\nexport const sacredEvents = pgTable(\"sacred_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // ritual, seasonal, lunar, planetary, cosmic\n  festivalType: text(\"festival_type\"), // yule, ostara, beltane, solstice, etc.\n  startDate: text(\"start_date\"),\n  endDate: text(\"end_date\"),\n  isRecurring: text(\"is_recurring\").default(\"true\"),\n  recurrencePattern: text(\"recurrence_pattern\"), // annual, lunar_cycle, etc.\n  ritualFlow: json(\"ritual_flow\"), // structured ritual instructions\n  yearlyVariables: json(\"yearly_variables\"), // dynamic elements that change per year\n  tags: json(\"tags\").$type<string[]>(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const yearlyConfigurations = pgTable(\"yearly_configurations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  year: text(\"year\").notNull().unique(),\n  zodiacAnimal: text(\"zodiac_animal\"),\n  zodiacElement: text(\"zodiac_element\"),\n  intentionWord: text(\"intention_word\"),\n  lunarNewYear: text(\"lunar_new_year\"),\n  winterSolstice: text(\"winter_solstice\"),\n  springEquinox: text(\"spring_equinox\"), \n  summerSolstice: text(\"summer_solstice\"),\n  fallEquinox: text(\"fall_equinox\"),\n  majorFullMoons: json(\"major_full_moons\"), // dates and associated rituals\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertNewsletterSchema = createInsertSchema(newsletters).pick({\n  email: true,\n});\n\nexport const insertGrimoireSchema = createInsertSchema(grimoires).pick({\n  title: true,\n  type: true,\n  description: true,\n  coverImage: true,\n  isPublic: true,\n});\n\nexport const insertGrimoireEntrySchema = createInsertSchema(grimoireEntries).pick({\n  grimoireId: true,\n  title: true,\n  content: true,\n  entryType: true,\n  tags: true,\n  mood: true,\n  moonPhase: true,\n  astrologicalSign: true,\n});\n\nexport const insertDeitySchema = createInsertSchema(deities).omit({\n  id: true,\n});\n\nexport const insertSacredEventSchema = createInsertSchema(sacredEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertYearlyConfigurationSchema = createInsertSchema(yearlyConfigurations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Newsletter = typeof newsletters.$inferSelect;\nexport type InsertNewsletter = z.infer<typeof insertNewsletterSchema>;\n\nexport type Grimoire = typeof grimoires.$inferSelect;\nexport type InsertGrimoire = z.infer<typeof insertGrimoireSchema>;\n\nexport type GrimoireEntry = typeof grimoireEntries.$inferSelect;\nexport type InsertGrimoireEntry = z.infer<typeof insertGrimoireEntrySchema>;\n\nexport type Deity = typeof deities.$inferSelect;\nexport type InsertDeity = z.infer<typeof insertDeitySchema>;\n\nexport type SacredEvent = typeof sacredEvents.$inferSelect;\nexport type InsertSacredEvent = z.infer<typeof insertSacredEventSchema>;\n\nexport type YearlyConfiguration = typeof yearlyConfigurations.$inferSelect;\nexport type InsertYearlyConfiguration = z.infer<typeof insertYearlyConfigurationSchema>;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertNewsletter = z.infer<typeof insertNewsletterSchema>;\nexport type Newsletter = typeof newsletters.$inferSelect;\nexport type InsertGrimoire = z.infer<typeof insertGrimoireSchema>;\nexport type Grimoire = typeof grimoires.$inferSelect;\nexport type InsertGrimoireEntry = z.infer<typeof insertGrimoireEntrySchema>;\nexport type GrimoireEntry = typeof grimoireEntries.$inferSelect;\nexport type InsertDeity = z.infer<typeof insertDeitySchema>;\nexport type Deity = typeof deities.$inferSelect;\nexport type InsertSacredEvent = z.infer<typeof insertSacredEventSchema>;\nexport type SacredEvent = typeof sacredEvents.$inferSelect;\nexport type InsertYearlyConfiguration = z.infer<typeof insertYearlyConfigurationSchema>;\nexport type YearlyConfiguration = typeof yearlyConfigurations.$inferSelect;\n","size_bytes":6665},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Landing from \"@/pages/landing\";\nimport MainContent from \"@/pages/main-content\";\nimport Grimoires from \"@/pages/grimoires\";\nimport CreateGrimoire from \"@/pages/create-grimoire\";\nimport GrimoireDetail from \"@/pages/grimoire-detail\";\nimport CreateEntry from \"@/pages/create-entry\";\nimport EntryDetail from \"@/pages/entry-detail\";\nimport AstroCalendar from \"@/pages/astro-calendar\";\nimport SacredCalendar from \"@/pages/sacred-calendar\";\nimport FourPillars from \"@/pages/four-pillars\";\nimport Pillar1CulturalRespect from \"@/pages/pillar1-cultural-respect\";\nimport Pillar2CosmicVision from \"@/pages/pillar2-cosmic-vision\";\nimport Pillar3AncestralStewardship from \"@/pages/pillar3-ancestral-stewardship\";\nimport Pillar4MagicScience from \"@/pages/pillar4-magic-science\";\nimport Aionara from \"@/pages/aionara\";\nimport Alchemy from \"@/pages/alchemy\";\nimport DeityCodex from \"@/pages/deity-codex\";\nimport AthenaeumSimple from \"@/pages/athenaeum-simple\";\nimport AthenaeumLogin from \"@/pages/athenaeum-login\";\nimport AthenaeumAdmin from \"@/pages/athenaeum-admin\";\nimport AthenaeumStudentLogin from \"@/pages/athenaeum-student-login\";\n// Athenaeum course imports temporarily removed for simplicity\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/remember\" component={MainContent} />\n      <Route path=\"/grimoires\" component={Grimoires} />\n      <Route path=\"/grimoires/create\" component={CreateGrimoire} />\n      <Route path=\"/grimoires/:id\" component={GrimoireDetail} />\n      <Route path=\"/grimoires/:grimoireId/create-entry\" component={CreateEntry} />\n      <Route path=\"/grimoires/:id/entries/:entryId\" component={EntryDetail} />\n      <Route path=\"/astro-calendar\" component={AstroCalendar} />\n      <Route path=\"/sacred-calendar\" component={SacredCalendar} />\n      <Route path=\"/four-pillars\" component={FourPillars} />\n      <Route path=\"/pillar1-cultural-respect\" component={Pillar1CulturalRespect} />\n      <Route path=\"/pillar2-cosmic-vision\" component={Pillar2CosmicVision} />\n      <Route path=\"/pillar3-ancestral-stewardship\" component={Pillar3AncestralStewardship} />\n      <Route path=\"/pillar4-magic-science\" component={Pillar4MagicScience} />\n      <Route path=\"/aionara\" component={Aionara} />\n      <Route path=\"/alchemy\" component={Alchemy} />\n      <Route path=\"/deity-codex\" component={DeityCodex} />\n      <Route path=\"/athenaeum/login\" component={AthenaeumLogin} />\n      <Route path=\"/athenaeum/login-portal\" component={AthenaeumStudentLogin} />\n      <Route path=\"/admin\" component={AthenaeumAdmin} />\n      <Route path=\"/athenaeum\" component={AthenaeumSimple} />\n      {/* Athenaeum course routes temporarily removed for simplicity */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3297},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Inter:wght@300;400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(223, 84%, 4%);\n  --foreground: hsl(201, 24%, 95%);\n  --card: hsl(249, 39%, 8%);\n  --card-foreground: hsl(201, 24%, 95%);\n  --popover: hsl(249, 39%, 8%);\n  --popover-foreground: hsl(201, 24%, 95%);\n  --primary: hsl(43, 74%, 49%);\n  --primary-foreground: hsl(223, 84%, 4%);\n  --secondary: hsl(223, 84%, 4%);\n  --secondary-foreground: hsl(201, 24%, 95%);\n  --muted: hsl(259, 46%, 12%);\n  --muted-foreground: hsl(201, 24%, 85%);\n  --accent: hsl(259, 46%, 12%);\n  --accent-foreground: hsl(201, 24%, 95%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(201, 24%, 95%);\n  --border: hsl(43, 74%, 49%);\n  --input: hsl(259, 46%, 12%);\n  --ring: hsl(43, 74%, 49%);\n  --chart-1: hsl(43, 74%, 49%);\n  --chart-2: hsl(201, 96%, 32%);\n  --chart-3: hsl(273, 83%, 54%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(249, 39%, 8%);\n  --sidebar-foreground: hsl(201, 24%, 95%);\n  --sidebar-primary: hsl(43, 74%, 49%);\n  --sidebar-primary-foreground: hsl(223, 84%, 4%);\n  --sidebar-accent: hsl(259, 46%, 12%);\n  --sidebar-accent-foreground: hsl(201, 24%, 95%);\n  --sidebar-border: hsl(259, 46%, 12%);\n  --sidebar-ring: hsl(43, 74%, 49%);\n  --font-gothic: 'Crimson Text', serif;\n  --font-body: 'Inter', sans-serif;\n  --cosmic-dark: hsl(223, 84%, 2%);\n  --cosmic-blue: hsl(217, 32%, 8%);\n  --shadow-purple: hsl(259, 46%, 15%);\n  --deep-purple: hsl(259, 46%, 22%);\n  --celestial-black: hsl(249, 39%, 6%);\n  --silver-star: hsl(214, 32%, 81%);\n  --golden-rune: hsl(43, 74%, 49%);\n  --ethereal-white: hsl(210, 40%, 98%);\n  --void-black: hsl(240, 100%, 2%);\n  --midnight-purple: hsl(264, 89%, 6%);\n  \n  /* Additional Athenaeum colors */\n  --cosmic-50: hsl(210, 40%, 98%);\n  --cosmic-100: hsl(210, 40%, 96%);\n  --cosmic-200: hsl(214, 32%, 91%);\n  --cosmic-300: hsl(213, 27%, 84%);\n  --cosmic-400: hsl(215, 20%, 65%);\n  --cosmic-500: hsl(215, 16%, 47%);\n  --cosmic-600: hsl(215, 19%, 35%);\n  --cosmic-700: hsl(215, 25%, 27%);\n  --cosmic-800: hsl(217, 33%, 17%);\n  --cosmic-900: hsl(222, 84%, 5%);\n  --cosmic-950: hsl(229, 84%, 5%);\n  \n  --mystical-50: hsl(270, 100%, 98%);\n  --mystical-100: hsl(269, 100%, 95%);\n  --mystical-200: hsl(269, 100%, 92%);\n  --mystical-300: hsl(268, 100%, 86%);\n  --mystical-400: hsl(268, 100%, 76%);\n  --mystical-500: hsl(262, 83%, 58%);\n  --mystical-600: hsl(258, 90%, 66%);\n  --mystical-700: hsl(253, 91%, 60%);\n  --mystical-800: hsl(253, 91%, 50%);\n  --mystical-900: hsl(253, 91%, 42%);\n  \n  --ethereal-50: hsl(166, 76%, 97%);\n  --ethereal-100: hsl(167, 85%, 89%);\n  --ethereal-200: hsl(168, 84%, 78%);\n  --ethereal-300: hsl(171, 77%, 64%);\n  --ethereal-400: hsl(172, 66%, 50%);\n  --ethereal-500: hsl(173, 80%, 40%);\n  --ethereal-600: hsl(175, 84%, 32%);\n  --ethereal-700: hsl(175, 77%, 26%);\n  --ethereal-800: hsl(176, 69%, 22%);\n  --ethereal-900: hsl(176, 61%, 19%);\n  \n  --golden-400: hsl(43, 96%, 56%);\n  --golden-500: hsl(38, 92%, 50%);\n  --golden-600: hsl(32, 95%, 44%);\n  --radius: 1rem;\n}\n\n.dark {\n  --background: hsl(210, 71%, 8%);\n  --foreground: hsl(201, 24%, 95%);\n  --card: hsl(220, 27%, 12%);\n  --card-foreground: hsl(201, 24%, 95%);\n  --popover: hsl(220, 27%, 12%);\n  --popover-foreground: hsl(201, 24%, 95%);\n  --primary: hsl(43, 74%, 49%);\n  --primary-foreground: hsl(210, 71%, 8%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(201, 24%, 95%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(201, 24%, 85%);\n  --accent: hsl(217, 33%, 17%);\n  --accent-foreground: hsl(201, 24%, 95%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(201, 24%, 95%);\n  --border: hsl(43, 74%, 49%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(43, 74%, 49%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-body antialiased bg-background text-foreground;\n    font-family: var(--font-body);\n  }\n}\n\n@layer utilities {\n  .font-gothic {\n    font-family: var(--font-gothic);\n  }\n  \n  .font-body {\n    font-family: var(--font-body);\n  }\n\n  .cosmic-background {\n    background: linear-gradient(135deg, var(--void-black) 0%, var(--cosmic-dark) 20%, var(--midnight-purple) 40%, var(--shadow-purple) 70%, var(--celestial-black) 100%);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .cosmic-background::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: radial-gradient(circle at 20% 30%, hsl(43, 74%, 49%, 0.08) 0%, transparent 50%),\n                radial-gradient(circle at 80% 70%, hsl(259, 46%, 15%, 0.3) 0%, transparent 50%),\n                radial-gradient(circle at 50% 50%, hsl(214, 32%, 81%, 0.03) 0%, transparent 70%),\n                radial-gradient(circle at 10% 80%, hsl(264, 89%, 6%, 0.4) 0%, transparent 40%);\n    pointer-events: none;\n  }\n\n  .mystical-border {\n    border: 2px solid;\n    border-image: linear-gradient(45deg, var(--golden-rune), var(--silver-star), var(--golden-rune)) 1;\n    position: relative;\n  }\n\n  .mystical-border::before {\n    content: '';\n    position: absolute;\n    inset: -2px;\n    padding: 2px;\n    background: linear-gradient(45deg, var(--golden-rune), transparent, var(--silver-star), transparent, var(--golden-rune));\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: subtract;\n    opacity: 0.6;\n  }\n\n  .grimoire-texture {\n    background: \n        radial-gradient(circle at 10% 20%, hsl(43, 74%, 49%, 0.1) 0%, transparent 20%),\n        radial-gradient(circle at 90% 80%, hsl(214, 32%, 81%, 0.1) 0%, transparent 20%),\n        linear-gradient(135deg, hsl(223, 84%, 10%, 0.9) 0%, hsl(259, 46%, 22%, 0.8) 100%);\n  }\n\n  .overlay-dark {\n    background: linear-gradient(135deg, \n        hsl(223, 84%, 2%, 0.6) 0%, \n        hsl(264, 89%, 6%, 0.7) 30%,\n        hsl(259, 46%, 15%, 0.65) 60%,\n        hsl(249, 39%, 6%, 0.75) 100%);\n  }\n\n  .starfield {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-image: \n      radial-gradient(2px 2px at 20px 30px, hsl(43, 74%, 49%, 0.6), transparent),\n      radial-gradient(2px 2px at 40px 70px, hsl(214, 32%, 81%, 0.4), transparent),\n      radial-gradient(1px 1px at 90px 40px, hsl(43, 74%, 49%, 0.3), transparent),\n      radial-gradient(1px 1px at 130px 80px, hsl(214, 32%, 81%, 0.2), transparent),\n      radial-gradient(2px 2px at 160px 30px, hsl(43, 74%, 49%, 0.5), transparent);\n    background-repeat: repeat;\n    background-size: 200px 100px;\n    animation: float 20s ease-in-out 9999;\n  }\n\n  /* Additional Athenaeum utilities */\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n  \n  .crystal-border {\n    background: linear-gradient(45deg, transparent 30%, rgba(45, 212, 191, 0.2) 50%, transparent 70%);\n    border: 1px solid rgba(45, 212, 191, 0.3);\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n  \n  @keyframes pulse-glow {\n    0% { box-shadow: 0 0 5px rgba(45, 212, 191, 0.5); }\n    100% { box-shadow: 0 0 20px rgba(45, 212, 191, 0.8); }\n  }\n}\n","size_bytes":7342},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/breathing-taglines.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface BreathingTaglinesProps {\n  onComplete: () => void;\n}\n\nconst taglines = [\n  \"Where Wisdom Becomes Magic.\",\n  \"Remember what your soul already knows.\",\n  \"Reclaim the power within your blood.\"\n];\n\nexport default function BreathingTaglines({ onComplete }: BreathingTaglinesProps) {\n  const [showTaglines, setShowTaglines] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowTaglines(true);\n      // Show CTA after taglines are visible\n      setTimeout(() => {\n        onComplete();\n      }, 3000);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, [onComplete]);\n\n  if (!showTaglines) return null;\n\n  return (\n    <div className=\"space-y-8 min-h-[200px] flex flex-col justify-center\" data-testid=\"breathing-taglines\">\n      {taglines.map((tagline, index) => (\n        <motion.div\n          key={index}\n          className=\"font-gothic text-2xl md:text-4xl font-medium text-center\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ \n            duration: 1, \n            ease: \"easeOut\",\n            delay: index * 0.5\n          }}\n          data-testid={`tagline-${index}`}\n        >\n          \"{tagline}\"\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1369},"client/src/components/mystical-symbol.tsx":{"content":"import logoImage from \"@assets/ChatGPT Image Aug 18, 2025, 12_50_00 AM_1755500285103.webp\";\n\nexport default function MysticalSymbol() {\n  return (\n    <div className=\"w-48 h-48 mx-auto relative\" data-testid=\"mystical-symbol\">\n      <img \n        src={logoImage} \n        alt=\"Jakintza Ruha Logo\" \n        className=\"w-full h-full object-contain drop-shadow-[0_0_30px_rgba(184,134,11,0.5)]\"\n      />\n    </div>\n  );\n}\n","size_bytes":417},"client/src/components/newsletter-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function NewsletterForm() {\n  const [email, setEmail] = useState(\"\");\n  const { toast } = useToast();\n\n  const subscribeMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest(\"POST\", \"/api/newsletter/subscribe\", { email });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sacred! ✨\",\n        description: \"You've joined the remembering. Check your email for cosmic wisdom.\",\n        duration: 5000,\n      });\n      setEmail(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Mystical Interference\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your sacred email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    subscribeMutation.mutate(email);\n  };\n\n  return (\n    <motion.form \n      onSubmit={handleSubmit}\n      className=\"mystical-border p-8 rounded-lg grimoire-texture space-y-6 relative z-20\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.8 }}\n      data-testid=\"newsletter-form\"\n      style={{ pointerEvents: 'auto' }}\n    >\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <Input\n          type=\"email\"\n          placeholder=\"Your sacred email address\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"flex-1 bg-cosmic-blue/30 border border-golden-rune/50 rounded-lg px-6 py-4 text-ethereal-white placeholder:text-silver-star/70 focus:border-golden-rune focus:outline-none transition-colors focus:ring-2 focus:ring-golden-rune/20 relative z-30\"\n          style={{ pointerEvents: 'auto' }}\n          required\n          data-testid=\"input-email\"\n        />\n        <Button\n          type=\"submit\"\n          disabled={subscribeMutation.isPending}\n          className=\"bg-gradient-to-r from-shadow-purple to-deep-purple hover:from-deep-purple hover:to-shadow-purple px-8 py-4 rounded-lg font-gothic font-medium transition-all duration-500 hover:scale-105 hover:shadow-2xl disabled:opacity-50 disabled:cursor-not-allowed relative z-30\"\n          style={{ pointerEvents: 'auto' }}\n          data-testid=\"button-subscribe\"\n        >\n          {subscribeMutation.isPending ? \"Sending...\" : \"Begin Remembering\"}\n        </Button>\n      </div>\n      <p className=\"text-sm text-silver-star/70\" data-testid=\"email-info\">\n        Your energy will be sent to <span className=\"text-golden-rune\">info@jakintzaruha.com</span>\n      </p>\n    </motion.form>\n  );\n}\n","size_bytes":3148},"client/src/components/pillar-icons.tsx":{"content":"interface PillarIconProps {\n  className?: string;\n}\n\nexport function CulturalRespectIcon({ className = \"w-16 h-16\" }: PillarIconProps) {\n  return (\n    <svg className={className} viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      {/* Earth/Grounding Symbol */}\n      <circle cx=\"32\" cy=\"32\" r=\"28\" stroke=\"currentColor\" strokeWidth=\"2\" fill=\"none\" opacity=\"0.8\"/>\n      <circle cx=\"32\" cy=\"32\" r=\"20\" stroke=\"currentColor\" strokeWidth=\"1.5\" fill=\"none\" opacity=\"0.6\"/>\n      <circle cx=\"32\" cy=\"32\" r=\"12\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\" opacity=\"0.4\"/>\n      \n      {/* Sacred geometry - hexagon */}\n      <path d=\"M32 20 L42 26 L42 38 L32 44 L22 38 L22 26 Z\" stroke=\"currentColor\" strokeWidth=\"1.5\" fill=\"none\"/>\n      \n      {/* Center dot */}\n      <circle cx=\"32\" cy=\"32\" r=\"2\" fill=\"currentColor\"/>\n      \n      {/* Connection lines */}\n      <line x1=\"32\" y1=\"8\" x2=\"32\" y2=\"20\" stroke=\"currentColor\" strokeWidth=\"1\" opacity=\"0.7\"/>\n      <line x1=\"32\" y1=\"44\" x2=\"32\" y2=\"56\" stroke=\"currentColor\" strokeWidth=\"1\" opacity=\"0.7\"/>\n      <line x1=\"8\" y1=\"32\" x2=\"20\" y2=\"32\" stroke=\"currentColor\" strokeWidth=\"1\" opacity=\"0.7\"/>\n      <line x1=\"44\" y1=\"32\" x2=\"56\" y2=\"32\" stroke=\"currentColor\" strokeWidth=\"1\" opacity=\"0.7\"/>\n    </svg>\n  );\n}\n\nexport function CosmicVisionIcon({ className = \"w-16 h-16\" }: PillarIconProps) {\n  return (\n    <svg className={className} viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      {/* Cosmic spiral */}\n      <path d=\"M32 8 Q48 16 48 32 Q48 48 32 48 Q16 48 16 32 Q16 20 24 16 Q36 12 36 24 Q36 36 28 36 Q24 36 24 32 Q24 30 26 30\" \n            stroke=\"currentColor\" strokeWidth=\"2\" fill=\"none\"/>\n      \n      {/* Stars around */}\n      <path d=\"M16 12 L18 16 L22 16 L19 19 L20 23 L16 21 L12 23 L13 19 L10 16 L14 16 Z\" fill=\"currentColor\" opacity=\"0.8\"/>\n      <path d=\"M48 8 L49 11 L52 11 L50 13 L51 16 L48 14 L45 16 L46 13 L44 11 L47 11 Z\" fill=\"currentColor\" opacity=\"0.6\"/>\n      <path d=\"M52 44 L53 47 L56 47 L54 49 L55 52 L52 50 L49 52 L50 49 L48 47 L51 47 Z\" fill=\"currentColor\" opacity=\"0.7\"/>\n      <path d=\"M12 48 L13 51 L16 51 L14 53 L15 56 L12 54 L9 56 L10 53 L8 51 L11 51 Z\" fill=\"currentColor\" opacity=\"0.5\"/>\n      \n      {/* Center cosmic eye */}\n      <circle cx=\"32\" cy=\"32\" r=\"3\" fill=\"currentColor\"/>\n      <circle cx=\"32\" cy=\"32\" r=\"1.5\" fill=\"none\" stroke=\"rgba(0,0,0,0.3)\" strokeWidth=\"0.5\"/>\n    </svg>\n  );\n}\n\nexport function AncestralStewardshipIcon({ className = \"w-16 h-16\" }: PillarIconProps) {\n  return (\n    <svg className={className} viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      {/* Flame shape */}\n      <path d=\"M32 56 Q20 50 20 38 Q20 32 24 28 Q28 24 32 28 Q30 20 34 16 Q38 12 42 16 Q44 20 42 24 Q44 28 44 38 Q44 50 32 56\" \n            fill=\"currentColor\" opacity=\"0.8\"/>\n      \n      {/* Inner flame */}\n      <path d=\"M32 48 Q24 44 24 36 Q24 32 28 30 Q32 28 32 32 Q30 26 34 24 Q38 22 40 26 Q40 30 38 32 Q40 34 40 36 Q40 44 32 48\" \n            fill=\"none\" stroke=\"rgba(0,0,0,0.3)\" strokeWidth=\"1.5\"/>\n      \n      {/* Sacred flame core */}\n      <path d=\"M32 40 Q28 38 28 34 Q28 32 30 32 Q32 30 32 32 Q34 34 34 34 Q34 38 32 40\" \n            fill=\"rgba(0,0,0,0.2)\"/>\n      \n      {/* Time spiral around flame */}\n      <path d=\"M12 32 Q16 28 20 32 Q16 36 12 32\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\" opacity=\"0.6\"/>\n      <path d=\"M52 32 Q48 28 44 32 Q48 36 52 32\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\" opacity=\"0.6\"/>\n      \n      {/* Ancestral symbols */}\n      <circle cx=\"16\" cy=\"20\" r=\"2\" fill=\"currentColor\" opacity=\"0.5\"/>\n      <circle cx=\"48\" cy=\"20\" r=\"2\" fill=\"currentColor\" opacity=\"0.5\"/>\n      <circle cx=\"16\" cy=\"44\" r=\"2\" fill=\"currentColor\" opacity=\"0.5\"/>\n      <circle cx=\"48\" cy=\"44\" r=\"2\" fill=\"currentColor\" opacity=\"0.5\"/>\n    </svg>\n  );\n}\n\nexport function MagicScienceIcon({ className = \"w-16 h-16\" }: PillarIconProps) {\n  return (\n    <svg className={className} viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      {/* DNA/Sacred geometry helix */}\n      <path d=\"M16 8 Q24 16 32 8 Q40 16 48 8 M16 24 Q24 32 32 24 Q40 32 48 24 M16 40 Q24 48 32 40 Q40 48 48 40 M16 56 Q24 48 32 56 Q40 48 48 56\" \n            stroke=\"currentColor\" strokeWidth=\"2\" fill=\"none\"/>\n      \n      {/* Connection nodes */}\n      <circle cx=\"16\" cy=\"8\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"32\" cy=\"8\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"48\" cy=\"8\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"16\" cy=\"24\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"32\" cy=\"24\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"48\" cy=\"24\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"16\" cy=\"40\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"32\" cy=\"40\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"48\" cy=\"40\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"16\" cy=\"56\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"32\" cy=\"56\" r=\"2\" fill=\"currentColor\"/>\n      <circle cx=\"48\" cy=\"56\" r=\"2\" fill=\"currentColor\"/>\n      \n      {/* Central fusion symbol */}\n      <circle cx=\"32\" cy=\"32\" r=\"8\" stroke=\"currentColor\" strokeWidth=\"1.5\" fill=\"none\"/>\n      <circle cx=\"32\" cy=\"32\" r=\"4\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n      <line x1=\"28\" y1=\"28\" x2=\"36\" y2=\"36\" stroke=\"currentColor\" strokeWidth=\"1\"/>\n      <line x1=\"36\" y1=\"28\" x2=\"28\" y2=\"36\" stroke=\"currentColor\" strokeWidth=\"1\"/>\n      \n      {/* Energy particles */}\n      <circle cx=\"8\" cy=\"16\" r=\"1\" fill=\"currentColor\" opacity=\"0.7\"/>\n      <circle cx=\"56\" cy=\"16\" r=\"1\" fill=\"currentColor\" opacity=\"0.7\"/>\n      <circle cx=\"8\" cy=\"48\" r=\"1\" fill=\"currentColor\" opacity=\"0.7\"/>\n      <circle cx=\"56\" cy=\"48\" r=\"1\" fill=\"currentColor\" opacity=\"0.7\"/>\n    </svg>\n  );\n}","size_bytes":5761},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/aionara.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Send, Sparkles, Moon, Star, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\nimport aionaraImage from \"@assets/ChatGPT Image Aug 18, 2025, 01_24_39 PM_1755545121075.webp\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'aionara';\n  content: string;\n  timestamp: Date;\n}\n\nexport default function Aionara() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'aionara',\n      content: \"Greetings, seeker. I am Aionara, your celestial guide through the mysteries of existence. The stars have aligned to bring you to this sacred space. What wisdom do you seek from the cosmic tapestry?\",\n      timestamp: new Date()\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  // Simple response system without OpenAI\n  const getLocalResponse = (userInput: string): string => {\n    const input = userInput.toLowerCase();\n    \n    if (input.includes('hello') || input.includes('hi') || input.includes('greetings')) {\n      return \"Blessed greetings, dear seeker. The celestial energies welcome you to this sacred space. How may I guide you on your spiritual journey today?\";\n    }\n    \n    if (input.includes('love') || input.includes('heart') || input.includes('relationship')) {\n      return \"Ah, the matters of the heart... Love is the most powerful force in the universe, dear one. It is both the path and the destination. Trust in your heart's wisdom, for it knows the way to authentic connection and soul-deep healing.\";\n    }\n    \n    if (input.includes('magic') || input.includes('spell') || input.includes('ritual')) {\n      return \"Magic flows through all things, sacred seeker. The most powerful magic begins within - with intention, gratitude, and alignment with your highest self. Remember: you are the magic you seek.\";\n    }\n    \n    if (input.includes('purpose') || input.includes('path') || input.includes('calling')) {\n      return \"Your soul's purpose is written in the stars, yet it unfolds through your choices here on Earth. Listen deeply to what sets your spirit ablaze - therein lies your sacred calling. Trust the journey, even when the path seems unclear.\";\n    }\n    \n    if (input.includes('fear') || input.includes('worried') || input.includes('anxious')) {\n      return \"Fear is but a guardian at the threshold of growth, dear one. Breathe deeply and remember: you are infinitely more powerful than any fear that visits you. Step forward with courage - the universe supports your expansion.\";\n    }\n    \n    if (input.includes('dreams') || input.includes('vision') || input.includes('future')) {\n      return \"Dreams are whispers from your soul's deepest knowing. Pay attention to both sleeping visions and waking dreams - they carry important messages about your path forward. Your future is being woven with each conscious choice you make.\";\n    }\n    \n    // Default responses\n    const defaults = [\n      \"The cosmic winds carry your question to me, dear seeker. Know that within you lies all the wisdom you seek. Sometimes we must ask the right questions to unlock the answers already dwelling in our hearts.\",\n      \"I sense the sacred fire within you seeking expression. Trust in your inner knowing, for the answers you seek are already blooming in the garden of your soul.\",\n      \"The stars whisper that this is a time of profound transformation for you. Embrace the changes with an open heart, for they are aligning you with your highest purpose.\",\n      \"Your question resonates through the astral realms, dear one. Remember that every challenge is an invitation to discover your own divine strength. You are exactly where you need to be.\"\n    ];\n    \n    return defaults[Math.floor(Math.random() * defaults.length)];\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: input.trim(),\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    const currentInput = input.trim();\n    setInput(\"\");\n    setIsLoading(true);\n\n    // Simulate thinking time\n    setTimeout(() => {\n      const aionaraMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'aionara',\n        content: getLocalResponse(currentInput),\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, aionaraMessage]);\n      setIsLoading(false);\n    }, 1000 + Math.random() * 1500); // Random delay between 1-2.5 seconds\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <section \n      className=\"min-h-screen relative overflow-hidden\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"aionara-section\"\n    >\n      {/* Dark mystical overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/80 via-black/70 to-black/90\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"absolute top-0 left-0 right-0 z-50 p-6\">\n        <Link \n          href=\"/\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n          data-testid=\"link-back-home\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          Return to Sacred Remembering\n        </Link>\n      </nav>\n      \n      {/* Floating cosmic particles */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {[...Array(30)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-1 h-1 bg-golden-rune rounded-full\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -20, 0],\n              opacity: [0.3, 1, 0.3],\n              scale: [1, 1.2, 1],\n            }}\n            transition={{\n              duration: 3 + Math.random() * 2,\n              repeat: Infinity,\n              delay: Math.random() * 2,\n            }}\n          />\n        ))}\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-6 py-8 h-screen flex flex-col\">\n        {/* Header */}\n        <motion.div\n          className=\"text-center mb-8\"\n          initial={{ opacity: 0, y: -30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n        >\n          <h1 className=\"font-gothic text-4xl md:text-5xl text-golden-rune mb-4 flex items-center justify-center gap-3\">\n            <Sparkles className=\"w-8 h-8\" />\n            Aionara\n            <Sparkles className=\"w-8 h-8\" />\n          </h1>\n          <p className=\"text-xl text-silver-star/80\">\n            Your Celestial Spirit Guide\n          </p>\n        </motion.div>\n\n        {/* Chat Container */}\n        <div className=\"flex-1 grid grid-cols-1 lg:grid-cols-3 gap-8 max-h-[calc(100vh-200px)]\">\n          \n          {/* Aionara's Avatar */}\n          <motion.div\n            className=\"hidden lg:flex flex-col items-center justify-center\"\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 1, delay: 0.3 }}\n          >\n            <div className=\"relative\">\n              <motion.div\n                className=\"absolute inset-0 rounded-full bg-gradient-to-r from-violet-500/20 to-golden-rune/20 blur-xl\"\n                animate={{\n                  scale: [1, 1.1, 1],\n                  opacity: [0.5, 0.8, 0.5],\n                }}\n                transition={{\n                  duration: 4,\n                  repeat: Infinity,\n                  ease: \"easeInOut\",\n                }}\n              />\n              <img\n                src={aionaraImage}\n                alt=\"Aionara - Celestial Spirit Guide\"\n                className=\"relative w-64 h-64 object-cover rounded-full border-2 border-golden-rune/30 shadow-2xl\"\n                data-testid=\"aionara-avatar\"\n              />\n              <motion.div\n                className=\"absolute -top-2 -right-2 w-6 h-6\"\n                animate={{ rotate: 360 }}\n                transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Star className=\"w-6 h-6 text-golden-rune\" />\n              </motion.div>\n              <motion.div\n                className=\"absolute -bottom-2 -left-2 w-5 h-5\"\n                animate={{ \n                  y: [0, -10, 0],\n                  opacity: [0.7, 1, 0.7] \n                }}\n                transition={{ duration: 3, repeat: Infinity }}\n              >\n                <Moon className=\"w-5 h-5 text-silver-star\" />\n              </motion.div>\n            </div>\n            <p className=\"text-center text-silver-star/70 mt-4 max-w-sm\">\n              \"Through the veil of stars, I see your path. Let the ancient wisdom guide your journey.\"\n            </p>\n          </motion.div>\n\n          {/* Chat Messages */}\n          <div className=\"lg:col-span-2 flex flex-col\">\n            <div className=\"flex-1 bg-black/30 backdrop-blur-sm border border-silver-star/20 rounded-xl p-6 mb-4\">\n              <ScrollArea className=\"h-[400px] lg:h-[500px] pr-4\">\n                <div className=\"space-y-6\">\n                  {messages.map((message) => (\n                    <motion.div\n                      key={message.id}\n                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <div\n                        className={`\n                          max-w-[80%] p-4 rounded-lg \n                          ${message.role === 'user' \n                            ? 'bg-gradient-to-r from-deep-purple to-shadow-purple text-ethereal-white ml-4' \n                            : 'bg-gradient-to-r from-golden-rune/10 to-golden-rune/5 border border-golden-rune/20 text-silver-star mr-4'\n                          }\n                        `}\n                        data-testid={`message-${message.role}-${message.id}`}\n                      >\n                        {message.role === 'aionara' && (\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Sparkles className=\"w-4 h-4 text-golden-rune\" />\n                            <span className=\"font-gothic text-sm text-golden-rune\">Aionara</span>\n                          </div>\n                        )}\n                        <p className=\"leading-relaxed whitespace-pre-wrap\">{message.content}</p>\n                        <div className=\"text-xs opacity-60 mt-2\">\n                          {message.timestamp.toLocaleTimeString()}\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                  \n                  {isLoading && (\n                    <motion.div\n                      className=\"flex justify-start\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                    >\n                      <div className=\"bg-gradient-to-r from-golden-rune/10 to-golden-rune/5 border border-golden-rune/20 p-4 rounded-lg mr-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <Sparkles className=\"w-4 h-4 text-golden-rune\" />\n                          <span className=\"font-gothic text-sm text-golden-rune\">Aionara</span>\n                        </div>\n                        <div className=\"flex items-center gap-1 mt-2\">\n                          <motion.div\n                            className=\"w-2 h-2 bg-golden-rune rounded-full\"\n                            animate={{ scale: [1, 1.2, 1] }}\n                            transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}\n                          />\n                          <motion.div\n                            className=\"w-2 h-2 bg-golden-rune rounded-full\"\n                            animate={{ scale: [1, 1.2, 1] }}\n                            transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}\n                          />\n                          <motion.div\n                            className=\"w-2 h-2 bg-golden-rune rounded-full\"\n                            animate={{ scale: [1, 1.2, 1] }}\n                            transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}\n                          />\n                          <span className=\"text-silver-star text-sm ml-2\">Consulting the stars...</span>\n                        </div>\n                      </div>\n                    </motion.div>\n                  )}\n                </div>\n                <div ref={messagesEndRef} />\n              </ScrollArea>\n            </div>\n\n            {/* Input Area */}\n            <div className=\"flex gap-3\">\n              <Input\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Share your thoughts with Aionara...\"\n                className=\"flex-1 bg-black/40 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/50 focus:border-golden-rune\"\n                disabled={isLoading}\n                data-testid=\"input-message\"\n              />\n              <Button\n                onClick={sendMessage}\n                disabled={!input.trim() || isLoading}\n                className=\"mystical-border bg-gradient-to-r from-shadow-purple to-deep-purple hover:from-deep-purple hover:to-shadow-purple px-6\"\n                data-testid=\"button-send\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":14743},"client/src/pages/alchemy.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Flame, Mountain, Waves, Wind, Sparkles, Heart, Users, Crown, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\n\nexport default function Alchemy() {\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  const elements = [\n    {\n      name: \"Earth\",\n      icon: Mountain,\n      description: \"grounding, memory, and the bones of our ancestors\",\n      color: \"emerald\"\n    },\n    {\n      name: \"Water\", \n      icon: Waves,\n      description: \"cleansing, dreaming, and the deep tides of the subconscious\",\n      color: \"blue\"\n    },\n    {\n      name: \"Air\",\n      icon: Wind,\n      description: \"vision, language, and the breath of creation\",\n      color: \"cyan\"\n    },\n    {\n      name: \"Fire\",\n      icon: Flame,\n      description: \"transformation, willpower, and the spark of revolt\",\n      color: \"red\"\n    },\n    {\n      name: \"Aether\",\n      icon: Sparkles,\n      description: \"spirit, ascension, and the unseen thread that unites all\",\n      color: \"violet\"\n    }\n  ];\n\n  const strands = [\n    {\n      title: \"Inner Transmutation\",\n      icon: Heart,\n      description: \"The first crucible is the self. Alchemy begins within, where we confront our shadows, name our wounds, and learn to transform them into medicine.\",\n      practices: [\n        \"Shadow Work & Healing – turning pain into strength\",\n        \"Integration – uniting body, mind, spirit, and ancestry\", \n        \"Awakening – remembering the golden soul beneath the rust of trauma and assimilation\"\n      ]\n    },\n    {\n      title: \"Elemental Alchemy\",\n      icon: Flame,\n      description: \"The second crucible is the world around us. We return to the ancient pact with Earth, Water, Air, Fire, and Aether, not as symbols only, but as living allies.\",\n      practices: [\n        \"Re-entering the covenant of balance with nature\",\n        \"Working with elemental forces as mirrors and teachers\",\n        \"Remembering that to live is to exchange breath with the cosmos\"\n      ]\n    },\n    {\n      title: \"Ancestral Gold\",\n      icon: Crown,\n      description: \"The third crucible is our bloodline. Colonization, forced assimilation, and cultural erasure scattered our stories—but they did not destroy them.\",\n      practices: [\n        \"Remembering Lineage – honoring ancestors both named and unnamed\",\n        \"Recovering Forbidden Knowledge – from plant medicine to ritual cycles\",\n        \"Carrying Forward – transforming survival into legacy, resistance into inheritance\"\n      ]\n    },\n    {\n      title: \"The Collective Elixir\",\n      icon: Users,\n      description: \"The final crucible is the movement itself. The Elixir of Life is not an individual's immortality, but the living memory of a people who refuse to be erased.\",\n      practices: [\n        \"Reclaim what was demonized – spellwork, ritual, magic, and mysticism\",\n        \"Condemn cultural appropriation and forced erasure\",\n        \"Weave the Cosmic and the Earthly – integrating science, spirituality, and culture\"\n      ]\n    }\n  ];\n\n  return (\n    <section \n      className=\"min-h-screen relative overflow-hidden\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"alchemy-section\"\n    >\n      {/* Dark mystical overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/80 via-black/70 to-black/90\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"absolute top-0 left-0 right-0 z-50 p-6\">\n        <Link \n          href=\"/\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n          data-testid=\"link-back-home\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          Return to Sacred Remembering\n        </Link>\n      </nav>\n      \n      {/* Floating alchemical symbols */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {[...Array(20)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-1 h-1 bg-golden-rune rounded-full\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.8, 0.2],\n              scale: [1, 1.5, 1],\n            }}\n            transition={{\n              duration: 4 + Math.random() * 2,\n              repeat: Infinity,\n              delay: Math.random() * 3,\n            }}\n          />\n        ))}\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-6 py-20\">\n        {/* Header */}\n        <motion.div\n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: -30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n        >\n          <h1 className=\"font-gothic text-5xl md:text-6xl text-golden-rune mb-6\">\n            The Alchemy of Jakintza Ruha\n          </h1>\n          <h2 className=\"font-gothic text-2xl md:text-3xl text-silver-star mb-8\">\n            Beyond Lead and Gold\n          </h2>\n          <div className=\"max-w-4xl mx-auto space-y-6 text-lg text-ethereal-white/90 leading-relaxed\">\n            <p>\n              Alchemy is often remembered as the ancient pursuit of turning base metals into treasure. \n              But in Jakintza Ruha, alchemy is the sacred science of transformation at every level of existence. \n              It is the practice of remembering who we are, reclaiming what was stolen, and refining the raw matter of our lives into radiant spirit.\n            </p>\n            <p className=\"text-golden-rune font-semibold\">\n              True alchemy does not happen in a furnace of iron, but in the forge of the soul. \n              Every heartbreak, every exile, every shadow becomes the prima materia—the base substance that we transmute into wisdom and power.\n            </p>\n          </div>\n        </motion.div>\n\n        {/* The Four Strands */}\n        <motion.div\n          className=\"mb-20\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1, delay: 0.3 }}\n        >\n          <h3 className=\"font-gothic text-4xl text-golden-rune text-center mb-12\">\n            The Four Strands of Alchemy\n          </h3>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-7xl mx-auto\">\n            {strands.map((strand, index) => (\n              <motion.div\n                key={strand.title}\n                className=\"mystical-border p-8 rounded-lg grimoire-texture\"\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.1 * index }}\n                whileHover={{ scale: 1.02 }}\n                data-testid={`strand-${strand.title.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <div className=\"flex items-center mb-6\">\n                  <strand.icon className=\"w-8 h-8 text-golden-rune mr-4\" />\n                  <h4 className=\"font-gothic text-2xl text-silver-star\">{strand.title}</h4>\n                </div>\n                \n                <p className=\"text-ethereal-white/90 mb-6 leading-relaxed\">\n                  {strand.description}\n                </p>\n                \n                <div className=\"space-y-3\">\n                  {strand.practices.map((practice, i) => (\n                    <div key={i} className=\"flex items-start\">\n                      <div className=\"w-2 h-2 bg-golden-rune rounded-full mt-2 mr-3 flex-shrink-0\" />\n                      <p className=\"text-ethereal-white/80 text-sm leading-relaxed\">{practice}</p>\n                    </div>\n                  ))}\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Elemental Alchemy Expanded */}\n        <motion.div\n          className=\"mb-20\"\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n          viewport={{ once: true }}\n        >\n          <h3 className=\"font-gothic text-3xl text-golden-rune text-center mb-8\">\n            The Five Sacred Elements\n          </h3>\n          <p className=\"text-center text-ethereal-white/80 mb-12 max-w-3xl mx-auto\">\n            Each element is a mirror and a teacher. Through these forces, we do not \"master nature.\" \n            We re-enter the covenant of balance, remembering that to live is to exchange breath with the cosmos.\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n            {elements.map((element, index) => (\n              <motion.div\n                key={element.name}\n                className=\"text-center p-6 mystical-border rounded-lg grimoire-texture\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.6, delay: 0.1 * index }}\n                viewport={{ once: true }}\n                whileHover={{ y: -10 }}\n                data-testid={`element-${element.name.toLowerCase()}`}\n              >\n                <element.icon className={`w-12 h-12 mx-auto mb-4 text-${element.color}-400`} />\n                <h4 className=\"font-gothic text-xl text-silver-star mb-3\">{element.name}</h4>\n                <p className=\"text-ethereal-white/70 text-sm leading-relaxed\">{element.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* The Philosopher's Stone */}\n        <motion.div\n          className=\"text-center\"\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n          viewport={{ once: true }}\n        >\n          <h3 className=\"font-gothic text-4xl text-golden-rune mb-8\">\n            The Philosopher's Stone of Jakintza Ruha\n          </h3>\n          \n          <div className=\"max-w-4xl mx-auto mystical-border p-8 rounded-lg grimoire-texture\">\n            <p className=\"text-lg text-ethereal-white/90 mb-6 leading-relaxed\">\n              The alchemists once sought a single object of ultimate power—the Philosopher's Stone. \n              In Jakintza Ruha, we name it for what it truly is: a state of being.\n            </p>\n            \n            <div className=\"space-y-4 text-golden-rune font-semibold text-lg\">\n              <p>The Philosopher's Stone is the Awakened Soul who remembers.</p>\n              <p>It is the child who knows their ancestors still sing through them.</p>\n              <p>It is the community who refuses assimilation and instead lives in sacred balance with the Earth and stars.</p>\n            </div>\n            \n            <p className=\"text-xl text-silver-star mt-8 font-gothic\">\n              This is the gold we seek—not the metal, but the radiance of a people who remember what their souls already know.\n            </p>\n          </div>\n          \n          <div className=\"mt-12 space-y-3 text-golden-rune font-gothic text-xl\">\n            <p>✨ Jakintza Ruha: Where Alchemy is Remembrance.</p>\n            <p>✨ Where Wisdom Becomes Magic.</p>\n            <p>✨ Where Blood, Bone, and Spirit are transmuted into freedom.</p>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":11713},"client/src/pages/astro-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Moon, Star, ChevronLeft, ChevronRight, Plus, Calendar as CalendarIcon } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\n\ninterface MoonPhaseData {\n  phase: string;\n  illumination: string;\n  phaseName: string;\n  phaseIcon: string;\n  guidance: string;\n}\n\ninterface AstroEvent {\n  id: string;\n  date: string;\n  title: string;\n  category: 'planetary' | 'lunar' | 'ritual' | 'cosmic' | 'seasonal';\n  description: string;\n  time?: string;\n  festivalType?: string;\n  ritualFlow?: any[];\n  yearlyVariables?: any;\n  tags?: string[];\n}\n\nconst phaseNames: { [key: string]: string } = {\n  new: \"New Moon\",\n  waxing_crescent: \"Waxing Crescent\", \n  first_quarter: \"First Quarter\",\n  waxing_gibbous: \"Waxing Gibbous\",\n  full: \"Full Moon\",\n  waning_gibbous: \"Waning Gibbous\",\n  last_quarter: \"Last Quarter\",\n  waning_crescent: \"Waning Crescent\",\n};\n\nconst phaseIcons: { [key: string]: string } = {\n  new: \"🌑\",\n  waxing_crescent: \"🌒\",\n  first_quarter: \"🌓\",\n  waxing_gibbous: \"🌔\",\n  full: \"🌕\",\n  waning_gibbous: \"🌖\",\n  last_quarter: \"🌗\",\n  waning_crescent: \"🌘\",\n};\n\nconst phaseGuidance: { [key: string]: string } = {\n  new: \"Perfect time for new beginnings, setting intentions, and planting seeds of manifestation. The dark moon offers deep introspection.\",\n  waxing_crescent: \"Energy builds for growth and action. Focus on taking first steps toward your spiritual goals and nurturing new practices.\",\n  first_quarter: \"A powerful time for making decisions and overcoming obstacles. Channel the growing lunar energy into decisive action.\",\n  waxing_gibbous: \"Refine and adjust your spiritual practices. The building energy supports persistence and fine-tuning your intentions.\",\n  full: \"Peak spiritual energy! Perfect for manifestation, healing rituals, and releasing what no longer serves. Honor the divine feminine.\",\n  waning_gibbous: \"Time for gratitude and sharing wisdom. Reflect on recent growth and express thankfulness for spiritual insights received.\",\n  last_quarter: \"Release and let go. Clear away negativity, old patterns, and spiritual clutter. Forgiveness work is especially powerful now.\",\n  waning_crescent: \"Rest, reflection, and preparation for renewal. Honor the quiet wisdom within and prepare for the next cycle of growth.\",\n};\n\nexport default function AstroCalendar() {\n  const [, setLocation] = useLocation();\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n\n  // Mock moon phase data - in real implementation, this would come from an API\n  const getMoonPhase = (date: string): MoonPhaseData => {\n    const phases = ['new', 'waxing_crescent', 'first_quarter', 'waxing_gibbous', 'full', 'waning_gibbous', 'last_quarter', 'waning_crescent'];\n    const dayOfYear = new Date(date).getDate() % 8;\n    const phase = phases[dayOfYear];\n    \n    return {\n      phase,\n      illumination: Math.floor(Math.random() * 100).toString(),\n      phaseName: phaseNames[phase],\n      phaseIcon: phaseIcons[phase],\n      guidance: phaseGuidance[phase]\n    };\n  };\n\n  // Fetch Sacred Living Year events from backend\n  const { data: sacredEvents, isLoading: eventsLoading } = useQuery({\n    queryKey: ['/api/sacred-events'],\n  });\n\n  const { data: yearlyConfig } = useQuery({\n    queryKey: ['/api/yearly-config', year.toString()],\n  });\n\n  // Convert Sacred Living Year events to calendar format\n  const getAstroEvents = (): AstroEvent[] => {\n    const events: AstroEvent[] = [];\n    \n    // Add some current celestial events\n    events.push(\n      {\n        id: 'lunar-1',\n        date: new Date().toISOString().split('T')[0],\n        title: 'Full Moon in Sagittarius',\n        category: 'lunar',\n        description: 'A powerful time for manifestation and releasing what no longer serves.',\n        time: '3:47 AM'\n      },\n      {\n        id: 'planetary-1', \n        date: new Date(Date.now() + 86400000).toISOString().split('T')[0],\n        title: 'Venus conjunct Jupiter',\n        category: 'planetary',\n        description: 'Cosmic alignment bringing love, abundance, and spiritual expansion.',\n        time: '7:22 PM'\n      }\n    );\n\n    // Add Sacred Living Year events if available\n    if (sacredEvents && Array.isArray(sacredEvents)) {\n      sacredEvents.forEach((event: any) => {\n        if (event.startDate) {\n          // Convert MM-DD format to current year date\n          let eventDate = event.startDate;\n          if (event.startDate.includes('-') && !event.startDate.includes(year.toString())) {\n            const [monthDay] = event.startDate.split(' ');\n            if (monthDay.includes('-') && monthDay.length <= 5) {\n              eventDate = `${year}-${monthDay}`;\n            }\n          }\n\n          events.push({\n            id: event.id,\n            date: eventDate,\n            title: event.title,\n            category: event.category as 'seasonal' | 'ritual' | 'lunar',\n            description: event.description || 'Sacred Living Year celebration',\n            festivalType: event.festivalType,\n            ritualFlow: event.ritualFlow,\n            yearlyVariables: event.yearlyVariables,\n            tags: event.tags\n          });\n\n          // Add end date event if multi-day\n          if (event.endDate && event.endDate !== event.startDate) {\n            let endEventDate = event.endDate;\n            if (event.endDate.includes('-') && !event.endDate.includes(year.toString())) {\n              const [monthDay] = event.endDate.split(' ');\n              if (monthDay.includes('-') && monthDay.length <= 5) {\n                endEventDate = `${year}-${monthDay}`;\n              }\n            }\n\n            events.push({\n              id: `${event.id}-end`,\n              date: endEventDate,\n              title: `${event.title} (Final Day)`,\n              category: event.category as 'seasonal' | 'ritual' | 'lunar',\n              description: `Final day of ${event.description}`,\n              festivalType: event.festivalType,\n              tags: event.tags\n            });\n          }\n        }\n      });\n    }\n\n    return events.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  };\n\n  const generateCalendarDays = () => {\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const startingDayOfWeek = firstDay.getDay();\n    const daysInMonth = lastDay.getDate();\n\n    const days = [];\n\n    // Previous month days\n    for (let i = startingDayOfWeek - 1; i >= 0; i--) {\n      const prevDate = new Date(year, month, -i);\n      days.push({\n        date: prevDate.toISOString().split('T')[0],\n        day: prevDate.getDate(),\n        isCurrentMonth: false,\n        isToday: false,\n      });\n    }\n\n    // Current month days\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(year, month, day);\n      const dateString = date.toISOString().split('T')[0];\n      const today = new Date().toISOString().split('T')[0];\n      \n      days.push({\n        date: dateString,\n        day,\n        isCurrentMonth: true,\n        isToday: dateString === today,\n      });\n    }\n\n    // Next month days to fill the grid\n    const remainingDays = 42 - days.length;\n    for (let day = 1; day <= remainingDays; day++) {\n      const nextDate = new Date(year, month + 1, day);\n      days.push({\n        date: nextDate.toISOString().split('T')[0],\n        day: nextDate.getDate(),\n        isCurrentMonth: false,\n        isToday: false,\n      });\n    }\n\n    return days;\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'planetary':\n        return 'bg-golden-rune/20 text-golden-rune';\n      case 'lunar':\n        return 'bg-silver-star/20 text-silver-star';\n      case 'ritual':\n        return 'bg-shadow-purple/30 text-ethereal-white';\n      case 'cosmic':\n        return 'bg-deep-purple/30 text-ethereal-white';\n      default:\n        return 'bg-golden-rune/20 text-golden-rune';\n    }\n  };\n\n  const monthNames = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  const moonPhase = getMoonPhase(selectedDate);\n  const astroEvents = getAstroEvents();\n  const selectedEvents = astroEvents.filter(event => event.date === selectedDate);\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"astro-calendar-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/50\"></div>\n\n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          {/* Header */}\n          <motion.div \n            className=\"text-center mb-12\"\n            {...fadeInUp}\n          >\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/remember\")}\n              className=\"mb-6 text-silver-star hover:text-golden-rune\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Sacred Space\n            </Button>\n            \n            <h1 className=\"font-gothic text-4xl md:text-5xl font-semibold mb-4 text-golden-rune\" data-testid=\"astro-calendar-title\">\n              AstroCal - Cosmic Calendar\n            </h1>\n            <p className=\"text-xl text-silver-star/90 leading-relaxed max-w-3xl mx-auto\" data-testid=\"astro-calendar-description\">\n              Track celestial cycles, planetary alignments, and sacred cosmic timing for your spiritual practice\n            </p>\n          </motion.div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Calendar */}\n            <motion.div \n              className=\"lg:col-span-2\"\n              initial={{ opacity: 0, x: -30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.3 }}\n            >\n              <Card className=\"mystical-border bg-black/60 border-golden-rune/50\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"font-gothic text-2xl text-golden-rune flex items-center\">\n                      <CalendarIcon className=\"w-6 h-6 mr-2\" />\n                      {monthNames[month]} {year}\n                    </CardTitle>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentDate(new Date(year, month - 1, 1))}\n                        className=\"border-golden-rune/50 text-golden-rune hover:bg-golden-rune/10\"\n                        data-testid=\"button-prev-month\"\n                      >\n                        <ChevronLeft className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setCurrentDate(new Date());\n                          setSelectedDate(new Date().toISOString().split('T')[0]);\n                        }}\n                        className=\"border-silver-star/50 text-silver-star hover:bg-silver-star/10 px-3\"\n                        title=\"Go to today\"\n                      >\n                        Today\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          const year = prompt(\"Enter year (e.g., 2025):\");\n                          const month = prompt(\"Enter month (1-12):\");\n                          if (year && month) {\n                            const newDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n                            setCurrentDate(newDate);\n                          }\n                        }}\n                        className=\"border-cosmic-blue/50 text-cosmic-blue hover:bg-cosmic-blue/10 px-3\"\n                        title=\"Jump to specific date\"\n                      >\n                        Jump\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentDate(new Date(year, month + 1, 1))}\n                        className=\"border-golden-rune/50 text-golden-rune hover:bg-golden-rune/10\"\n                        data-testid=\"button-next-month\"\n                      >\n                        <ChevronRight className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {/* Weekday Headers */}\n                  <div className=\"grid grid-cols-7 gap-1 mb-4\">\n                    {weekdays.map((day) => (\n                      <div key={day} className=\"text-center text-silver-star/80 font-medium py-2 text-sm\">\n                        {day}\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Calendar Grid */}\n                  <div className=\"grid grid-cols-7 gap-1\">\n                    {generateCalendarDays().map((day, index) => {\n                      const dayEvents = astroEvents.filter(event => event.date === day.date);\n                      const isSelected = day.date === selectedDate;\n                      \n                      return (\n                        <div\n                          key={`${day.date}-${index}`}\n                          className={`\n                            group relative min-h-[80px] p-2 rounded-lg border cursor-pointer transition-all\n                            ${day.isCurrentMonth \n                              ? 'border-golden-rune/30 hover:border-golden-rune/60' \n                              : 'border-silver-star/20 opacity-50'\n                            }\n                            ${day.isToday \n                              ? 'bg-gradient-to-br from-golden-rune/20 to-shadow-purple/20 border-golden-rune' \n                              : 'hover:bg-black/40'\n                            }\n                            ${isSelected \n                              ? 'bg-gradient-to-br from-shadow-purple/30 to-deep-purple/30 border-shadow-purple' \n                              : ''\n                            }\n                          `}\n                          onClick={() => setSelectedDate(day.date)}\n                          data-testid={`calendar-day-${day.date}`}\n                        >\n                          <div className={`text-sm font-medium mb-1 ${\n                            day.isCurrentMonth ? 'text-ethereal-white' : 'text-silver-star/60'\n                          }`}>\n                            {day.day}\n                          </div>\n\n                          {/* Events */}\n                          <div className=\"space-y-1\">\n                            {dayEvents.slice(0, 2).map((event, i) => (\n                              <div\n                                key={event.id}\n                                className={`text-xs px-1 py-0.5 rounded truncate ${getCategoryColor(event.category)}`}\n                                title={event.title}\n                              >\n                                {event.title}\n                              </div>\n                            ))}\n                            {dayEvents.length > 2 && (\n                              <div className=\"text-xs text-silver-star/60 px-1\">\n                                +{dayEvents.length - 2} more\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Moon Phase Indicator */}\n                          {day.isCurrentMonth && (\n                            <div className=\"absolute bottom-1 right-1 text-xs opacity-60\">\n                              {getMoonPhase(day.date).phaseIcon}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n\n                  {/* Legend */}\n                  <div className=\"mt-6 flex flex-wrap items-center justify-center gap-4 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-golden-rune/50 rounded\"></div>\n                      <span className=\"text-silver-star/70\">Planetary Events</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-silver-star/50 rounded\"></div>\n                      <span className=\"text-silver-star/70\">Lunar Phases</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-shadow-purple/50 rounded\"></div>\n                      <span className=\"text-silver-star/70\">Ritual Times</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-deep-purple/50 rounded\"></div>\n                      <span className=\"text-silver-star/70\">Cosmic Events</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Sidebar */}\n            <motion.div\n              className=\"space-y-6\"\n              initial={{ opacity: 0, x: 30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.5 }}\n            >\n              {/* Lunar Guidance */}\n              <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                <CardHeader>\n                  <CardTitle className=\"font-gothic text-lg text-golden-rune flex items-center\">\n                    <Moon className=\"w-5 h-5 mr-2\" />\n                    Lunar Guidance\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center mb-4\">\n                    <div className=\"w-16 h-16 rounded-full mx-auto mb-3 flex items-center justify-center text-4xl bg-gradient-to-br from-silver-star/20 to-golden-rune/20 border border-golden-rune/30\">\n                      {moonPhase.phaseIcon}\n                    </div>\n                    <p className=\"text-silver-star font-medium\">{moonPhase.phaseName}</p>\n                    <p className=\"text-silver-star/60 text-sm\">{selectedDate}</p>\n                    <p className=\"text-golden-rune/80 text-xs mt-1\">{moonPhase.illumination}% illuminated</p>\n                  </div>\n                  <div className=\"p-3 bg-shadow-purple/20 rounded-lg border border-shadow-purple/30\">\n                    <p className=\"text-sm text-silver-star/90\">\n                      {moonPhase.guidance}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Celestial Insights */}\n              <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                <CardHeader>\n                  <CardTitle className=\"font-gothic text-lg text-golden-rune flex items-center\">\n                    <Star className=\"w-5 h-5 mr-2\" />\n                    Celestial Insights\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-silver-star/80\">Sun Sign</span>\n                      <span className=\"text-golden-rune font-medium\">♐ Sagittarius</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-silver-star/80\">Mercury</span>\n                      <span className=\"text-silver-star font-medium\">♑ Capricorn</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-silver-star/80\">Venus</span>\n                      <span className=\"text-ethereal-white font-medium\">♏ Scorpio</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-silver-star/80\">Mars</span>\n                      <span className=\"text-golden-rune font-medium\">♌ Leo</span>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 p-3 bg-deep-purple/20 rounded-lg border border-deep-purple/30\">\n                    <p className=\"text-sm text-silver-star/90\">\n                      The cosmic energies align for deep mystical contemplation and spiritual growth. Jupiter's influence enhances your intuitive abilities.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Today's Events */}\n              {selectedEvents.length > 0 && (\n                <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                  <CardHeader>\n                    <CardTitle className=\"font-gothic text-lg text-golden-rune\">\n                      Events for {new Date(selectedDate).toLocaleDateString()}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {selectedEvents.map((event) => (\n                        <div key={event.id} className=\"p-3 rounded-lg bg-shadow-purple/20 border border-shadow-purple/30\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <Badge className={getCategoryColor(event.category)}>\n                              {event.category}\n                            </Badge>\n                            {event.time && (\n                              <span className=\"text-xs text-silver-star/60\">{event.time}</span>\n                            )}\n                          </div>\n                          <h4 className=\"font-gothic text-ethereal-white font-medium mb-1\">{event.title}</h4>\n                          <p className=\"text-sm text-silver-star/80\">{event.description}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":23476},"client/src/pages/create-entry.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation, useRoute } from \"wouter\";\nimport { ArrowLeft, Save, Moon, Sun, Sparkles, Eye, Calendar, Tags, BookOpen } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\nimport { insertGrimoireEntrySchema, type Grimoire } from \"@shared/schema\";\n\nconst entryTypeConfig = {\n  spell: { label: \"Spell\", icon: Sparkles, description: \"Magical workings and enchantments\" },\n  ritual: { label: \"Ritual\", icon: Sun, description: \"Ceremonial practices and rites\" },\n  meditation: { label: \"Meditation\", icon: Eye, description: \"Inner contemplation and mindfulness\" },\n  reflection: { label: \"Reflection\", icon: BookOpen, description: \"Personal insights and thoughts\" },\n  dream: { label: \"Dream\", icon: Moon, description: \"Dream journals and interpretation\" },\n  divination: { label: \"Divination\", icon: Calendar, description: \"Oracle readings and prophecy\" },\n  herbal: { label: \"Herbal\", icon: Sun, description: \"Plant medicine and herbalism\" },\n  crystal: { label: \"Crystal\", icon: Sparkles, description: \"Crystal healing and energy work\" },\n  astrology: { label: \"Astrology\", icon: Moon, description: \"Celestial wisdom and star knowledge\" }\n};\n\nconst moonPhases = [\n  \"New Moon\", \"Waxing Crescent\", \"First Quarter\", \"Waxing Gibbous\",\n  \"Full Moon\", \"Waning Gibbous\", \"Last Quarter\", \"Waning Crescent\"\n];\n\nconst zodiacSigns = [\n  \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\",\n  \"Libra\", \"Scorpio\", \"Sagittarius\", \"Capricorn\", \"Aquarius\", \"Pisces\"\n];\n\nconst moods = [\n  \"Peaceful\", \"Energetic\", \"Contemplative\", \"Joyful\", \"Mystical\", \n  \"Focused\", \"Emotional\", \"Spiritual\", \"Curious\", \"Transformative\"\n];\n\nconst createEntrySchema = insertGrimoireEntrySchema.extend({\n  tags: z.array(z.string()).optional(),\n});\n\nexport default function CreateEntry() {\n  const [, setLocation] = useLocation();\n  const [match, params] = useRoute(\"/grimoires/:grimoireId/create-entry\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [tagInput, setTagInput] = useState(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n\n  const grimoireId = params?.grimoireId;\n\n  const { data: grimoire } = useQuery<Grimoire>({\n    queryKey: [\"/api/grimoires\", grimoireId],\n    enabled: !!grimoireId\n  });\n\n  const form = useForm<z.infer<typeof createEntrySchema>>({\n    resolver: zodResolver(createEntrySchema),\n    defaultValues: {\n      grimoireId: grimoireId || \"\",\n      title: \"\",\n      content: \"\",\n      entryType: \"reflection\",\n      tags: [],\n      mood: \"\",\n      moonPhase: \"\",\n      astrologicalSign: \"\"\n    }\n  });\n\n  useEffect(() => {\n    if (grimoireId) {\n      form.setValue(\"grimoireId\", grimoireId);\n    }\n  }, [grimoireId, form]);\n\n  const createEntryMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createEntrySchema>) => {\n      return apiRequest(\"/api/grimoire-entries\", {\n        method: \"POST\",\n        body: JSON.stringify({ ...data, tags: selectedTags })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Entry Created\",\n        description: \"Your grimoire entry has been successfully saved.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/grimoire-entries\", grimoireId] });\n      setLocation(`/grimoires/${grimoireId}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save entry. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = async (data: z.infer<typeof createEntrySchema>) => {\n    createEntryMutation.mutate(data);\n  };\n\n  const addTag = () => {\n    if (tagInput.trim() && !selectedTags.includes(tagInput.trim())) {\n      setSelectedTags([...selectedTags, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setSelectedTags(selectedTags.filter(tag => tag !== tagToRemove));\n  };\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  if (!match || !grimoireId) {\n    return <div>Invalid grimoire</div>;\n  }\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"create-entry-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/60\"></div>\n      \n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-4xl mx-auto px-6\">\n          {/* Back Button */}\n          <motion.div {...fadeInUp} className=\"mb-8\">\n            <Link href={`/grimoires/${grimoireId}`}>\n              <Button \n                variant=\"ghost\" \n                className=\"text-golden-rune hover:text-silver-star transition-colors\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"mr-2 w-4 h-4\" />\n                Back to {grimoire?.title || \"Grimoire\"}\n              </Button>\n            </Link>\n          </motion.div>\n\n          {/* Header */}\n          <motion.div \n            className=\"text-center mb-12\"\n            {...fadeInUp}\n          >\n            <h1 className=\"font-gothic text-4xl md:text-5xl font-semibold mb-4 text-golden-rune\" data-testid=\"create-entry-title\">\n              Create New Entry\n            </h1>\n            <p className=\"text-lg text-silver-star/90 leading-relaxed max-w-2xl mx-auto\" data-testid=\"create-entry-description\">\n              Document your spiritual journey, magical workings, and mystical insights\n            </p>\n          </motion.div>\n\n          {/* Creation Form */}\n          <motion.div\n            {...fadeInUp}\n            className=\"mystical-border rounded-xl p-8 grimoire-texture\"\n          >\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Entry Type Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"entryType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golden-rune text-lg font-semibold\">\n                        Entry Type\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-4\">\n                          {Object.entries(entryTypeConfig).map(([type, config]) => {\n                            const IconComponent = config.icon;\n                            const isSelected = field.value === type;\n                            return (\n                              <Card \n                                key={type}\n                                className={`cursor-pointer transition-all duration-300 hover:scale-105 ${\n                                  isSelected \n                                    ? 'ring-2 ring-golden-rune bg-gradient-to-br from-deep-purple/30 to-shadow-purple/20' \n                                    : 'hover:ring-1 hover:ring-silver-star/50 bg-black/40'\n                                } mystical-border`}\n                                onClick={() => field.onChange(type)}\n                                data-testid={`card-entry-type-${type}`}\n                              >\n                                <CardContent className=\"text-center p-4\">\n                                  <IconComponent className=\"w-6 h-6 text-golden-rune mx-auto mb-2\" />\n                                  <p className=\"text-ethereal-white text-sm font-medium\">\n                                    {config.label}\n                                  </p>\n                                </CardContent>\n                              </Card>\n                            );\n                          })}\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Title */}\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golden-rune text-base font-semibold\">\n                        Entry Title\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field}\n                          placeholder=\"Give your entry a meaningful title...\"\n                          className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune\"\n                          data-testid=\"input-entry-title\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Content */}\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golden-rune text-base font-semibold\">\n                        Entry Content\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field}\n                          placeholder=\"Write your entry here... Document your experiences, insights, rituals, or magical workings...\"\n                          rows={12}\n                          className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune resize-none font-mono\"\n                          data-testid=\"textarea-entry-content\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Metadata Section */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {/* Mood */}\n                  <FormField\n                    control={form.control}\n                    name=\"mood\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-golden-rune text-sm font-semibold\">\n                          Current Mood\n                        </FormLabel>\n                        <FormControl>\n                          <Select value={field.value || \"\"} onValueChange={field.onChange}>\n                            <SelectTrigger \n                              className=\"bg-black/50 border-silver-star/30 text-ethereal-white focus:ring-golden-rune focus:border-golden-rune\"\n                              data-testid=\"select-mood\"\n                            >\n                              <SelectValue placeholder=\"Select mood\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-void-black border-silver-star/50\">\n                              {moods.map((mood) => (\n                                <SelectItem \n                                  key={mood} \n                                  value={mood}\n                                  className=\"text-ethereal-white hover:bg-deep-purple/30\"\n                                >\n                                  {mood}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Moon Phase */}\n                  <FormField\n                    control={form.control}\n                    name=\"moonPhase\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-golden-rune text-sm font-semibold\">\n                          Moon Phase\n                        </FormLabel>\n                        <FormControl>\n                          <Select value={field.value || \"\"} onValueChange={field.onChange}>\n                            <SelectTrigger \n                              className=\"bg-black/50 border-silver-star/30 text-ethereal-white focus:ring-golden-rune focus:border-golden-rune\"\n                              data-testid=\"select-moon-phase\"\n                            >\n                              <SelectValue placeholder=\"Select phase\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-void-black border-silver-star/50\">\n                              {moonPhases.map((phase) => (\n                                <SelectItem \n                                  key={phase} \n                                  value={phase}\n                                  className=\"text-ethereal-white hover:bg-deep-purple/30\"\n                                >\n                                  {phase}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Astrological Sign */}\n                  <FormField\n                    control={form.control}\n                    name=\"astrologicalSign\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-golden-rune text-sm font-semibold\">\n                          Current Sign\n                        </FormLabel>\n                        <FormControl>\n                          <Select value={field.value || \"\"} onValueChange={field.onChange}>\n                            <SelectTrigger \n                              className=\"bg-black/50 border-silver-star/30 text-ethereal-white focus:ring-golden-rune focus:border-golden-rune\"\n                              data-testid=\"select-astrological-sign\"\n                            >\n                              <SelectValue placeholder=\"Select sign\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-void-black border-silver-star/50\">\n                              {zodiacSigns.map((sign) => (\n                                <SelectItem \n                                  key={sign} \n                                  value={sign}\n                                  className=\"text-ethereal-white hover:bg-deep-purple/30\"\n                                >\n                                  {sign}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Tags */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-golden-rune text-base font-semibold\">\n                    Tags\n                  </label>\n                  <div className=\"flex gap-2\">\n                    <Input \n                      value={tagInput}\n                      onChange={(e) => setTagInput(e.target.value)}\n                      placeholder=\"Add tags to organize your entry...\"\n                      className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune\"\n                      onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n                      data-testid=\"input-tag\"\n                    />\n                    <Button \n                      type=\"button\" \n                      onClick={addTag}\n                      variant=\"outline\"\n                      className=\"border-silver-star/50 text-silver-star hover:bg-silver-star/10\"\n                      data-testid=\"button-add-tag\"\n                    >\n                      <Tags className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  {selectedTags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedTags.map((tag) => (\n                        <Badge \n                          key={tag} \n                          variant=\"secondary\"\n                          className=\"bg-deep-purple/30 text-silver-star hover:bg-deep-purple/50 cursor-pointer\"\n                          onClick={() => removeTag(tag)}\n                          data-testid={`tag-${tag}`}\n                        >\n                          {tag} ×\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Submit Button */}\n                <div className=\"flex justify-end pt-6\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createEntryMutation.isPending}\n                    className=\"bg-gradient-to-r from-golden-rune to-cosmic-blue hover:from-golden-rune/90 hover:to-cosmic-blue/90 text-void-black font-semibold px-8 py-2\"\n                    data-testid=\"button-save-entry\"\n                  >\n                    <Save className=\"mr-2 w-4 h-4\" />\n                    {createEntryMutation.isPending ? \"Saving...\" : \"Save Entry\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":18706},"client/src/pages/create-grimoire.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Book, Circle, Star, Save, Upload } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\nimport { insertGrimoireSchema } from \"@shared/schema\";\n\nconst createGrimoireSchema = insertGrimoireSchema.extend({\n  type: z.enum([\"shadows\", \"mirrors\", \"stars\"], {\n    required_error: \"Please select a grimoire type\"\n  }),\n  customField1: z.string().optional(),\n  customField2: z.string().optional(), \n  customField3: z.string().optional()\n});\n\nconst grimoireTypeConfig = {\n  shadows: {\n    icon: Book,\n    label: \"Book of Shadows\",\n    description: \"Spells, rituals, and magical workings\",\n    color: \"from-deep-purple to-shadow-purple\",\n    fields: {\n      intention: \"What magical intention guides this grimoire?\",\n      tradition: \"Which magical tradition resonates with you?\",\n      elements: \"Which elements call to your practice?\"\n    }\n  },\n  mirrors: {\n    icon: Circle,\n    label: \"Book of Mirrors\", \n    description: \"Self-reflection, dreams, and inner work\",\n    color: \"from-silver-star/20 to-ethereal-white/10\",\n    fields: {\n      focus: \"What aspect of yourself are you exploring?\",\n      dreamwork: \"Do you plan to include dream journaling?\",\n      healing: \"What healing patterns are you addressing?\"\n    }\n  },\n  stars: {\n    icon: Star,\n    label: \"Book of Stars\",\n    description: \"Astrology, divination, and cosmic wisdom\",\n    color: \"from-golden-rune/30 to-cosmic-blue/20\",\n    fields: {\n      divination: \"Which divination methods interest you?\",\n      astrology: \"Are you focusing on natal or predictive astrology?\",\n      cosmic: \"What cosmic phenomena draw your attention?\"\n    }\n  },\n};\n\nexport default function CreateGrimoire() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedType, setSelectedType] = useState<string>(\"shadows\");\n  const [coverImageUrl, setCoverImageUrl] = useState<string>(\"\");\n\n  const form = useForm<z.infer<typeof createGrimoireSchema>>({\n    resolver: zodResolver(createGrimoireSchema),\n    defaultValues: {\n      title: \"\",\n      type: \"shadows\" as const,\n      description: \"\",\n      coverImage: \"\",\n      isPublic: \"false\" as const,\n      customField1: \"\",\n      customField2: \"\",\n      customField3: \"\"\n    }\n  });\n\n  const createGrimoireMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createGrimoireSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/grimoires\", { ...data, coverImage: coverImageUrl });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Grimoire Created\",\n        description: \"Your sacred grimoire has been successfully created.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/grimoires\"] });\n      setLocation(\"/grimoires\");\n    },\n    onError: () => {\n      toast({\n        title: \"Creation Failed\",\n        description: \"Failed to create grimoire. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = async (data: z.infer<typeof createGrimoireSchema>) => {\n    createGrimoireMutation.mutate(data);\n  };\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"create-grimoire-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/60\"></div>\n      \n      <div className=\"relative z-10 py-20\" style={{ pointerEvents: 'auto' }}>\n        <div className=\"max-w-4xl mx-auto px-6\">\n          {/* Back Button */}\n          <motion.div {...fadeInUp} className=\"mb-8\">\n            <Link href=\"/grimoires\">\n              <Button \n                variant=\"ghost\" \n                className=\"text-golden-rune hover:text-silver-star transition-colors\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"mr-2 w-4 h-4\" />\n                Back to Grimoires\n              </Button>\n            </Link>\n          </motion.div>\n\n          {/* Header */}\n          <motion.div \n            className=\"text-center mb-12\"\n            {...fadeInUp}\n          >\n            <h1 className=\"font-gothic text-4xl md:text-5xl font-semibold mb-4 text-golden-rune\" data-testid=\"create-grimoire-title\">\n              Create Sacred Grimoire\n            </h1>\n            <p className=\"text-lg text-silver-star/90 leading-relaxed max-w-2xl mx-auto\" data-testid=\"create-grimoire-description\">\n              Begin your journey of mystical documentation. Choose your path and create your first sacred book.\n            </p>\n          </motion.div>\n\n          {/* Creation Form */}\n          <motion.div\n            {...fadeInUp}\n            className=\"mystical-border rounded-xl p-8 grimoire-texture relative z-20\"\n            style={{ pointerEvents: 'auto' }}\n          >\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Grimoire Type Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golden-rune text-lg font-semibold\">\n                        Choose Your Path\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4\">\n                          {Object.entries(grimoireTypeConfig).map(([type, config]) => {\n                            const IconComponent = config.icon;\n                            const isSelected = field.value === type;\n                            return (\n                              <Card \n                                key={type}\n                                className={`cursor-pointer transition-all duration-300 hover:scale-105 ${\n                                  isSelected \n                                    ? 'ring-2 ring-golden-rune bg-gradient-to-br from-deep-purple/30 to-shadow-purple/20' \n                                    : 'hover:ring-1 hover:ring-silver-star/50 bg-black/40'\n                                } mystical-border`}\n                                onClick={() => {\n                                  field.onChange(type);\n                                  setSelectedType(type);\n                                }}\n                                data-testid={`card-grimoire-type-${type}`}\n                              >\n                                <CardHeader className=\"text-center pb-2\">\n                                  <div className=\"flex justify-center mb-2\">\n                                    <IconComponent className=\"w-8 h-8 text-golden-rune\" />\n                                  </div>\n                                  <CardTitle className=\"text-ethereal-white text-lg\">\n                                    {config.label}\n                                  </CardTitle>\n                                </CardHeader>\n                                <CardContent className=\"text-center\">\n                                  <p className=\"text-silver-star/90 text-sm\">\n                                    {config.description}\n                                  </p>\n                                </CardContent>\n                              </Card>\n                            );\n                          })}\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Title */}\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golden-rune text-base font-semibold\">\n                        Grimoire Title\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field}\n                          placeholder=\"Enter the name of your sacred grimoire...\"\n                          className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune relative z-30\"\n                          style={{ pointerEvents: 'auto' }}\n                          data-testid=\"input-grimoire-title\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Description */}\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golden-rune text-base font-semibold\">\n                        Description\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field}\n                          value={field.value || \"\"}\n                          placeholder=\"Describe the purpose and focus of this grimoire...\"\n                          rows={4}\n                          className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune resize-none relative z-30\"\n                          style={{ pointerEvents: 'auto' }}\n                          data-testid=\"textarea-grimoire-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Cover Image URL */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-golden-rune text-base font-semibold\">\n                    Cover Image (Optional)\n                  </label>\n                  <div className=\"flex gap-3\">\n                    <Input \n                      value={coverImageUrl}\n                      onChange={(e) => setCoverImageUrl(e.target.value)}\n                      placeholder=\"Enter image URL or upload...\"\n                      className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune relative z-30\"\n                      style={{ pointerEvents: 'auto' }}\n                      data-testid=\"input-cover-image\"\n                    />\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      className=\"border-silver-star/50 text-silver-star hover:bg-silver-star/10\"\n                      data-testid=\"button-upload-cover\"\n                    >\n                      <Upload className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  {coverImageUrl && (\n                    <div className=\"mt-3\">\n                      <img \n                        src={coverImageUrl} \n                        alt=\"Cover preview\" \n                        className=\"w-32 h-48 object-cover rounded-lg border border-silver-star/30\"\n                        data-testid=\"img-cover-preview\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Dynamic Fields Based on Grimoire Type */}\n                {selectedType && grimoireTypeConfig[selectedType as keyof typeof grimoireTypeConfig] && (\n                  <div className=\"space-y-6 p-6 mystical-border rounded-lg bg-gradient-to-br from-golden-rune/5 to-cosmic-blue/5\">\n                    <h3 className=\"text-golden-rune text-lg font-semibold\">\n                      {grimoireTypeConfig[selectedType as keyof typeof grimoireTypeConfig].label} Specifics\n                    </h3>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"customField1\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-silver-star text-sm font-semibold\">\n                            {Object.values(grimoireTypeConfig[selectedType as keyof typeof grimoireTypeConfig].fields)[0]}\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field}\n                              className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune relative z-30\"\n                              style={{ pointerEvents: 'auto' }}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"customField2\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-silver-star text-sm font-semibold\">\n                            {Object.values(grimoireTypeConfig[selectedType as keyof typeof grimoireTypeConfig].fields)[1]}\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field}\n                              className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune relative z-30\"\n                              style={{ pointerEvents: 'auto' }}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"customField3\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-silver-star text-sm font-semibold\">\n                            {Object.values(grimoireTypeConfig[selectedType as keyof typeof grimoireTypeConfig].fields)[2]}\n                          </FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field}\n                              rows={3}\n                              className=\"bg-black/50 border-silver-star/30 text-ethereal-white placeholder:text-silver-star/60 focus:ring-golden-rune focus:border-golden-rune resize-none relative z-30\"\n                              style={{ pointerEvents: 'auto' }}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n\n                {/* Privacy Settings */}\n                <FormField\n                  control={form.control}\n                  name=\"isPublic\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golden-rune text-base font-semibold\">\n                        Visibility\n                      </FormLabel>\n                      <FormControl>\n                        <Select value={field.value || \"false\"} onValueChange={field.onChange}>\n                          <SelectTrigger \n                            className=\"bg-black/50 border-silver-star/30 text-ethereal-white focus:ring-golden-rune focus:border-golden-rune\"\n                            data-testid=\"select-visibility\"\n                          >\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-void-black border-silver-star/50\">\n                            <SelectItem value=\"false\" className=\"text-ethereal-white hover:bg-deep-purple/30\">\n                              Private - Only visible to you\n                            </SelectItem>\n                            <SelectItem value=\"true\" className=\"text-ethereal-white hover:bg-deep-purple/30\">\n                              Public - Visible to the community\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Submit Button */}\n                <div className=\"flex justify-end pt-6\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createGrimoireMutation.isPending}\n                    className=\"bg-gradient-to-r from-golden-rune to-cosmic-blue hover:from-golden-rune/90 hover:to-cosmic-blue/90 text-void-black font-semibold px-8 py-2\"\n                    data-testid=\"button-create-grimoire\"\n                  >\n                    <Save className=\"mr-2 w-4 h-4\" />\n                    {createGrimoireMutation.isPending ? \"Creating...\" : \"Create Grimoire\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":18522},"client/src/pages/deity-codex.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Crown, Sparkles, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\n\nexport default function DeityCodex() {\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white flex items-center justify-center\" \n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/70\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"absolute top-0 left-0 right-0 z-50 p-6\">\n        <Link \n          href=\"/\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          ← Back to Athenaeum\n        </Link>\n      </nav>\n\n      <div className=\"relative z-10 text-center px-6\">\n        <motion.div {...fadeInUp} className=\"max-w-2xl mx-auto\">\n          <div className=\"mystical-border p-12 rounded-lg grimoire-texture text-center\">\n            {/* Magical Caution Symbol */}\n            <div className=\"mb-8\">\n              <div className=\"w-24 h-24 mx-auto mb-6 border-4 border-golden-rune rounded-full flex items-center justify-center text-golden-rune text-4xl animate-pulse\">\n                ⚠️\n              </div>\n            </div>\n            \n            <Crown className=\"w-16 h-16 mx-auto mb-6 text-golden-rune\" />\n            \n            <h1 className=\"font-gothic text-4xl md:text-6xl text-golden-rune mb-6\">\n              Sacred Deity Codex\n            </h1>\n            \n            <div className=\"bg-golden-rune/10 border border-golden-rune/30 rounded-lg p-6 mb-6\">\n              <h2 className=\"font-gothic text-2xl text-golden-rune mb-4\">\n                🔮 Under Magical Renovation 🔮\n              </h2>\n              <p className=\"text-xl text-silver-star/90 leading-relaxed\">\n                The cosmic connection is being realigned with new sacred energies. \n                The repository of divine beings and pantheons will return more powerful than ever.\n              </p>\n            </div>\n            \n            <div className=\"text-ethereal-white/70\">\n              <p>The ancient codex is being infused with deeper wisdom...</p>\n              <div className=\"flex justify-center mt-4 space-x-2\">\n                <Sparkles className=\"w-5 h-5 animate-pulse\" />\n                <Sparkles className=\"w-5 h-5 animate-pulse\" style={{animationDelay: '0.2s'}} />\n                <Sparkles className=\"w-5 h-5 animate-pulse\" style={{animationDelay: '0.4s'}} />\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":3042},"client/src/pages/entry-detail.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { ArrowLeft, Edit, Trash2, Calendar, Moon, Star, Tags, Heart, Eye, EyeOff } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\nimport type { GrimoireEntry, Grimoire } from \"@shared/schema\";\n\nconst entryTypeConfig = {\n  spell: { label: \"Spell\", color: \"bg-purple-500/20 text-purple-300\" },\n  ritual: { label: \"Ritual\", color: \"bg-blue-500/20 text-blue-300\" },\n  meditation: { label: \"Meditation\", color: \"bg-green-500/20 text-green-300\" },\n  reflection: { label: \"Reflection\", color: \"bg-teal-500/20 text-teal-300\" },\n  dream: { label: \"Dream\", color: \"bg-indigo-500/20 text-indigo-300\" },\n  divination: { label: \"Divination\", color: \"bg-yellow-500/20 text-yellow-300\" },\n  herbal: { label: \"Herbal\", color: \"bg-emerald-500/20 text-emerald-300\" },\n  crystal: { label: \"Crystal\", color: \"bg-pink-500/20 text-pink-300\" },\n  astrology: { label: \"Astrology\", color: \"bg-orange-500/20 text-orange-300\" },\n};\n\nexport default function EntryDetail() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: entry, isLoading: entryLoading } = useQuery<GrimoireEntry>({\n    queryKey: [\"/api/grimoire-entries\", params.entryId],\n  });\n\n  const { data: grimoire } = useQuery<Grimoire>({\n    queryKey: [\"/api/grimoires\", params.id],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/grimoire-entries/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/grimoires\", params.id, \"entries\"] });\n      toast({\n        title: \"Entry Deleted\",\n        description: \"Your sacred entry has been removed\",\n      });\n      setLocation(`/grimoires/${params.id}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete entry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  if (entryLoading) {\n    return (\n      <section \n        className=\"min-h-screen text-ethereal-white flex items-center justify-center\" \n        style={{\n          backgroundImage: `url(${mysticalChamberBg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundAttachment: 'fixed'\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black/50\"></div>\n        <div className=\"relative z-10 text-center\">\n          <div className=\"animate-spin w-8 h-8 border-2 border-golden-rune border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-silver-star\">Loading sacred entry...</p>\n        </div>\n      </section>\n    );\n  }\n\n  if (!entry) {\n    return (\n      <section \n        className=\"min-h-screen text-ethereal-white flex items-center justify-center\" \n        style={{\n          backgroundImage: `url(${mysticalChamberBg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundAttachment: 'fixed'\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black/50\"></div>\n        <div className=\"relative z-10 text-center\">\n          <h1 className=\"font-gothic text-4xl text-golden-rune mb-4\">Entry Not Found</h1>\n          <Button\n            onClick={() => setLocation(`/grimoires/${params.id}`)}\n            variant=\"outline\"\n            className=\"border-golden-rune/50 text-silver-star hover:bg-golden-rune/10\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Return to Grimoire\n          </Button>\n        </div>\n      </section>\n    );\n  }\n\n  const entryConfig = entryTypeConfig[entry.entryType as keyof typeof entryTypeConfig];\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"entry-detail-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/50\"></div>\n\n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-4xl mx-auto px-6\">\n          {/* Header */}\n          <motion.div \n            className=\"mb-12\"\n            {...fadeInUp}\n          >\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(`/grimoires/${params.id}`)}\n              className=\"mb-6 text-silver-star hover:text-golden-rune\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to {grimoire?.title}\n            </Button>\n            \n            <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-6\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Badge className={entryConfig?.color || \"bg-golden-rune/20 text-golden-rune\"}>\n                    {entryConfig?.label || entry.entryType}\n                  </Badge>\n                  <div className=\"flex items-center text-silver-star/60 text-sm\">\n                    <Calendar className=\"w-4 h-4 mr-1\" />\n                    {new Date(entry.createdAt).toLocaleDateString()}\n                  </div>\n                </div>\n                \n                <h1 className=\"font-gothic text-4xl md:text-5xl font-semibold text-golden-rune mb-4\" data-testid=\"entry-title\">\n                  {entry.title}\n                </h1>\n\n                {/* Metadata */}\n                <div className=\"flex flex-wrap gap-4 text-sm text-silver-star/80\">\n                  {entry.moonPhase && (\n                    <div className=\"flex items-center\">\n                      <Moon className=\"w-4 h-4 mr-1\" />\n                      {entry.moonPhase.replace('_', ' ')}\n                    </div>\n                  )}\n                  {entry.astrologicalSign && (\n                    <div className=\"flex items-center\">\n                      <Star className=\"w-4 h-4 mr-1\" />\n                      {entry.astrologicalSign}\n                    </div>\n                  )}\n                  {entry.mood && (\n                    <div className=\"flex items-center\">\n                      <Heart className=\"w-4 h-4 mr-1\" />\n                      {entry.mood}\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"border-golden-rune/50 text-golden-rune hover:bg-golden-rune/10\"\n                  data-testid=\"button-edit-entry\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit\n                </Button>\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                      data-testid=\"button-delete-entry\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Delete\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"bg-black/90 border-golden-rune/50\">\n                    <DialogHeader>\n                      <DialogTitle className=\"text-golden-rune\">Delete Sacred Entry</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"py-4\">\n                      <p className=\"text-silver-star mb-6\">\n                        Are you sure you want to delete \"{entry.title}\"? This action cannot be undone.\n                      </p>\n                      <div className=\"flex justify-end gap-3\">\n                        <Button variant=\"outline\" className=\"border-silver-star/30 text-silver-star\">\n                          Cancel\n                        </Button>\n                        <Button\n                          onClick={() => deleteMutation.mutate(entry.id)}\n                          disabled={deleteMutation.isPending}\n                          variant=\"destructive\"\n                        >\n                          {deleteMutation.isPending ? \"Deleting...\" : \"Delete Forever\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Content */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.3 }}\n          >\n            <Card className=\"mystical-border bg-black/60 border-golden-rune/30 mb-8\">\n              <CardHeader>\n                <CardTitle className=\"font-gothic text-2xl text-golden-rune\">Sacred Content</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"prose prose-invert max-w-none\">\n                  <div className=\"text-ethereal-white/90 leading-relaxed whitespace-pre-wrap text-lg\" data-testid=\"entry-content\">\n                    {entry.content}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tags */}\n            {entry.tags && entry.tags.length > 0 && (\n              <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                <CardHeader>\n                  <CardTitle className=\"font-gothic text-xl text-golden-rune flex items-center\">\n                    <Tags className=\"w-5 h-5 mr-2\" />\n                    Tags\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {entry.tags.map((tag, index) => (\n                      <Badge \n                        key={index} \n                        variant=\"outline\" \n                        className=\"bg-golden-rune/20 text-golden-rune border-golden-rune/50\"\n                        data-testid={`tag-${index}`}\n                      >\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":11122},"client/src/pages/four-pillars.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\nimport { CulturalRespectIcon, CosmicVisionIcon, AncestralStewardshipIcon, MagicScienceIcon } from \"@/components/pillar-icons\";\n\ninterface Pillar {\n  id: string;\n  icon: React.ComponentType<{ className?: string }>;\n  title: string;\n  subtitle: string;\n  description: string;\n  glowColor: string;\n  bgGradient: string;\n}\n\nconst pillars: Pillar[] = [\n  {\n    id: \"cultural-respect\",\n    icon: CulturalRespectIcon,\n    title: \"Cultural Respect\",\n    subtitle: \"Honoring what was erased.\",\n    description: \"We stand against appropriation, assimilation, and erasure. We protect Indigenous wisdom, sacred practices, and ancestral languages.\",\n    glowColor: \"rgba(16, 185, 129, 0.6)\", // emerald green\n    bgGradient: \"from-emerald-900/20 to-emerald-600/10\"\n  },\n  {\n    id: \"cosmic-vision\",\n    icon: CosmicVisionIcon,\n    title: \"Cosmic Vision\",\n    subtitle: \"Remembering our place in the universe.\",\n    description: \"The cosmos is within us. Astrology, Christ Consciousness, and celestial cycles guide us to soul remembrance.\",\n    glowColor: \"rgba(139, 69, 199, 0.6)\", // violet\n    bgGradient: \"from-violet-900/20 to-purple-600/10\"\n  },\n  {\n    id: \"ancestral-stewardship\",\n    icon: AncestralStewardshipIcon,\n    title: \"Ancestral Stewardship\",\n    subtitle: \"Time is a sacred inheritance.\",\n    description: \"We honor our ancestors, heal the past, and protect the future. Remembering is resistance.\",\n    glowColor: \"rgba(245, 158, 11, 0.6)\", // amber/gold\n    bgGradient: \"from-amber-900/20 to-yellow-600/10\"\n  },\n  {\n    id: \"magic-science\",\n    icon: MagicScienceIcon,\n    title: \"Integration of Magic & Science\",\n    subtitle: \"The false divide ends here.\",\n    description: \"We bridge spellwork and science, crystals and physics, ritual and psychology—building a new renaissance.\",\n    glowColor: \"rgba(59, 130, 246, 0.6)\", // electric blue\n    bgGradient: \"from-blue-900/20 to-cyan-600/10\"\n  }\n];\n\nexport default function FourPillars() {\n  const [activePillar, setActivePillar] = useState<string | null>(null);\n  const [visitedPillars, setVisitedPillars] = useState<Set<string>>(new Set());\n  const [, setLocation] = useLocation();\n\n  const handlePillarClick = (pillarId: string) => {\n    setActivePillar(pillarId === activePillar ? null : pillarId);\n    setVisitedPillars(prev => new Set([...Array.from(prev), pillarId]));\n  };\n\n  return (\n    <section \n      className=\"min-h-screen relative overflow-hidden\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"four-pillars-section\"\n    >\n      {/* Dark overlay for mystical atmosphere */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/80\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"relative z-50 p-6\">\n        <Link \n          href=\"/\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n          data-testid=\"link-back-home\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          Return to Sacred Remembering\n        </Link>\n      </nav>\n      \n      {/* Starfield effect */}\n      <div className=\"absolute inset-0\">\n        {[...Array(50)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-0.5 h-0.5 bg-silver-star rounded-full animate-pulse\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 3}s`,\n              animationDuration: `${2 + Math.random() * 2}s`\n            }}\n          />\n        ))}\n      </div>\n      \n      <div className=\"relative z-10 container mx-auto px-6 py-20\">\n        {/* Header */}\n        <motion.div\n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: -30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n        >\n          <h1 className=\"font-gothic text-5xl md:text-6xl text-golden-rune mb-6\">\n            The Four Pillars\n          </h1>\n          <p className=\"text-xl text-silver-star/80 max-w-3xl mx-auto\">\n            Welcome to the cosmic temple. Four massive pillars rise from the starry depths, \n            each inscribed with sacred truths that guide our mystical journey.\n          </p>\n        </motion.div>\n\n        {/* Temple Invocation */}\n        <motion.div\n          className=\"text-center mb-20 max-w-4xl mx-auto\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1, delay: 0.5 }}\n        >\n          <div className=\"relative p-8 rounded-lg border border-golden-rune/30 bg-gradient-to-b from-black/60 to-black/80 backdrop-blur-sm\">\n            <div className=\"absolute inset-0 rounded-lg bg-gradient-to-b from-golden-rune/5 to-transparent\"></div>\n            \n            <div className=\"relative z-10\">\n              <h2 className=\"font-gothic text-3xl md:text-4xl text-golden-rune mb-8\">\n                The Temple Invocation of Jakintza Ruha\n              </h2>\n              \n              <div className=\"text-silver-star/90 leading-relaxed space-y-6 text-left max-w-3xl mx-auto\">\n                <p className=\"text-center italic text-lg mb-8\">\n                  We gather beneath the four pillars,<br/>\n                  where earth, sky, time, and spirit meet.<br/>\n                  We stand in remembrance, in resistance, in wonder.<br/>\n                  We stand in the temple of wisdom becoming magic.\n                </p>\n\n                <div className=\"grid md:grid-cols-2 gap-8 text-sm leading-7\">\n                  <div>\n                    <h3 className=\"font-gothic text-xl text-golden-rune mb-3\">I. Cultural Respect</h3>\n                    <p className=\"mb-4\">\n                      We will not wear culture as costume.<br/>\n                      We will not erase the blood, the struggle, or the memory.<br/>\n                      We honor elders as living libraries,<br/>\n                      and we guard traditions from theft.<br/>\n                      What we take, we give back.<br/>\n                      What we inherit, we protect.<br/>\n                      <em>Cultural respect is not accessory — it is justice.</em>\n                    </p>\n\n                    <h3 className=\"font-gothic text-xl text-golden-rune mb-3\">III. Ancestral Stewardship</h3>\n                    <p>\n                      We walk with the dead and the unborn.<br/>\n                      We will not allow our ancestors to be erased.<br/>\n                      We speak the names of the silenced,<br/>\n                      we repair what we can,<br/>\n                      we plant seeds we may never see grow.<br/>\n                      To forget is to die twice.<br/>\n                      <em>To remember is to live forever.</em>\n                    </p>\n                  </div>\n\n                  <div>\n                    <h3 className=\"font-gothic text-xl text-golden-rune mb-3\">II. Cosmic Vision</h3>\n                    <p className=\"mb-4\">\n                      We lift our eyes from the grindstone to the stars.<br/>\n                      We remember that we are stardust made flesh.<br/>\n                      We will not sever science from spirit,<br/>\n                      nor wonder from responsibility.<br/>\n                      We dream futures worthy of our descendants,<br/>\n                      listening to the sky as scripture,<br/>\n                      <em>living as luminous threads in a cosmic web.</em>\n                    </p>\n\n                    <h3 className=\"font-gothic text-xl text-golden-rune mb-3\">IV. Integration of Magic & Science</h3>\n                    <p>\n                      We will not choose between microscope and moonlight.<br/>\n                      We honor ritual as technology and technology as ritual.<br/>\n                      We treat questions as prayers,<br/>\n                      and knowledge as devotion.<br/>\n                      We heal with medicine and with magic.<br/>\n                      We remember: integration is wholeness,<br/>\n                      <em>and wholeness is power.</em>\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"text-center mt-8 pt-6 border-t border-golden-rune/20\">\n                  <h3 className=\"font-gothic text-xl text-golden-rune mb-4\">Together</h3>\n                  <p className=\"italic text-base\">\n                    We build the temple.<br/>\n                    We live the pillars.<br/>\n                    We remember what the empire tried to erase.<br/>\n                    We reclaim what was stolen.<br/>\n                    We rise as ancestors in training,<br/>\n                    threads of a cosmos that sings through us.\n                  </p>\n                  \n                  <div className=\"mt-6 text-golden-rune font-gothic text-lg\">\n                    <p>This is Jakintza Ruha.</p>\n                    <p>This is remembrance.</p>\n                    <p>This is the path home.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Temple Floor */}\n        <div className=\"relative\">\n          {/* Cosmic temple outline */}\n          <div className=\"absolute inset-0 opacity-20\">\n            <div className=\"w-full h-2 bg-gradient-to-r from-transparent via-golden-rune to-transparent mb-8\"></div>\n            <div className=\"flex justify-between\">\n              <div className=\"w-2 h-96 bg-gradient-to-b from-golden-rune to-transparent\"></div>\n              <div className=\"w-2 h-96 bg-gradient-to-b from-golden-rune to-transparent\"></div>\n            </div>\n          </div>\n\n          {/* Pillars Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-7xl mx-auto\">\n            {pillars.map((pillar, index) => (\n              <motion.div\n                key={pillar.id}\n                className=\"relative\"\n                initial={{ opacity: 0, y: 100 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ \n                  duration: 0.8, \n                  delay: index * 0.2,\n                  ease: \"easeOut\"\n                }}\n              >\n                {/* Pillar */}\n                <motion.div\n                  className={`\n                    relative cursor-pointer p-6 rounded-lg border border-silver-star/20\n                    bg-gradient-to-b ${pillar.bgGradient} backdrop-blur-sm\n                    transition-all duration-500 hover:border-silver-star/40\n                    ${activePillar === pillar.id ? 'scale-105' : ''}\n                    ${visitedPillars.has(pillar.id) ? 'border-golden-rune/30' : ''}\n                  `}\n                  onClick={() => handlePillarClick(pillar.id)}\n                  whileHover={{ \n                    y: -10,\n                    boxShadow: `0 20px 40px ${pillar.glowColor}`\n                  }}\n                  whileTap={{ scale: 0.98 }}\n                  data-testid={`pillar-${pillar.id}`}\n                >\n                  {/* Glow effect */}\n                  {activePillar === pillar.id && (\n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg\"\n                      style={{\n                        boxShadow: `inset 0 0 30px ${pillar.glowColor}, 0 0 50px ${pillar.glowColor}`\n                      }}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                    />\n                  )}\n                  \n                  {/* Icon */}\n                  <div className=\"flex justify-center mb-4\">\n                    <pillar.icon className=\"w-16 h-16 text-golden-rune\" />\n                  </div>\n                  \n                  {/* Title - Clickable Link */}\n                  <Link \n                    href={`/pillar${index + 1}-${pillar.id.replace('_', '-')}`}\n                    className=\"block\"\n                    data-testid={`link-pillar-${pillar.id}`}\n                  >\n                    <h3 className=\"font-gothic text-2xl text-golden-rune mb-2 text-center hover:text-silver-star transition-colors\">\n                      {pillar.title}\n                    </h3>\n                  </Link>\n                  \n                  {/* Subtitle */}\n                  <p className=\"text-silver-star/80 text-center font-medium\">\n                    {pillar.subtitle}\n                  </p>\n                  \n                  {/* Click indicator */}\n                  <div className=\"text-center mt-4\">\n                    <span className=\"text-silver-star/60 text-sm\">\n                      {activePillar === pillar.id ? \"Tap to close\" : \"Tap to reveal\"}\n                    </span>\n                  </div>\n                </motion.div>\n\n                {/* Description Overlay */}\n                <AnimatePresence>\n                  {activePillar === pillar.id && (\n                    <motion.div\n                      className=\"absolute inset-0 z-20 bg-gradient-to-b from-black/95 to-black/90 rounded-lg p-6 flex items-center justify-center\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                      transition={{ duration: 0.3 }}\n                      data-testid={`pillar-description-${pillar.id}`}\n                    >\n                      <div className=\"text-center\">\n                        <div className=\"flex justify-center mb-4\">\n                          <pillar.icon className=\"w-12 h-12 text-golden-rune\" />\n                        </div>\n                        <h4 className=\"font-gothic text-xl text-golden-rune mb-4\">\n                          {pillar.title}\n                        </h4>\n                        <p className=\"text-silver-star leading-relaxed\">\n                          {pillar.description}\n                        </p>\n                      </div>\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <motion.div\n          className=\"text-center mt-20\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1, delay: 1 }}\n        >\n          <h2 className=\"font-gothic text-3xl text-golden-rune mb-6\">\n            These are our foundations.\n          </h2>\n          <p className=\"text-xl text-silver-star/80 mb-8\">\n            Are you ready to remember?\n          </p>\n          <motion.button\n            onClick={() => setLocation('/remember')}\n            className=\"mystical-border bg-gradient-to-r from-shadow-purple to-deep-purple hover:from-deep-purple hover:to-shadow-purple px-8 py-3 rounded-lg font-gothic text-lg font-medium transition-all duration-500 cursor-pointer\"\n            whileHover={{ \n              scale: 1.05,\n              boxShadow: \"0 0 30px hsl(43, 74%, 49%, 0.3)\"\n            }}\n            whileTap={{ scale: 0.95 }}\n            data-testid=\"button-remember-cta\"\n          >\n            <span className=\"text-golden-rune\">Begin Your Journey</span>\n          </motion.button>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":15790},"client/src/pages/grimoire-detail.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { ArrowLeft, Plus, BookOpen, Calendar, Eye, Moon, Sparkles, Edit, Trash } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\nimport type { Grimoire, GrimoireEntry } from \"@shared/schema\";\n\nconst entryTypeIcons = {\n  spell: Sparkles,\n  ritual: Calendar,\n  meditation: Eye,\n  reflection: BookOpen,\n  dream: Moon,\n  divination: Calendar,\n  herbal: Sparkles,\n  crystal: Sparkles,\n  astrology: Moon\n};\n\nexport default function GrimoireDetail() {\n  const [match, params] = useRoute(\"/grimoires/:id\");\n  const [selectedTab, setSelectedTab] = useState(\"entries\");\n  \n  const grimoireId = params?.id;\n\n  const { data: grimoire, isLoading: grimoireLoading } = useQuery<Grimoire>({\n    queryKey: [\"/api/grimoires\", grimoireId],\n    enabled: !!grimoireId\n  });\n\n  const { data: entries = [], isLoading: entriesLoading } = useQuery<GrimoireEntry[]>({\n    queryKey: [\"/api/grimoire-entries\", grimoireId],\n    enabled: !!grimoireId\n  });\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  if (!match || !grimoireId) {\n    return <div>Grimoire not found</div>;\n  }\n\n  if (grimoireLoading) {\n    return (\n      <section \n        className=\"min-h-screen text-ethereal-white flex items-center justify-center\" \n        style={{\n          backgroundImage: `url(${mysticalChamberBg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundAttachment: 'fixed'\n        }}\n      >\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-golden-rune mx-auto mb-4\"></div>\n          <p className=\"text-silver-star\">Loading grimoire...</p>\n        </div>\n      </section>\n    );\n  }\n\n  const entriesByType = entries.reduce((acc, entry) => {\n    const type = entry.entryType || 'reflection';\n    if (!acc[type]) acc[type] = [];\n    acc[type].push(entry);\n    return acc;\n  }, {} as Record<string, GrimoireEntry[]>);\n\n  const renderEntryCard = (entry: GrimoireEntry) => {\n    const IconComponent = entryTypeIcons[entry.entryType as keyof typeof entryTypeIcons] || BookOpen;\n    \n    return (\n      <motion.div\n        key={entry.id}\n        className=\"mystical-border rounded-lg grimoire-texture p-4 hover:scale-105 transition-all duration-300\"\n        whileHover={{ y: -3 }}\n        data-testid={`card-entry-${entry.id}`}\n      >\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center\">\n            <IconComponent className=\"w-5 h-5 text-golden-rune mr-3\" />\n            <div>\n              <h3 className=\"text-lg font-semibold text-ethereal-white\">{entry.title}</h3>\n              <p className=\"text-sm text-silver-star/80 capitalize\">{entry.entryType}</p>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button size=\"sm\" variant=\"ghost\" className=\"text-silver-star hover:text-golden-rune p-1\">\n              <Edit className=\"w-4 h-4\" />\n            </Button>\n            <Button size=\"sm\" variant=\"ghost\" className=\"text-silver-star hover:text-red-400 p-1\">\n              <Trash className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <p className=\"text-silver-star/90 text-sm mb-3 line-clamp-3\">\n          {entry.content}\n        </p>\n\n        <div className=\"space-y-2 text-xs text-silver-star/70\">\n          {entry.mood && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"font-medium\">Mood:</span>\n              <Badge variant=\"outline\" className=\"text-xs border-silver-star/30\">\n                {entry.mood}\n              </Badge>\n            </div>\n          )}\n          {entry.moonPhase && (\n            <div className=\"flex items-center gap-2\">\n              <Moon className=\"w-3 h-3\" />\n              <span>{entry.moonPhase}</span>\n            </div>\n          )}\n          {entry.astrologicalSign && (\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-3 h-3\" />\n              <span>{entry.astrologicalSign}</span>\n            </div>\n          )}\n        </div>\n\n        {entry.tags && entry.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mt-3\">\n            {entry.tags.slice(0, 3).map((tag, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"text-xs bg-deep-purple/30 text-silver-star/80\">\n                {tag}\n              </Badge>\n            ))}\n            {entry.tags.length > 3 && (\n              <Badge variant=\"secondary\" className=\"text-xs bg-deep-purple/30 text-silver-star/80\">\n                +{entry.tags.length - 3}\n              </Badge>\n            )}\n          </div>\n        )}\n\n        <div className=\"text-xs text-silver-star/60 mt-3 text-right\">\n          {new Date(entry.createdAt).toLocaleDateString()}\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"grimoire-detail-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/60\"></div>\n      \n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          {/* Back Button */}\n          <motion.div {...fadeInUp} className=\"mb-8\">\n            <Link href=\"/grimoires\">\n              <Button \n                variant=\"ghost\" \n                className=\"text-golden-rune hover:text-silver-star transition-colors\"\n                data-testid=\"button-back-to-grimoires\"\n              >\n                <ArrowLeft className=\"mr-2 w-4 h-4\" />\n                Back to Grimoires\n              </Button>\n            </Link>\n          </motion.div>\n\n          {/* Header */}\n          <motion.div \n            className=\"text-center mb-12\"\n            {...fadeInUp}\n          >\n            <div className=\"flex items-center justify-center mb-6\">\n              {grimoire?.coverImage && (\n                <img \n                  src={grimoire.coverImage} \n                  alt={grimoire.title}\n                  className=\"w-24 h-32 object-cover rounded-lg border border-silver-star/30 mr-6\"\n                  data-testid=\"grimoire-cover-image\"\n                />\n              )}\n              <div>\n                <h1 className=\"font-gothic text-4xl md:text-5xl font-semibold mb-4 text-golden-rune\" data-testid=\"grimoire-title\">\n                  {grimoire?.title}\n                </h1>\n                <p className=\"text-lg text-silver-star/90 leading-relaxed max-w-2xl\">\n                  {grimoire?.description}\n                </p>\n                <Badge \n                  variant=\"secondary\" \n                  className=\"mt-3 bg-deep-purple/30 text-silver-star capitalize\"\n                  data-testid=\"grimoire-type-badge\"\n                >\n                  {grimoire?.type} grimoire\n                </Badge>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Action Buttons */}\n          <motion.div \n            className=\"flex justify-center gap-4 mb-12\"\n            {...fadeInUp}\n          >\n            <Link href={`/grimoires/${grimoireId}/create-entry`}>\n              <Button\n                className=\"bg-gradient-to-r from-golden-rune to-cosmic-blue hover:from-golden-rune/90 hover:to-cosmic-blue/90 text-void-black font-semibold px-6 py-2\"\n                data-testid=\"button-create-entry\"\n              >\n                <Plus className=\"mr-2 w-4 h-4\" />\n                Add New Entry\n              </Button>\n            </Link>\n            <Button\n              variant=\"outline\"\n              className=\"border-silver-star/50 text-silver-star hover:bg-silver-star/10\"\n              data-testid=\"button-edit-grimoire\"\n            >\n              <Edit className=\"mr-2 w-4 h-4\" />\n              Edit Grimoire\n            </Button>\n          </motion.div>\n\n          {/* Content Tabs */}\n          <motion.div {...fadeInUp}>\n            <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4 mb-8 bg-black/50 mystical-border max-w-2xl mx-auto\">\n                <TabsTrigger \n                  value=\"entries\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-entries\"\n                >\n                  <BookOpen className=\"mr-2 w-4 h-4\" />\n                  All Entries\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"recent\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-recent\"\n                >\n                  <Calendar className=\"mr-2 w-4 h-4\" />\n                  Recent\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"by-type\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-by-type\"\n                >\n                  <Sparkles className=\"mr-2 w-4 h-4\" />\n                  By Type\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"search\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-search\"\n                >\n                  <Eye className=\"mr-2 w-4 h-4\" />\n                  Search\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"entries\" className=\"space-y-6\">\n                {entries.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {entries.map(renderEntryCard)}\n                  </div>\n                ) : (\n                  <motion.div \n                    {...fadeInUp}\n                    className=\"text-center py-20 mystical-border rounded-xl grimoire-texture\"\n                  >\n                    <BookOpen className=\"w-16 h-16 text-silver-star/50 mx-auto mb-4\" />\n                    <h3 className=\"text-2xl text-silver-star mb-4\">Your grimoire awaits...</h3>\n                    <p className=\"text-silver-star/70 mb-6 max-w-md mx-auto\">\n                      Begin your mystical journey by creating your first entry. Document spells, reflections, dreams, and wisdom.\n                    </p>\n                    <Link href={`/grimoires/${grimoireId}/create-entry`}>\n                      <Button\n                        className=\"bg-gradient-to-r from-golden-rune to-cosmic-blue hover:from-golden-rune/90 hover:to-cosmic-blue/90 text-void-black font-semibold px-6 py-2\"\n                        data-testid=\"button-first-entry\"\n                      >\n                        <Plus className=\"mr-2 w-4 h-4\" />\n                        Create First Entry\n                      </Button>\n                    </Link>\n                  </motion.div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"recent\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {entries\n                    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n                    .slice(0, 9)\n                    .map(renderEntryCard)}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"by-type\" className=\"space-y-8\">\n                {Object.entries(entriesByType).map(([type, typeEntries]) => {\n                  const IconComponent = entryTypeIcons[type as keyof typeof entryTypeIcons] || BookOpen;\n                  return (\n                    <div key={type} className=\"space-y-4\">\n                      <div className=\"flex items-center mb-4\">\n                        <IconComponent className=\"w-6 h-6 text-golden-rune mr-3\" />\n                        <h3 className=\"text-xl font-semibold text-golden-rune capitalize\">\n                          {type} ({typeEntries.length})\n                        </h3>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        {typeEntries.map(renderEntryCard)}\n                      </div>\n                    </div>\n                  );\n                })}\n              </TabsContent>\n\n              <TabsContent value=\"search\" className=\"space-y-6\">\n                <div className=\"max-w-2xl mx-auto\">\n                  <div className=\"text-center py-12\">\n                    <Eye className=\"w-16 h-16 text-silver-star/50 mx-auto mb-4\" />\n                    <h3 className=\"text-xl text-silver-star mb-2\">Search Your Entries</h3>\n                    <p className=\"text-silver-star/70\">Search functionality coming soon...</p>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":13748},"client/src/pages/grimoires.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Plus, Book, BookOpen, Star, Circle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\nimport type { Grimoire } from \"@shared/schema\";\n\nconst grimoireTypeConfig = {\n  shadows: {\n    icon: Book,\n    label: \"Book of Shadows\",\n    description: \"Spells, rituals, and magical workings\",\n    color: \"from-deep-purple to-shadow-purple\",\n  },\n  mirrors: {\n    icon: Circle,\n    label: \"Book of Mirrors\", \n    description: \"Self-reflection, dreams, and inner work\",\n    color: \"from-silver-star/20 to-ethereal-white/10\",\n  },\n  stars: {\n    icon: Star,\n    label: \"Book of Stars\",\n    description: \"Astrology, divination, and cosmic wisdom\",\n    color: \"from-golden-rune/30 to-cosmic-blue/20\",\n  },\n};\n\nexport default function Grimoires() {\n  const [selectedType, setSelectedType] = useState<string | null>(null);\n\n  const { data: grimoires, isLoading } = useQuery<Grimoire[]>({\n    queryKey: [\"/api/grimoires\"],\n  });\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  const filteredGrimoires = selectedType \n    ? grimoires?.filter(g => g.type === selectedType)\n    : grimoires;\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"grimoires-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/50\"></div>\n\n      {/* Header */}\n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <motion.div \n            className=\"text-center mb-16\"\n            {...fadeInUp}\n          >\n            <h1 className=\"font-gothic text-4xl md:text-6xl font-semibold mb-6 text-golden-rune\" data-testid=\"grimoires-title\">\n              Sacred Grimoires\n            </h1>\n            <p className=\"text-xl md:text-2xl text-silver-star/90 leading-relaxed max-w-3xl mx-auto\" data-testid=\"grimoires-description\">\n              Create your personal digital books of wisdom, magic, and spiritual exploration\n            </p>\n          </motion.div>\n\n          {/* Create New Grimoire Button */}\n          <motion.div \n            className=\"text-center mb-12\"\n            {...fadeInUp}\n          >\n            <Link href=\"/grimoires/create\">\n              <Button\n                className=\"bg-gradient-to-r from-golden-rune to-cosmic-blue hover:from-golden-rune/90 hover:to-cosmic-blue/90 text-void-black font-semibold px-8 py-3\"\n                data-testid=\"button-create-grimoire\"\n              >\n                <Plus className=\"mr-2 w-5 h-5\" />\n                Create New Grimoire\n              </Button>\n            </Link>\n          </motion.div>\n\n          {/* Type Filter */}\n          <motion.div \n            className=\"flex flex-wrap justify-center gap-4 mb-12\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.3 }}\n          >\n            <Button\n              variant={selectedType === null ? \"default\" : \"outline\"}\n              onClick={() => setSelectedType(null)}\n              className=\"bg-gradient-to-r from-shadow-purple to-deep-purple hover:scale-105 transition-transform\"\n              data-testid=\"filter-all\"\n            >\n              All Grimoires\n            </Button>\n            {Object.entries(grimoireTypeConfig).map(([type, config]) => (\n              <Button\n                key={type}\n                variant={selectedType === type ? \"default\" : \"outline\"}\n                onClick={() => setSelectedType(type)}\n                className=\"bg-gradient-to-r from-shadow-purple to-deep-purple hover:scale-105 transition-transform\"\n                data-testid={`filter-${type}`}\n              >\n                <config.icon className=\"w-4 h-4 mr-2\" />\n                {config.label}\n              </Button>\n            ))}\n          </motion.div>\n\n          {/* Create New Grimoire */}\n          <motion.div\n            className=\"mb-12\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.5 }}\n          >\n            <Card className=\"mystical-border bg-black/60 border-golden-rune/50\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"font-gothic text-2xl text-golden-rune flex items-center justify-center\">\n                  <Plus className=\"w-6 h-6 mr-2\" />\n                  Begin a New Sacred Journey\n                </CardTitle>\n                <CardDescription className=\"text-silver-star/90\">\n                  Choose your path and create your first grimoire\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  {Object.entries(grimoireTypeConfig).map(([type, config]) => {\n                    const IconComponent = config.icon;\n                    return (\n                      <motion.div\n                        key={type}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <Card \n                          className={`mystical-border bg-gradient-to-br ${config.color} cursor-pointer hover:shadow-lg hover:shadow-golden-rune/20 transition-all`}\n                          onClick={() => window.location.href = `/grimoires/create?type=${type}`}\n                          data-testid={`create-${type}`}\n                        >\n                          <CardContent className=\"p-6 text-center\">\n                            <IconComponent className=\"w-12 h-12 mx-auto mb-4 text-golden-rune\" />\n                            <h3 className=\"font-gothic text-xl font-semibold mb-2 text-ethereal-white\">\n                              {config.label}\n                            </h3>\n                            <p className=\"text-sm text-silver-star/90\">\n                              {config.description}\n                            </p>\n                          </CardContent>\n                        </Card>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Grimoires List */}\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-2 border-golden-rune border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-silver-star\">Loading your sacred books...</p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredGrimoires?.map((grimoire, index) => {\n                const config = grimoireTypeConfig[grimoire.type as keyof typeof grimoireTypeConfig];\n                const IconComponent = config?.icon || BookOpen;\n                \n                return (\n                  <motion.div\n                    key={grimoire.id}\n                    initial={{ opacity: 0, y: 30 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 1, delay: index * 0.1 }}\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <Card \n                      className=\"mystical-border bg-black/60 border-golden-rune/30 hover:border-golden-rune/60 cursor-pointer transition-all h-full\"\n                      onClick={() => window.location.href = `/grimoires/${grimoire.id}`}\n                      data-testid={`grimoire-${grimoire.id}`}\n                    >\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <IconComponent className=\"w-6 h-6 text-golden-rune\" />\n                          <Badge variant=\"outline\" className=\"text-silver-star border-silver-star/30\">\n                            {config?.label || grimoire.type}\n                          </Badge>\n                        </div>\n                        <CardTitle className=\"font-gothic text-xl text-ethereal-white\">\n                          {grimoire.title}\n                        </CardTitle>\n                        {grimoire.description && (\n                          <CardDescription className=\"text-silver-star/80\">\n                            {grimoire.description}\n                          </CardDescription>\n                        )}\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex justify-between items-center text-sm text-silver-star/60\">\n                          <span>Created {new Date(grimoire.createdAt).toLocaleDateString()}</span>\n                          <span>{grimoire.isPublic === \"true\" ? \"Public\" : \"Private\"}</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                );\n              })}\n\n              {filteredGrimoires?.length === 0 && (\n                <div className=\"col-span-full text-center py-16\">\n                  <BookOpen className=\"w-16 h-16 mx-auto mb-4 text-golden-rune/50\" />\n                  <h3 className=\"font-gothic text-2xl text-silver-star mb-2\">No grimoires yet</h3>\n                  <p className=\"text-silver-star/70 mb-6\">Begin your sacred practice by creating your first grimoire</p>\n                  <Button\n                    onClick={() => window.location.href = '/grimoires/create'}\n                    className=\"bg-gradient-to-r from-shadow-purple to-deep-purple hover:scale-105 transition-transform\"\n                    data-testid=\"button-create-first\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Grimoire\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":10542},"client/src/pages/landing.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport BreathingTaglines from \"@/components/breathing-taglines\";\nimport MysticalSymbol from \"@/components/mystical-symbol\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n  const [showCTA, setShowCTA] = useState(false);\n\n  const handleRemember = () => {\n    setLocation(\"/remember\");\n  };\n\n  const handleTaglinesComplete = () => {\n    setShowCTA(true);\n  };\n\n  return (\n    <section \n      className=\"min-h-screen flex items-center justify-center relative\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"landing-section\"\n    >\n      <div className=\"overlay-dark absolute inset-0\"></div>\n      <div className=\"starfield absolute inset-0\"></div>\n      \n      {/* Static mystical particles */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-1/4 left-1/4 w-2 h-2 bg-golden-rune rounded-full opacity-70\" />\n        <div className=\"absolute top-3/4 right-1/3 w-1 h-1 bg-silver-star rounded-full opacity-60\" />\n        <div className=\"absolute top-1/2 left-3/4 w-1.5 h-1.5 bg-golden-rune rounded-full opacity-80\" />\n        <div className=\"absolute top-1/6 right-1/4 w-1 h-1 bg-silver-star rounded-full opacity-50\" />\n        <div className=\"absolute top-2/3 left-1/6 w-1 h-1 bg-golden-rune rounded-full opacity-60\" />\n        <div className=\"absolute top-1/3 right-2/3 w-0.5 h-0.5 bg-silver-star rounded-full opacity-70\" />\n      </div>\n      \n      <div className=\"relative z-10 text-center max-w-4xl mx-auto px-6\">\n        {/* Mystical Logo/Symbol */}\n        <div className=\"mb-12 relative\">\n          <MysticalSymbol />\n          {/* Hidden admin access area - invisible click zone near the logo */}\n          <div \n            className=\"absolute -top-4 -right-4 w-12 h-12 cursor-pointer opacity-0 hover:opacity-20 hover:bg-golden-rune/30 rounded-full transition-opacity z-50\"\n            onClick={() => setLocation(\"/athenaeum/login\")}\n            title=\"⚡\"\n          />\n        </div>\n        \n        {/* Breathing Taglines */}\n        <BreathingTaglines onComplete={handleTaglinesComplete} />\n        \n        {/* CTA Button */}\n        <AnimatePresence>\n          {showCTA && (\n            <motion.div\n              className=\"mt-16\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 1, ease: \"easeOut\" }}\n              data-testid=\"cta-container\"\n            >\n              <motion.button\n                onClick={handleRemember}\n                className=\"mystical-border bg-gradient-to-r from-shadow-purple to-deep-purple hover:from-deep-purple hover:to-shadow-purple px-12 py-4 rounded-lg font-gothic text-xl font-medium transition-all duration-500\"\n                whileHover={{ \n                  scale: 1.05,\n                  boxShadow: \"0 0 30px hsl(43, 74%, 49%, 0.3)\"\n                }}\n                whileTap={{ scale: 0.95 }}\n                data-testid=\"button-remember\"\n              >\n                <span className=\"text-golden-rune\">Are you ready to remember?</span>\n              </motion.button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3570},"client/src/pages/main-content.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ExternalLink, Calendar, BookOpen, Star, Sprout, Infinity, Gem, Flame, Crown } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport NewsletterForm from \"@/components/newsletter-form\";\nimport logoImage from \"@assets/ChatGPT Image Aug 18, 2025, 12_50_00 AM_1755500285103.webp\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\nimport athenaeumBackground from \"@assets/ChatGPT Image Aug 18, 2025, 06_11_32 PM_1755562381522.webp\";\n\nexport default function MainContent() {\n  const [, setLocation] = useLocation();\n  \n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"main-content-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/40\"></div>\n      {/* Navigation */}\n      <nav className=\"relative sticky top-0 z-50 grimoire-texture border-b border-golden-rune/30 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <motion.div \n              className=\"flex items-center\"\n              {...fadeInUp}\n            >\n              <img \n                src={logoImage} \n                alt=\"Jakintza Ruha Logo\" \n                className=\"h-10 w-auto object-contain drop-shadow-[0_0_15px_rgba(184,134,11,0.3)]\"\n              />\n            </motion.div>\n            <div className=\"hidden md:flex space-x-8\">\n              <a href=\"#story\" className=\"hover:text-golden-rune transition-colors\" data-testid=\"link-story\">The Story</a>\n              <a href=\"#movement\" className=\"hover:text-golden-rune transition-colors\" data-testid=\"link-movement\">The Movement</a>\n              <Link href=\"/four-pillars\" className=\"hover:text-golden-rune transition-colors\" data-testid=\"link-four-pillars\">Four Pillars</Link>\n              <Link href=\"/aionara\" className=\"hover:text-golden-rune transition-colors\" data-testid=\"link-aionara\">Aionara</Link>\n              <a href=\"#athenaeum\" className=\"hover:text-golden-rune transition-colors\" data-testid=\"link-athenaeum\">Athenaeum</a>\n              <a href=\"#contact\" className=\"hover:text-golden-rune transition-colors\" data-testid=\"link-contact\">Connect</a>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-4xl mx-auto px-6 text-center\">\n          <motion.h2\n            className=\"font-gothic text-4xl md:text-6xl font-semibold mb-8\"\n            {...fadeInUp}\n            data-testid=\"hero-title\"\n          >\n            The <span className=\"text-golden-rune\">Sacred</span> Remembering\n          </motion.h2>\n          <motion.p\n            className=\"text-xl md:text-2xl text-silver-star/90 leading-relaxed\"\n            {...fadeInUp}\n            style={{ animationDelay: \"0.3s\" }}\n            data-testid=\"hero-description\"\n          >\n            Where ancient wisdom meets modern awakening, and every soul finds its way back home.\n          </motion.p>\n        </div>\n      </div>\n\n      {/* The Meaning Section */}\n      <div id=\"meaning\" className=\"py-16 relative z-10\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <motion.div \n              className=\"space-y-8\"\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.5 }}\n            >\n              <h3 className=\"font-gothic text-3xl md:text-4xl font-semibold text-golden-rune\" data-testid=\"meaning-title\">\n                The Sacred Names\n              </h3>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n                <div className=\"mystical-border p-6 rounded-lg grimoire-texture\" data-testid=\"card-jakintza\">\n                  <h4 className=\"font-gothic text-2xl text-silver-star mb-3\">Jakintza</h4>\n                  <p className=\"text-ethereal-white/80\">\"Wisdom\" in Basque — the ancient knowing that flows through bloodlines and whispers in the wind. It carries the weight of ancestral memory and the understanding that transcends books and institutions.</p>\n                </div>\n                <div className=\"mystical-border p-6 rounded-lg grimoire-texture\" data-testid=\"card-ruha\">\n                  <h4 className=\"font-gothic text-2xl text-silver-star mb-3\">Ruha</h4>\n                  <p className=\"text-ethereal-white/80\">\"Spirit\" or \"breath\" — the sacred life force that was nearly stolen, now reclaimed and shared. The divine essence that animates all living things and connects us to the cosmic breath of the universe.</p>\n                </div>\n              </div>\n            </motion.div>\n\n          </div>\n        </div>\n      </div>\n\n      {/* The Story Section */}\n      <div id=\"story\" className=\"py-20 relative z-10\">\n        <div className=\"max-w-4xl mx-auto px-6\">\n          <motion.h3\n            className=\"font-gothic text-4xl md:text-5xl font-semibold text-center mb-16 text-golden-rune\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n            data-testid=\"story-title\"\n          >\n            A Soul's Testimony\n          </motion.h3>\n          \n          <motion.div \n            className=\"space-y-8 text-lg leading-relaxed\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.3 }}\n            viewport={{ once: true }}\n          >\n            <div className=\"mystical-border p-8 rounded-lg grimoire-texture\" data-testid=\"story-content\">\n              <p className=\"mb-6 font-gothic text-xl text-silver-star italic\">\n                \"I was born into Catholicism — baptized, blessed, and handed a Bible before I ever had the language to say no. I was raised to kneel, to obey, to fear. But even as a child, something ancient stirred in me — something wild and unscripted.\"\n              </p>\n              \n              <p className=\"mb-6\">\n                At fourteen, I bought my first oracle deck and hid it under my bed like it was contraband and sacred all at once. I printed spells off a dusty old website like they were scripture for girls like me — girls who heard whispers in the wind and knew the moon was more than a rock in the sky.\n              </p>\n              \n              <p className=\"mb-6\">\n                They called me the \"witchy girl\" in school. I wore that like armor.\n              </p>\n              \n              <p className=\"mb-6\">\n                But then I fell in love. And love, when you don't know yourself yet, can be a dangerous thing. My ex-husband looked at my altar like it was a battlefield. My crystals, my cards, my spells — he called it all evil. And when you're young and trying to belong, you believe love means sacrifice.\n              </p>\n              \n              <p className=\"mb-6 text-golden-rune font-semibold\">\n                So I threw it all away.\n              </p>\n              \n              <p className=\"mb-6\">\n                From 19 to 23, I was deep in church — not just Sunday services, but full-on revival hours, twice a week. Hands raised. Voices crying out. And me, trying to smother the fire inside of me with gospel and good-girl guilt.\n              </p>\n              \n              <p className=\"mb-6 font-gothic text-xl text-silver-star italic\">\n                \"But the truth? I didn't feel saved. I felt erased. Their God was too small for my spirit. Their heaven too far removed from the earth I loved. I didn't want salvation — I wanted sovereignty.\"\n              </p>\n              \n              <p className=\"mb-6\">\n                And that's when I started remembering. Piece by piece, breath by breath — I reclaimed her. The witchy girl. The one who danced under the stars and called it prayer. The one who whispered to fire and felt her ancestors whisper back.\n              </p>\n              \n              <p className=\"text-golden-rune font-gothic text-xl font-semibold\">\n                And that is when Jakintza Ruha was born.\n              </p>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* The Movement Section */}\n<div id=\"movement\" className=\"py-20 relative z-10\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <motion.h3\n            className=\"font-gothic text-4xl md:text-5xl font-semibold text-center mb-16 text-golden-rune\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n            data-testid=\"movement-title\"\n          >\n            The Sacred Movement\n          </motion.h3>\n          \n          <div className=\"grid md:grid-cols-2 gap-12\">\n            <motion.div \n              className=\"space-y-8\"\n              initial={{ opacity: 0, x: -30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.2 }}\n              viewport={{ once: true }}\n            >\n              <div className=\"mystical-border p-6 rounded-lg grimoire-texture\" data-testid=\"card-remembering\">\n                <h4 className=\"font-gothic text-2xl text-golden-rune mb-4 flex items-center\">\n                  <Sprout className=\"mr-3\" />\n                  Remembering & Reclaiming\n                </h4>\n                <p className=\"text-ethereal-white/90\">\n                  We stand against cultural appropriation, forced assimilation, cultural imperialism, and erasure. We reclaim our ancestral wisdom and sacred practices.\n                </p>\n              </div>\n              \n              <div className=\"mystical-border p-6 rounded-lg grimoire-texture\" data-testid=\"card-integration\">\n                <h4 className=\"font-gothic text-2xl text-golden-rune mb-4 flex items-center\">\n                  <Infinity className=\"mr-3\" />\n                  Sacred Integration\n                </h4>\n                <p className=\"text-ethereal-white/90\">\n                  Spell work, witchcraft, and rituals walk hand in hand with ascension and Christ consciousness. All paths lead to the divine within.\n                </p>\n              </div>\n            </motion.div>\n            \n            <motion.div \n              className=\"space-y-8\"\n              initial={{ opacity: 0, x: 30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.4 }}\n              viewport={{ once: true }}\n            >\n              <div className=\"mystical-border p-6 rounded-lg grimoire-texture\" data-testid=\"card-wisdom\">\n                <h4 className=\"font-gothic text-2xl text-golden-rune mb-4 flex items-center\">\n                  <Gem className=\"mr-3\" />\n                  Ancient Wisdom\n                </h4>\n                <p className=\"text-ethereal-white/90\">\n                  Crystals, herbs, astrology, and sacred rituals — the tools our ancestors used to commune with the divine and heal the world.\n                </p>\n              </div>\n              \n              <div className=\"mystical-border p-6 rounded-lg grimoire-texture\" data-testid=\"card-persecution\">\n                <h4 className=\"font-gothic text-2xl text-golden-rune mb-4 flex items-center\">\n                  <Flame className=\"mr-3\" />\n                  Ending Persecution\n                </h4>\n                <p className=\"text-ethereal-white/90\">\n                  No more burning at the altar of someone else's god. We create safe spaces for magic, wisdom, and spiritual sovereignty.\n                </p>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n\n      {/* The Athenaeum Section */}\n      <div \n        id=\"athenaeum\" \n        className=\"py-20 relative z-10\"\n        style={{\n          backgroundImage: `url(${athenaeumBackground})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundAttachment: 'fixed'\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black/50\"></div>\n        <div className=\"max-w-4xl mx-auto px-6 text-center relative z-10\">\n          <motion.h3\n            className=\"font-gothic text-4xl md:text-5xl font-semibold mb-8 text-golden-rune\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n            data-testid=\"athenaeum-title\"\n          >\n            The Athenaeum\n          </motion.h3>\n          <motion.p\n            className=\"text-xl text-silver-star/90 mb-12 leading-relaxed\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.2 }}\n            viewport={{ once: true }}\n            data-testid=\"athenaeum-description\"\n          >\n            A sacred repository of wisdom, where ancient knowledge meets modern practice.\n          </motion.p>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            <motion.div \n              className=\"mystical-border p-6 rounded-lg grimoire-texture\"\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 1, delay: 0.3 }}\n              viewport={{ once: true }}\n              data-testid=\"card-calendar\"\n            >\n              <h4 className=\"font-gothic text-xl text-golden-rune mb-3\">\n                <Calendar className=\"inline mr-2 w-5 h-5\" />\n                Living Calendar\n              </h4>\n              <p className=\"text-ethereal-white/90 mb-4 text-sm\">\n                Track lunar cycles and planetary alignments.\n              </p>\n              <button\n                onClick={(e) => {\n                  console.log(\"Calendar button clicked!\");\n                  e.preventDefault();\n                  e.stopPropagation();\n                  window.location.href = \"/astro-calendar\";\n                }}\n                className=\"inline-flex items-center bg-gradient-to-r from-shadow-purple to-deep-purple px-4 py-2 rounded-lg hover:scale-105 transition-transform text-sm text-ethereal-white hover:text-golden-rune cursor-pointer relative z-50\"\n                data-testid=\"button-calendar\"\n                style={{ pointerEvents: 'auto' }}\n              >\n                Explore Calendar\n              </button>\n            </motion.div>\n            \n            <motion.div \n              className=\"mystical-border p-6 rounded-lg grimoire-texture\"\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 1, delay: 0.4 }}\n              viewport={{ once: true }}\n              data-testid=\"card-grimoire\"\n            >\n              <h4 className=\"font-gothic text-xl text-golden-rune mb-3\">\n                <BookOpen className=\"inline mr-2 w-5 h-5\" />\n                Virtual Grimoire\n              </h4>\n              <p className=\"text-ethereal-white/90 mb-4 text-sm\">\n                Your digital Book of Shadows, Mirrors, or Stars.\n              </p>\n              <button\n                onClick={(e) => {\n                  console.log(\"Grimoire button clicked!\");\n                  e.preventDefault();\n                  e.stopPropagation();\n                  window.location.href = \"/grimoires\";\n                }}\n                className=\"inline-flex items-center bg-gradient-to-r from-shadow-purple to-deep-purple px-4 py-2 rounded-lg hover:scale-105 transition-transform text-sm text-ethereal-white hover:text-golden-rune cursor-pointer relative z-50\"\n                data-testid=\"button-grimoire\"\n                style={{ pointerEvents: 'auto' }}\n              >\n                Enter Sacred Space\n              </button>\n            </motion.div>\n\n            <motion.div \n              className=\"mystical-border p-6 rounded-lg grimoire-texture\"\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 1, delay: 0.5 }}\n              viewport={{ once: true }}\n              data-testid=\"card-alchemy\"\n            >\n              <h4 className=\"font-gothic text-xl text-golden-rune mb-3\">\n                <Flame className=\"inline mr-2 w-5 h-5\" />\n                Sacred Alchemy\n              </h4>\n              <p className=\"text-ethereal-white/90 mb-4 text-sm\">\n                The four strands of transformation and elemental wisdom.\n              </p>\n              <button\n                onClick={(e) => {\n                  console.log(\"Alchemy button clicked!\");\n                  e.preventDefault();\n                  e.stopPropagation();\n                  window.location.href = \"/alchemy\";\n                }}\n                className=\"inline-flex items-center bg-gradient-to-r from-shadow-purple to-deep-purple px-4 py-2 rounded-lg hover:scale-105 transition-transform text-sm text-ethereal-white hover:text-golden-rune cursor-pointer relative z-50\"\n                data-testid=\"button-alchemy\"\n                style={{ pointerEvents: 'auto' }}\n              >\n                Study Alchemy\n              </button>\n            </motion.div>\n\n            <motion.div \n              className=\"mystical-border p-6 rounded-lg grimoire-texture\"\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 1, delay: 0.6 }}\n              viewport={{ once: true }}\n              data-testid=\"card-deity-codex\"\n            >\n              <h4 className=\"font-gothic text-xl text-golden-rune mb-3\">\n                <Crown className=\"inline mr-2 w-5 h-5\" />\n                Deity Codex\n              </h4>\n              <p className=\"text-ethereal-white/90 mb-4 text-sm\">\n                Sacred repository of divine beings and pantheons.\n              </p>\n              <button\n                onClick={(e) => {\n                  console.log(\"Deity Codex button clicked!\");\n                  e.preventDefault();\n                  e.stopPropagation();\n                  window.location.href = \"/deity-codex\";\n                }}\n                className=\"inline-flex items-center bg-gradient-to-r from-shadow-purple to-deep-purple px-4 py-2 rounded-lg hover:scale-105 transition-transform text-sm text-ethereal-white hover:text-golden-rune cursor-pointer relative z-50\"\n                data-testid=\"button-deity-codex\"\n                style={{ pointerEvents: 'auto' }}\n              >\n                Explore Codex\n              </button>\n            </motion.div>\n          </div>\n          \n          <motion.div \n            className=\"mystical-border p-8 rounded-lg grimoire-texture bg-gradient-to-br from-shadow-purple/20 to-deep-purple/20\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.7 }}\n            viewport={{ once: true }}\n            data-testid=\"card-full-athenaeum\"\n          >\n            <h4 className=\"font-gothic text-3xl text-golden-rune mb-4\">\n              <Star className=\"inline mr-3\" />\n              Full Athenaeum\n            </h4>\n            <p className=\"text-xl text-silver-star/90 mb-6\">\n              The complete spiritual academy - your cosmic library-school awaits. Two sacred wings of learning: the Sanctum of Hidden Echoes and the Orrery of Obscured Realms.\n            </p>\n            <Link href=\"/athenaeum\">\n              <button className=\"inline-flex items-center bg-gradient-to-r from-mystical-600 to-ethereal-600 hover:from-mystical-500 hover:to-ethereal-500 px-6 py-3 rounded-lg hover:scale-105 transition-transform text-lg text-ethereal-white hover:text-golden-rune cursor-pointer relative z-50 mystical-glow\">\n                Enter the Athenaeum\n              </button>\n            </Link>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Newsletter Section */}\n      <div id=\"contact\" className=\"py-20 relative z-20\">\n        <div className=\"max-w-2xl mx-auto px-6 text-center\">\n          <motion.h3\n            className=\"font-gothic text-4xl md:text-5xl font-semibold mb-8 text-golden-rune\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n            data-testid=\"newsletter-title\"\n          >\n            Join the Remembering\n          </motion.h3>\n          <motion.p\n            className=\"text-xl text-silver-star/90 mb-12 leading-relaxed\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.2 }}\n            viewport={{ once: true }}\n            data-testid=\"newsletter-description\"\n          >\n            Receive sacred wisdom, lunar updates, and magical insights directly in your inbox.\n          </motion.p>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.4 }}\n            viewport={{ once: true }}\n            className=\"relative z-30\"\n            style={{ pointerEvents: 'auto' }}\n          >\n            <NewsletterForm />\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-golden-rune/30 py-12 grimoire-texture relative z-10\">\n        <div className=\"max-w-4xl mx-auto px-6 text-center\">\n          <div className=\"mb-8\">\n            <div className=\"font-gothic text-3xl font-semibold mb-4\" data-testid=\"footer-title\">\n              <span className=\"text-golden-rune\">Jakintza</span>{\" \"}\n              <span className=\"text-silver-star\">Ruha</span>\n            </div>\n            <p className=\"text-silver-star/80 italic\" data-testid=\"footer-quote\">\n              \"This is my legacy. My rebellion. My remembering. And I am never throwing it away again.\"\n            </p>\n          </div>\n          \n          <div className=\"flex justify-center space-x-8 text-sm text-silver-star/70\" data-testid=\"footer-copyright\">\n            <span>© 2024 Jakintza Ruha</span>\n            <span>•</span>\n            <span>Where Wisdom Becomes Magic</span>\n          </div>\n        </div>\n      </footer>\n    </section>\n  );\n}\n","size_bytes":22853},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport mysticalChamberBg from \"@assets/ChatGPT Image Aug 18, 2025, 12_54_24 AM_1755531868254.webp\";\n\nexport default function NotFound() {\n  return (\n    <div \n      className=\"min-h-screen w-full flex items-center justify-center\"\n      style={{\n        backgroundImage: `url(${mysticalChamberBg})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/60\"></div>\n      <Card className=\"w-full max-w-md mx-4 relative z-10 bg-black/80 border-golden-rune/50\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-golden-rune\" />\n            <h1 className=\"text-2xl font-bold text-ethereal-white font-gothic\">404 - Path Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-silver-star/90\">\n            The sacred path you seek does not exist in this realm. Return to the light of remembering.\n          </p>\n          \n          <div className=\"mt-6\">\n            <Link \n              href=\"/\" \n              className=\"bg-gradient-to-r from-shadow-purple to-deep-purple px-6 py-3 rounded-lg hover:scale-105 transition-transform text-ethereal-white\"\n              data-testid=\"button-return-home\"\n            >\n              Return to the Sacred Circle\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1594},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/storage-database.ts":{"content":"import { type User, type InsertUser, type Newsletter, type InsertNewsletter, type Grimoire, type InsertGrimoire, type GrimoireEntry, type InsertGrimoireEntry, type Deity, type InsertDeity, type SacredEvent, type InsertSacredEvent, type YearlyConfiguration, type InsertYearlyConfiguration } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { users, newsletters, grimoires, grimoireEntries, deities, sacredEvents, yearlyConfigurations } from \"@shared/schema\";\nimport { eq, and, ilike, or } from \"drizzle-orm\";\nimport type { IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Newsletter methods\n  async createNewsletterSubscription(newsletter: InsertNewsletter): Promise<Newsletter> {\n    const [newSubscription] = await db.insert(newsletters).values(newsletter).returning();\n    return newSubscription;\n  }\n\n  async getNewsletterByEmail(email: string): Promise<Newsletter | undefined> {\n    const [subscription] = await db.select().from(newsletters).where(eq(newsletters.email, email));\n    return subscription || undefined;\n  }\n\n  async getAllNewsletterSubscriptions(): Promise<Newsletter[]> {\n    return await db.select().from(newsletters);\n  }\n\n  // Grimoire methods\n  async getAllGrimoires(): Promise<Grimoire[]> {\n    return await db.select().from(grimoires);\n  }\n\n  async getGrimoire(id: string): Promise<Grimoire | undefined> {\n    const [grimoire] = await db.select().from(grimoires).where(eq(grimoires.id, id));\n    return grimoire || undefined;\n  }\n\n  async createGrimoire(insertGrimoire: InsertGrimoire): Promise<Grimoire> {\n    const [grimoire] = await db.insert(grimoires).values({\n      ...insertGrimoire,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }).returning();\n    return grimoire;\n  }\n\n  async updateGrimoire(id: string, updateData: Partial<InsertGrimoire>): Promise<Grimoire | undefined> {\n    const [updated] = await db.update(grimoires)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(grimoires.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteGrimoire(id: string): Promise<boolean> {\n    const result = await db.delete(grimoires).where(eq(grimoires.id, id));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  // Grimoire entry methods\n  async getGrimoireEntries(grimoireId: string): Promise<GrimoireEntry[]> {\n    return await db.select().from(grimoireEntries).where(eq(grimoireEntries.grimoireId, grimoireId));\n  }\n\n  async getGrimoireEntry(id: string): Promise<GrimoireEntry | undefined> {\n    const [entry] = await db.select().from(grimoireEntries).where(eq(grimoireEntries.id, id));\n    return entry || undefined;\n  }\n\n  async createGrimoireEntry(insertEntry: InsertGrimoireEntry): Promise<GrimoireEntry> {\n    const [entry] = await db.insert(grimoireEntries).values({\n      ...insertEntry,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }).returning();\n    return entry;\n  }\n\n  async updateGrimoireEntry(id: string, updateData: Partial<InsertGrimoireEntry>): Promise<GrimoireEntry | undefined> {\n    const [updated] = await db.update(grimoireEntries)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(grimoireEntries.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteGrimoireEntry(id: string): Promise<boolean> {\n    const result = await db.delete(grimoireEntries).where(eq(grimoireEntries.id, id));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  // Deity methods\n  async getAllDeities(): Promise<Deity[]> {\n    return await db.select().from(deities);\n  }\n\n  async getDeity(id: string): Promise<Deity | undefined> {\n    const [deity] = await db.select().from(deities).where(eq(deities.id, id));\n    return deity || undefined;\n  }\n\n  async createDeity(insertDeity: InsertDeity): Promise<Deity> {\n    const [deity] = await db.insert(deities).values(insertDeity).returning();\n    return deity;\n  }\n\n  async updateDeity(id: string, updateData: Partial<InsertDeity>): Promise<Deity | undefined> {\n    const [updated] = await db.update(deities)\n      .set(updateData)\n      .where(eq(deities.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteDeity(id: string): Promise<boolean> {\n    const result = await db.delete(deities).where(eq(deities.id, id));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  async searchDeities(query: string): Promise<Deity[]> {\n    const searchTerm = `%${query}%`;\n    return await db.select().from(deities).where(\n      or(\n        ilike(deities.name, searchTerm),\n        ilike(deities.culture, searchTerm),\n        ilike(deities.whyMatters, searchTerm)\n      )\n    );\n  }\n\n  async filterDeities(filters: { culture?: string; domain?: string; element?: string; }): Promise<Deity[]> {\n    let query = db.select().from(deities);\n    \n    if (filters.culture) {\n      query = query.where(eq(deities.culture, filters.culture));\n    }\n    \n    return await query;\n  }\n\n  async importDeities(insertDeities: InsertDeity[]): Promise<Deity[]> {\n    if (insertDeities.length === 0) return [];\n    const imported = await db.insert(deities).values(insertDeities).returning();\n    return imported;\n  }\n\n  // Sacred Events methods\n  async getAllSacredEvents(): Promise<SacredEvent[]> {\n    return await db.select().from(sacredEvents);\n  }\n\n  async getSacredEvent(id: string): Promise<SacredEvent | undefined> {\n    const [event] = await db.select().from(sacredEvents).where(eq(sacredEvents.id, id));\n    return event || undefined;\n  }\n\n  async createSacredEvent(insertEvent: InsertSacredEvent): Promise<SacredEvent> {\n    const [event] = await db.insert(sacredEvents).values({\n      ...insertEvent,\n      createdAt: new Date()\n    }).returning();\n    return event;\n  }\n\n  async updateSacredEvent(id: string, updateData: Partial<InsertSacredEvent>): Promise<SacredEvent | undefined> {\n    const [updated] = await db.update(sacredEvents)\n      .set(updateData)\n      .where(eq(sacredEvents.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteSacredEvent(id: string): Promise<boolean> {\n    const result = await db.delete(sacredEvents).where(eq(sacredEvents.id, id));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  async getSacredEventsByCategory(category: string): Promise<SacredEvent[]> {\n    return await db.select().from(sacredEvents).where(eq(sacredEvents.category, category));\n  }\n\n  async getSacredEventsByDateRange(startDate: string, endDate: string): Promise<SacredEvent[]> {\n    return await db.select().from(sacredEvents).where(\n      and(\n        eq(sacredEvents.startDate, startDate),\n        eq(sacredEvents.endDate, endDate)\n      )\n    );\n  }\n\n  // Yearly Configuration methods\n  async getYearlyConfiguration(year: string): Promise<YearlyConfiguration | undefined> {\n    const [config] = await db.select().from(yearlyConfigurations).where(eq(yearlyConfigurations.year, year));\n    return config || undefined;\n  }\n\n  async createYearlyConfiguration(insertConfig: InsertYearlyConfiguration): Promise<YearlyConfiguration> {\n    const [config] = await db.insert(yearlyConfigurations).values({\n      ...insertConfig,\n      createdAt: new Date()\n    }).returning();\n    return config;\n  }\n\n  async updateYearlyConfiguration(year: string, updateData: Partial<InsertYearlyConfiguration>): Promise<YearlyConfiguration | undefined> {\n    const [updated] = await db.update(yearlyConfigurations)\n      .set(updateData)\n      .where(eq(yearlyConfigurations.year, year))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getAllYearlyConfigurations(): Promise<YearlyConfiguration[]> {\n    return await db.select().from(yearlyConfigurations);\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":8309},"shared/athenaeum-schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  xp: integer(\"xp\").notNull().default(0),\n  level: varchar(\"level\").notNull().default(\"Neophyte\"),\n  elementalPath: varchar(\"elemental_path\").default(\"mixed\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").notNull().unique(), // SE-101, OR-102, etc.\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  wing: varchar(\"wing\").notNull(), // \"sanctum\" or \"orrery\"\n  level: integer(\"level\").default(100), // 100, 200, 300, 400\n  xpReward: integer(\"xp_reward\").default(0),\n  isElective: boolean(\"is_elective\").default(false),\n  prerequisites: text(\"prerequisites\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const lessons = pgTable(\"lessons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id),\n  title: text(\"title\").notNull(),\n  content: text(\"content\"),\n  order: integer(\"order\").default(0),\n  xpReward: integer(\"xp_reward\").default(25),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const enrollments = pgTable(\"enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  courseId: varchar(\"course_id\").references(() => courses.id),\n  status: varchar(\"status\").default(\"enrolled\"), // enrolled, completed, dropped\n  progress: integer(\"progress\").default(0), // percentage 0-100\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const badges = pgTable(\"badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  wing: varchar(\"wing\"), // sanctum, orrery, or null for cross-wing\n  iconClass: varchar(\"icon_class\"),\n  requirements: jsonb(\"requirements\"), // JSON object defining requirements\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userBadges = pgTable(\"user_badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  badgeId: varchar(\"badge_id\").references(() => badges.id),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n});\n\nexport const certificates = pgTable(\"certificates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  courseId: varchar(\"course_id\").references(() => courses.id),\n  badgeId: varchar(\"badge_id\").references(() => badges.id),\n  type: varchar(\"type\").notNull(), // \"course\", \"badge\", \"level\"\n  issuedAt: timestamp(\"issued_at\").defaultNow(),\n});\n\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  courseId: varchar(\"course_id\").references(() => courses.id),\n  lessonId: varchar(\"lesson_id\").references(() => lessons.id),\n  content: text(\"content\"),\n  xpAwarded: integer(\"xp_awarded\").default(10),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  enrollments: many(enrollments),\n  userBadges: many(userBadges),\n  certificates: many(certificates),\n  journalEntries: many(journalEntries),\n}));\n\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  lessons: many(lessons),\n  enrollments: many(enrollments),\n  certificates: many(certificates),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [lessons.courseId],\n    references: [courses.id],\n  }),\n  journalEntries: many(journalEntries),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  user: one(users, {\n    fields: [enrollments.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [enrollments.courseId],\n    references: [courses.id],\n  }),\n}));\n\nexport const badgesRelations = relations(badges, ({ many }) => ({\n  userBadges: many(userBadges),\n  certificates: many(certificates),\n}));\n\nexport const userBadgesRelations = relations(userBadges, ({ one }) => ({\n  user: one(users, {\n    fields: [userBadges.userId],\n    references: [users.id],\n  }),\n  badge: one(badges, {\n    fields: [userBadges.badgeId],\n    references: [badges.id],\n  }),\n}));\n\nexport const certificatesRelations = relations(certificates, ({ one }) => ({\n  user: one(users, {\n    fields: [certificates.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [certificates.courseId],\n    references: [courses.id],\n  }),\n  badge: one(badges, {\n    fields: [certificates.badgeId],\n    references: [badges.id],\n  }),\n}));\n\nexport const journalEntriesRelations = relations(journalEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [journalEntries.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [journalEntries.courseId],\n    references: [courses.id],\n  }),\n  lesson: one(lessons, {\n    fields: [journalEntries.lessonId],\n    references: [lessons.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEnrollmentSchema = createInsertSchema(enrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertBadgeSchema = createInsertSchema(badges).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type InsertEnrollment = z.infer<typeof insertEnrollmentSchema>;\nexport type Badge = typeof badges.$inferSelect;\nexport type InsertBadge = z.infer<typeof insertBadgeSchema>;\nexport type UserBadge = typeof userBadges.$inferSelect;\nexport type Certificate = typeof certificates.$inferSelect;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\n","size_bytes":7726},"client/src/components/CertificateCard.tsx":{"content":"import { Certificate, Badge } from \"@shared/schema\";\nimport { Medal, Calendar } from \"lucide-react\";\n\ninterface CertificateCardProps {\n  certificate: Certificate & {\n    badge?: Badge;\n    course?: {\n      title: string;\n      code: string;\n      wing: string;\n    };\n  };\n}\n\nexport default function CertificateCard({ certificate }: CertificateCardProps) {\n  const issuedDate = new Date(certificate.issuedAt || new Date()).toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n  });\n\n  const getBadgeColor = () => {\n    if (certificate.badge?.wing === \"sanctum\") {\n      return \"from-mystical-400 to-mystical-600\";\n    }\n    if (certificate.badge?.wing === \"orrery\") {\n      return \"from-ethereal-500 to-ethereal-700\";\n    }\n    return \"from-golden-400 to-golden-600\";\n  };\n\n  const getWingText = () => {\n    if (certificate.badge?.wing === \"sanctum\") {\n      return \"Sanctum of Hidden Echoes\";\n    }\n    if (certificate.badge?.wing === \"orrery\") {\n      return \"Orrery of Obscured Realms\";\n    }\n    return \"Cross-Wing Achievement\";\n  };\n\n  return (\n    <div className=\"crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm\">\n      <div className=\"text-center\">\n        <div className={`w-20 h-20 mx-auto mb-6 bg-gradient-to-br ${getBadgeColor()} rounded-full flex items-center justify-center mystical-glow`}>\n          <Medal className=\"text-3xl text-white\" />\n        </div>\n        \n        <h4 className={`text-xl font-serif font-bold mb-2 ${certificate.badge?.wing === 'sanctum' ? 'text-mystical-400' : certificate.badge?.wing === 'orrery' ? 'text-ethereal-400' : 'text-golden-400'}`}>\n          {certificate.type === \"course\" \n            ? `${certificate.course?.code} Certificate`\n            : certificate.badge?.name || \"Achievement Certificate\"\n          }\n        </h4>\n        \n        <p className=\"text-cosmic-400 text-sm mb-4\">\n          {getWingText()}\n        </p>\n        \n        <p className=\"text-xs text-cosmic-500 mb-4\">\n          {certificate.type === \"course\" \n            ? `Completed ${certificate.course?.title || \"course\"}`\n            : certificate.badge?.description || \"Special achievement unlocked\"\n          }\n        </p>\n        \n        <div className=\"flex items-center justify-center space-x-2 text-xs text-cosmic-400\">\n          <Calendar className=\"w-4 h-4\" />\n          <span>Earned {issuedDate}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2420},"client/src/components/CourseCard.tsx":{"content":"import { Course } from \"@shared/schema\";\nimport { BookOpen, Lock, CheckCircle, Clock } from \"lucide-react\";\n\ninterface CourseCardProps {\n  course: Course;\n  enrollment?: {\n    status: string;\n    progress: number;\n  };\n  onClick: () => void;\n}\n\nexport default function CourseCard({ course, enrollment, onClick }: CourseCardProps) {\n  const isCompleted = enrollment?.status === \"completed\";\n  const isEnrolled = !!enrollment;\n  const isLocked = !isEnrolled && (course.level || 100) > 100; // Simple prerequisite check\n\n  const getStatusColor = () => {\n    if (isCompleted) return \"text-green-400\";\n    if (isEnrolled) return \"text-blue-400\";\n    if (isLocked) return \"text-cosmic-500\";\n    return \"text-yellow-400\";\n  };\n\n  const getStatusIcon = () => {\n    if (isCompleted) return <CheckCircle className=\"w-4 h-4\" />;\n    if (isEnrolled) return <Clock className=\"w-4 h-4\" />;\n    if (isLocked) return <Lock className=\"w-4 h-4\" />;\n    return <BookOpen className=\"w-4 h-4\" />;\n  };\n\n  const getStatusText = () => {\n    if (isCompleted) return \"✓ Completed\";\n    if (isEnrolled) return \"◉ In Progress\";\n    if (isLocked) return \"🔒 Locked\";\n    return \"● Available\";\n  };\n\n  const wingColor = course.wing === \"sanctum\" \n    ? \"from-mystical-500 to-mystical-700\" \n    : \"from-ethereal-500 to-ethereal-700\";\n\n  return (\n    <div \n      className={`crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm hover:scale-105 transition-transform duration-300 cursor-pointer ${isLocked ? 'opacity-60' : ''}`}\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <span className={`text-sm font-semibold ${course.wing === 'sanctum' ? 'text-mystical-400 bg-mystical-900/50' : 'text-ethereal-400 bg-ethereal-900/50'} px-3 py-1 rounded-full`}>\n          {course.code}\n        </span>\n        <div className={`w-8 h-8 bg-gradient-to-br ${wingColor} rounded-full flex items-center justify-center`}>\n          {isLocked ? (\n            <Lock className=\"text-cosmic-400 text-sm\" />\n          ) : (\n            <BookOpen className=\"text-white text-sm\" />\n          )}\n        </div>\n      </div>\n      \n      <h4 className={`text-xl font-serif font-bold mb-3 ${isLocked ? 'text-cosmic-400' : 'text-cosmic-50'}`}>\n        {course.title}\n      </h4>\n      \n      <p className={`text-sm mb-4 ${isLocked ? 'text-cosmic-500' : 'text-cosmic-400'}`}>\n        {course.description}\n      </p>\n      \n      <div className=\"flex items-center justify-between\">\n        <span className=\"text-xs text-cosmic-500\">\n          {course.xpReward} XP\n        </span>\n        <span className={`text-xs font-semibold flex items-center gap-1 ${getStatusColor()}`}>\n          {getStatusIcon()}\n          {getStatusText()}\n        </span>\n      </div>\n      \n      {enrollment && enrollment.progress > 0 && (\n        <div className=\"mt-4\">\n          <div className=\"w-full bg-cosmic-600 rounded-full h-1\">\n            <div \n              className={`bg-gradient-to-r ${course.wing === 'sanctum' ? 'from-mystical-400 to-mystical-600' : 'from-ethereal-400 to-ethereal-600'} h-1 rounded-full transition-all duration-300`}\n              style={{ width: `${enrollment.progress}%` }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3272},"client/src/components/ElementalPaths.tsx":{"content":"import { Mountain, Droplet, Wind, Flame, Infinity, ArrowDown } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst elementalPaths = [\n  {\n    id: \"earth\",\n    name: \"Earth\",\n    description: \"Grounding, stability, manifestation\",\n    icon: Mountain,\n    color: \"from-amber-600 to-amber-800\",\n    textColor: \"text-amber-400\",\n  },\n  {\n    id: \"water\",\n    name: \"Water\", \n    description: \"Flow, emotion, intuition\",\n    icon: Droplet,\n    color: \"from-blue-600 to-blue-800\",\n    textColor: \"text-blue-400\",\n  },\n  {\n    id: \"air\",\n    name: \"Air\",\n    description: \"Communication, thought, inspiration\", \n    icon: Wind,\n    color: \"from-cyan-500 to-cyan-700\",\n    textColor: \"text-cyan-400\",\n  },\n  {\n    id: \"fire\",\n    name: \"Fire\",\n    description: \"Transformation, will, passion\",\n    icon: Flame, \n    color: \"from-red-600 to-red-800\",\n    textColor: \"text-red-400\",\n  },\n  {\n    id: \"aether\",\n    name: \"Aether\",\n    description: \"Spirit, unity, transcendence\",\n    icon: Infinity,\n    color: \"from-purple-600 to-purple-800\", \n    textColor: \"text-purple-400\",\n  },\n  {\n    id: \"mixed\",\n    name: \"Mixed\",\n    description: \"Balance, integration, harmony\",\n    icon: ArrowDown,\n    color: \"from-golden-500 to-golden-700\",\n    textColor: \"text-golden-400\",\n  },\n];\n\ninterface ElementalPathsProps {\n  currentPath?: string;\n  onPathChange?: (path: string) => void;\n}\n\nexport default function ElementalPaths({ currentPath, onPathChange }: ElementalPathsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updatePathMutation = useMutation({\n    mutationFn: async (elementalPath: string) => {\n      await apiRequest(\"PATCH\", \"/api/users/elemental-path\", { elementalPath });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Elemental Path Updated\",\n        description: \"Your cosmic alignment has been registered.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update elemental path. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePathSelect = (pathId: string) => {\n    updatePathMutation.mutate(pathId);\n    onPathChange?.(pathId);\n  };\n\n  return (\n    <section className=\"relative z-10 py-16\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"text-4xl font-serif font-bold text-ethereal-300 mb-4\">Elemental Pathways</h3>\n          <p className=\"text-cosmic-400\">Choose your primary elemental affinity to unlock specialized micro-modules</p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 lg:grid-cols-6 gap-6\">\n          {elementalPaths.map((element) => {\n            const Icon = element.icon;\n            const isSelected = currentPath === element.id;\n            \n            return (\n              <div\n                key={element.id}\n                className={`crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm text-center hover:scale-105 transition-transform duration-300 cursor-pointer ${isSelected ? 'ring-2 ring-ethereal-400' : ''}`}\n                onClick={() => handlePathSelect(element.id)}\n              >\n                <div className={`w-16 h-16 mx-auto mb-4 bg-gradient-to-br ${element.color} rounded-full flex items-center justify-center mystical-glow animate-crystal-grow`}>\n                  <Icon className=\"text-2xl text-white\" />\n                </div>\n                <h4 className={`text-lg font-semibold ${element.textColor} mb-2`}>\n                  {element.name}\n                </h4>\n                <p className=\"text-xs text-cosmic-400\">{element.description}</p>\n                {isSelected && (\n                  <div className=\"mt-2\">\n                    <span className=\"text-xs text-ethereal-400 font-semibold\">✓ Selected</span>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4183},"client/src/components/Navigation.tsx":{"content":"import { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { BookOpen, User } from \"lucide-react\";\n\nexport default function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n\n  if (!isAuthenticated || !user) return null;\n\n  const firstName = (user as any)?.firstName || 'Anonymous';\n  const level = (user as any)?.level || 'Neophyte';\n  const xp = (user as any)?.xp || 0;\n  const profileImageUrl = (user as any)?.profileImageUrl;\n\n  return (\n    <nav className=\"relative z-50 bg-cosmic-900/80 backdrop-blur-md border-b border-ethereal-500/20\">\n      <div className=\"max-w-7xl mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-4 cursor-pointer\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-mystical-500 to-ethereal-400 rounded-full flex items-center justify-center mystical-glow animate-pulse-glow\">\n                <BookOpen className=\"text-white text-xl\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-serif font-bold text-ethereal-300\">The Athenaeum</h1>\n                <p className=\"text-sm text-cosmic-400\">Jakintza Ruha Spiritual Academy</p>\n              </div>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/\" className=\"text-cosmic-300 hover:text-ethereal-300 transition-colors\">\n              Dashboard\n            </Link>\n            <Link href=\"/courses\" className=\"text-cosmic-300 hover:text-ethereal-300 transition-colors\">\n              Courses\n            </Link>\n            <Link href=\"/progress\" className=\"text-cosmic-300 hover:text-ethereal-300 transition-colors\">\n              Progress\n            </Link>\n            <Link href=\"/certificates\" className=\"text-cosmic-300 hover:text-ethereal-300 transition-colors\">\n              Certificates\n            </Link>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-right hidden sm:block\">\n              <p className=\"text-sm font-medium text-ethereal-300\">\n                Seeker {firstName}\n              </p>\n              <p className=\"text-xs text-mystical-400\">\n                {level} • {xp} XP\n              </p>\n            </div>\n            <div className=\"w-10 h-10 bg-gradient-to-br from-golden-400 to-mystical-500 rounded-full flex items-center justify-center\">\n              {profileImageUrl ? (\n                <img \n                  src={profileImageUrl} \n                  alt=\"Profile\" \n                  className=\"w-full h-full rounded-full object-cover\"\n                />\n              ) : (\n                <User className=\"text-white text-sm\" />\n              )}\n            </div>\n            <button\n              onClick={() => window.location.href = '/api/logout'}\n              className=\"text-sm text-cosmic-400 hover:text-cosmic-300 transition-colors\"\n            >\n              Logout\n            </button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3141},"client/src/components/ProgressCard.tsx":{"content":"import { Enrollment, Course } from \"@shared/schema\";\n\ninterface ProgressCardProps {\n  enrollment: Enrollment & { course: Course };\n}\n\nexport default function ProgressCard({ enrollment }: ProgressCardProps) {\n  const { course } = enrollment;\n  const wingColor = course.wing === \"sanctum\" \n    ? \"from-mystical-400 to-mystical-600\" \n    : \"from-ethereal-400 to-ethereal-600\";\n\n  const statusColor = enrollment.status === \"completed\" \n    ? \"bg-green-400\" \n    : enrollment.status === \"enrolled\" && enrollment.progress > 0\n    ? \"bg-blue-400\"\n    : \"bg-yellow-400\";\n\n  return (\n    <div className=\"flex items-center justify-between p-4 bg-cosmic-700/50 rounded-xl\">\n      <div className=\"flex items-center space-x-4\">\n        <div className={`w-3 h-3 ${statusColor} rounded-full animate-pulse-glow`} />\n        <div>\n          <h5 className=\"font-semibold text-cosmic-50\">\n            {course.code} — {course.title}\n          </h5>\n          <p className=\"text-sm text-cosmic-400\">\n            {enrollment.status === \"completed\" \n              ? \"Completed\" \n              : `Progress: ${enrollment.progress || 0}%`\n            }\n          </p>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <p className={`text-sm font-semibold ${course.wing === 'sanctum' ? 'text-mystical-300' : 'text-ethereal-300'}`}>\n          +{course.xpReward} XP\n        </p>\n        <div className=\"w-20 bg-cosmic-600 rounded-full h-1 mt-1\">\n          <div \n            className={`bg-gradient-to-r ${wingColor} h-1 rounded-full transition-all duration-300`}\n            style={{ width: `${enrollment.progress}%` }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1673},"client/src/components/StarField.tsx":{"content":"export default function StarField() {\n  return <div className=\"starfield\" />;\n}\n","size_bytes":80},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Users, BookOpen, Calendar, Settings, Database, BarChart3, \n  FileText, Crown, LogOut, Shield, Globe, Edit3, Trash2,\n  Plus, Eye, Star, Moon, Sparkles\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [adminEmail, setAdminEmail] = useState(\"\");\n\n  useEffect(() => {\n    // Check if user is admin\n    const isAdmin = localStorage.getItem(\"athenaeum_admin\");\n    const email = localStorage.getItem(\"admin_email\");\n    \n    if (!isAdmin || isAdmin !== \"true\") {\n      setLocation(\"/\");\n      return;\n    }\n    \n    setAdminEmail(email || \"\");\n  }, [setLocation]);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"athenaeum_admin\");\n    localStorage.removeItem(\"admin_email\");\n    toast({\n      title: \"Sacred Session Ended\",\n      description: \"You have been safely logged out.\",\n    });\n    setLocation(\"/\");\n  };\n\n  const stats = {\n    users: 247,\n    grimoires: 89,\n    courses: 12,\n    events: 34\n  };\n\n  const tabs = [\n    { id: \"overview\", label: \"Overview\", icon: BarChart3 },\n    { id: \"users\", label: \"Users\", icon: Users },\n    { id: \"content\", label: \"Content\", icon: BookOpen },\n    { id: \"courses\", label: \"Courses\", icon: FileText },\n    { id: \"calendar\", label: \"Calendar\", icon: Calendar },\n    { id: \"database\", label: \"Database\", icon: Database },\n    { id: \"settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 0.8, ease: \"easeOut\" }\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/90\"></div>\n      \n      <div className=\"relative z-10\">\n        {/* Header */}\n        <header className=\"border-b border-golden-rune/30 bg-black/50 backdrop-blur-sm\">\n          <div className=\"max-w-7xl mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Crown className=\"w-8 h-8 text-golden-rune\" />\n                <div>\n                  <h1 className=\"font-gothic text-2xl text-golden-rune\">Sacred Administration</h1>\n                  <p className=\"text-silver-star/70 text-sm\">Jakintza Ruha Command Center</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-golden-rune font-medium\">{adminEmail}</p>\n                  <p className=\"text-xs text-silver-star/60\">Sacred Administrator</p>\n                </div>\n                <Button\n                  onClick={handleLogout}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-golden-rune/50 text-golden-rune hover:bg-golden-rune/10\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Logout\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"flex\">\n          {/* Sidebar */}\n          <aside className=\"w-64 min-h-screen bg-black/60 border-r border-golden-rune/30\">\n            <nav className=\"p-6 space-y-2\">\n              {tabs.map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors text-left ${\n                      activeTab === tab.id\n                        ? 'bg-golden-rune/20 text-golden-rune border border-golden-rune/40'\n                        : 'text-silver-star/70 hover:bg-silver-star/10 hover:text-golden-rune'\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{tab.label}</span>\n                  </button>\n                );\n              })}\n            </nav>\n          </aside>\n\n          {/* Main Content */}\n          <main className=\"flex-1 p-8\">\n            <motion.div {...fadeInUp}>\n              {activeTab === \"overview\" && (\n                <div className=\"space-y-8\">\n                  <div>\n                    <h2 className=\"font-gothic text-3xl text-golden-rune mb-2\">Dashboard Overview</h2>\n                    <p className=\"text-silver-star/80\">Welcome to your sacred command center</p>\n                  </div>\n\n                  {/* Stats Cards */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-silver-star/70 text-sm\">Total Users</p>\n                            <p className=\"text-2xl font-bold text-golden-rune\">{stats.users}</p>\n                          </div>\n                          <Users className=\"w-8 h-8 text-golden-rune/60\" />\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-silver-star/70 text-sm\">Grimoires</p>\n                            <p className=\"text-2xl font-bold text-golden-rune\">{stats.grimoires}</p>\n                          </div>\n                          <BookOpen className=\"w-8 h-8 text-golden-rune/60\" />\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-silver-star/70 text-sm\">Courses</p>\n                            <p className=\"text-2xl font-bold text-golden-rune\">{stats.courses}</p>\n                          </div>\n                          <FileText className=\"w-8 h-8 text-golden-rune/60\" />\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-silver-star/70 text-sm\">Events</p>\n                            <p className=\"text-2xl font-bold text-golden-rune\">{stats.events}</p>\n                          </div>\n                          <Calendar className=\"w-8 h-8 text-golden-rune/60\" />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Quick Actions */}\n                  <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                    <CardHeader>\n                      <CardTitle className=\"font-gothic text-golden-rune\">Quick Actions</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <Link href=\"/athenaeum\">\n                          <Button className=\"w-full bg-gradient-to-r from-golden-rune to-cosmic-blue hover:from-golden-rune/90 hover:to-cosmic-blue/90 text-void-black\">\n                            <Globe className=\"w-4 h-4 mr-2\" />\n                            Visit Athenaeum\n                          </Button>\n                        </Link>\n                        <Button \n                          className=\"w-full border-golden-rune/50 text-golden-rune hover:bg-golden-rune/10\"\n                          variant=\"outline\"\n                          onClick={() => setActiveTab(\"content\")}\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Content\n                        </Button>\n                        <Button \n                          className=\"w-full border-silver-star/50 text-silver-star hover:bg-silver-star/10\"\n                          variant=\"outline\"\n                          onClick={() => setActiveTab(\"settings\")}\n                        >\n                          <Settings className=\"w-4 h-4 mr-2\" />\n                          Site Settings\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {activeTab === \"users\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"font-gothic text-3xl text-golden-rune\">User Management</h2>\n                    <Button className=\"bg-golden-rune text-void-black hover:bg-golden-rune/90\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add User\n                    </Button>\n                  </div>\n\n                  <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                    <CardHeader>\n                      <CardTitle className=\"text-golden-rune\">Recent Users</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {[\n                          { name: \"Sarah Moon\", email: \"sarah@example.com\", status: \"Active\", joined: \"2 days ago\" },\n                          { name: \"Michael Star\", email: \"michael@example.com\", status: \"Pending\", joined: \"1 week ago\" },\n                          { name: \"Luna Crystal\", email: \"luna@example.com\", status: \"Active\", joined: \"3 days ago\" },\n                        ].map((user, i) => (\n                          <div key={i} className=\"flex items-center justify-between p-4 bg-shadow-purple/20 rounded-lg\">\n                            <div>\n                              <p className=\"text-ethereal-white font-medium\">{user.name}</p>\n                              <p className=\"text-silver-star/70 text-sm\">{user.email}</p>\n                            </div>\n                            <div className=\"flex items-center space-x-4\">\n                              <Badge variant={user.status === \"Active\" ? \"default\" : \"secondary\"}>\n                                {user.status}\n                              </Badge>\n                              <p className=\"text-xs text-silver-star/60\">{user.joined}</p>\n                              <div className=\"flex space-x-2\">\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <Edit3 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {activeTab === \"content\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"font-gothic text-3xl text-golden-rune\">Content Management</h2>\n                    <Button className=\"bg-golden-rune text-void-black hover:bg-golden-rune/90\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Content\n                    </Button>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardHeader>\n                        <CardTitle className=\"text-golden-rune flex items-center\">\n                          <BookOpen className=\"w-5 h-5 mr-2\" />\n                          Grimoires\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-3\">\n                          {[\"Book of Shadows - Advanced\", \"Lunar Mysteries\", \"Crystal Healing Guide\"].map((title, i) => (\n                            <div key={i} className=\"flex items-center justify-between p-3 bg-deep-purple/20 rounded\">\n                              <span className=\"text-ethereal-white\">{title}</span>\n                              <div className=\"flex space-x-2\">\n                                <Button size=\"sm\" variant=\"outline\"><Edit3 className=\"w-3 h-3\" /></Button>\n                                <Button size=\"sm\" variant=\"outline\"><Trash2 className=\"w-3 h-3\" /></Button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardHeader>\n                        <CardTitle className=\"text-golden-rune flex items-center\">\n                          <Star className=\"w-5 h-5 mr-2\" />\n                          Sacred Events\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-3\">\n                          {[\"Full Moon Ceremony\", \"Solstice Celebration\", \"Mercury Retrograde\"].map((title, i) => (\n                            <div key={i} className=\"flex items-center justify-between p-3 bg-cosmic-blue/20 rounded\">\n                              <span className=\"text-ethereal-white\">{title}</span>\n                              <div className=\"flex space-x-2\">\n                                <Button size=\"sm\" variant=\"outline\"><Edit3 className=\"w-3 h-3\" /></Button>\n                                <Button size=\"sm\" variant=\"outline\"><Trash2 className=\"w-3 h-3\" /></Button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === \"settings\" && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"font-gothic text-3xl text-golden-rune\">System Settings</h2>\n\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardHeader>\n                        <CardTitle className=\"text-golden-rune flex items-center\">\n                          <Shield className=\"w-5 h-5 mr-2\" />\n                          Security Settings\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-silver-star\">Two-Factor Authentication</span>\n                          <Badge variant=\"secondary\">Enabled</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-silver-star\">Admin Email Notifications</span>\n                          <Badge variant=\"default\">Active</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-silver-star\">Session Timeout</span>\n                          <span className=\"text-golden-rune text-sm\">24 hours</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"mystical-border bg-black/60 border-golden-rune/30\">\n                      <CardHeader>\n                        <CardTitle className=\"text-golden-rune flex items-center\">\n                          <Globe className=\"w-5 h-5 mr-2\" />\n                          Site Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-silver-star\">Site Status</span>\n                          <Badge variant=\"default\">Live</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-silver-star\">Maintenance Mode</span>\n                          <Badge variant=\"secondary\">Disabled</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-silver-star\">Debug Mode</span>\n                          <Badge variant=\"secondary\">Off</Badge>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </main>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":18563},"client/src/pages/athenaeum-admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n// import { insertCourseSchema, insertLessonSchema } from \"@shared/schema\";\nimport { \n  Crown, BookOpen, Users, TrendingUp, Plus, Edit, Tag, BarChart3, \n  Upload, Download, UserPlus, Search, Filter, Trash2, Copy,\n  Settings, GraduationCap, Award, Calendar, RefreshCw\n} from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst createCourseSchema = z.object({\n  code: z.string().min(1, \"Course code is required\"),\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  wing: z.enum([\"sanctum\", \"orrery\"]),\n  level: z.number().min(100).max(400),\n  xpReward: z.number().min(0),\n  isElective: z.boolean().default(false),\n  prerequisites: z.array(z.string()).default([]),\n});\n\nconst createLessonSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  order: z.number().min(0),\n  xpReward: z.number().min(0),\n  courseId: z.string(),\n});\n\nconst createUserSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  role: z.enum([\"student\", \"instructor\", \"admin\"]),\n  elementalPath: z.enum([\"earth\", \"water\", \"air\", \"fire\", \"aether\", \"mixed\"]),\n});\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedCourse, setSelectedCourse] = useState<string>(\"\");\n  const [showCreateCourse, setShowCreateCourse] = useState(false);\n  const [showCreateLesson, setShowCreateLesson] = useState(false);\n  const [showCreateUser, setShowCreateUser] = useState(false);\n  const [showBulkEnroll, setShowBulkEnroll] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterLevel, setFilterLevel] = useState(\"all\");\n  const [filterWing, setFilterWing] = useState(\"all\");\n\n  const { data: courses = [] } = useQuery<any[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: analytics } = useQuery<any>({\n    queryKey: [\"/api/analytics\"],\n  });\n\n  const { data: allUsers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/admin/enrollments\"],\n  });\n\n  const createCourseForm = useForm<z.infer<typeof createCourseSchema>>({\n    resolver: zodResolver(createCourseSchema),\n    defaultValues: {\n      code: \"\",\n      title: \"\",\n      description: \"\",\n      wing: \"sanctum\",\n      level: 100,\n      xpReward: 200,\n      isElective: false,\n    },\n  });\n\n  const createLessonForm = useForm<z.infer<typeof createLessonSchema>>({\n    resolver: zodResolver(createLessonSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      order: 0,\n      xpReward: 25,\n    },\n  });\n\n  const createUserForm = useForm<z.infer<typeof createUserSchema>>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"student\",\n      elementalPath: \"mixed\",\n    },\n  });\n\n  // Mutations\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createCourseSchema>) => {\n      await apiRequest(\"POST\", \"/api/courses\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Course Created\", description: \"New course added successfully.\" });\n      setShowCreateCourse(false);\n      createCourseForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create course.\", variant: \"destructive\" });\n    },\n  });\n\n  const createLessonMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createLessonSchema>) => {\n      await apiRequest(\"POST\", `/api/courses/${selectedCourse}/lessons`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Lesson Created\", description: \"New lesson added successfully.\" });\n      setShowCreateLesson(false);\n      createLessonForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create lesson.\", variant: \"destructive\" });\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createUserSchema>) => {\n      await apiRequest(\"POST\", \"/api/admin/users\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User Created\", description: \"New user account created successfully.\" });\n      setShowCreateUser(false);\n      createUserForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create user.\", variant: \"destructive\" });\n    },\n  });\n\n  const bulkEnrollMutation = useMutation({\n    mutationFn: async (data: { userIds: string[], courseId: string }) => {\n      await apiRequest(\"POST\", \"/api/admin/bulk-enroll\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/enrollments\"] });\n      toast({ title: \"Bulk Enrollment Complete\", description: \"Students enrolled successfully.\" });\n      setShowBulkEnroll(false);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to enroll students.\", variant: \"destructive\" });\n    },\n  });\n\n  const cloneCourseMutation = useMutation({\n    mutationFn: async (courseId: string) => {\n      await apiRequest(\"POST\", `/api/admin/courses/${courseId}/clone`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Course Cloned\", description: \"Course copied successfully.\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to clone course.\", variant: \"destructive\" });\n    },\n  });\n\n  // Filtered data\n  const filteredCourses = (courses as any[]).filter((course: any) => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.code.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesLevel = filterLevel === \"all\" || course.level.toString() === filterLevel;\n    const matchesWing = filterWing === \"all\" || course.wing === filterWing;\n    return matchesSearch && matchesLevel && matchesWing;\n  });\n\n  const filteredUsers = (allUsers as any[]).filter((user: any) => \n    user.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const onCreateCourse = (data: z.infer<typeof createCourseSchema>) => {\n    createCourseMutation.mutate(data);\n  };\n\n  const onCreateLesson = (data: z.infer<typeof createLessonSchema>) => {\n    createLessonMutation.mutate(data);\n  };\n\n  const onCreateUser = (data: z.infer<typeof createUserSchema>) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleBulkEnroll = () => {\n    // Implementation for bulk enrollment\n    const selectedUsers = filteredUsers.filter((user: any) => user.selected);\n    if (selectedUsers.length > 0 && selectedCourse) {\n      bulkEnrollMutation.mutate({\n        userIds: selectedUsers.map((user: any) => user.id),\n        courseId: selectedCourse\n      });\n    }\n  };\n\n  const exportData = (type: string) => {\n    // Implementation for data export\n    toast({ title: \"Export Started\", description: `Exporting ${type} data...` });\n  };\n\n  const totalStudents = (analytics as any)?.totalStudents || 0;\n  const activeStudents = (analytics as any)?.activeStudents || 0;\n  const levelDistribution = (analytics as any)?.levelDistribution || [];\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      <section className=\"relative z-10 py-8\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-serif font-bold text-golden-400 mb-4 flex items-center justify-center gap-3\">\n              <Crown className=\"w-10 h-10\" />\n              Athenaeum Administration\n            </h1>\n            <p className=\"text-cosmic-400\">Complete platform management and curriculum control</p>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-golden-400 flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Total Students\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{totalStudents}</p>\n                <p className=\"text-sm text-cosmic-400\">{activeStudents} active</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-mystical-400 flex items-center gap-2\">\n                  <BookOpen className=\"w-5 h-5\" />\n                  Total Courses\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{(courses as any[]).length}</p>\n                <p className=\"text-sm text-cosmic-400\">across both wings</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-ethereal-400 flex items-center gap-2\">\n                  <GraduationCap className=\"w-5 h-5\" />\n                  Completion Rate\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">\n                  {totalStudents > 0 ? Math.round(((activeStudents / totalStudents) * 100)) : 0}%\n                </p>\n                <p className=\"text-sm text-cosmic-400\">student engagement</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-golden-400 flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Level Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{levelDistribution.length}</p>\n                <p className=\"text-sm text-cosmic-400\">active levels</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Admin Tabs */}\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-6 lg:w-fit\">\n              <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"courses\" className=\"flex items-center gap-2\">\n                <BookOpen className=\"w-4 h-4\" />\n                Courses\n              </TabsTrigger>\n              <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n                <Users className=\"w-4 h-4\" />\n                Users\n              </TabsTrigger>\n              <TabsTrigger value=\"enrollments\" className=\"flex items-center gap-2\">\n                <GraduationCap className=\"w-4 h-4\" />\n                Enrollments\n              </TabsTrigger>\n              <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-4 h-4\" />\n                Analytics\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n                <Settings className=\"w-4 h-4\" />\n                Settings\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid lg:grid-cols-2 gap-6\">\n                <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"text-mystical-300\">Recent Activity</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-3 bg-cosmic-700/50 rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <UserPlus className=\"w-5 h-5 text-green-400\" />\n                          <span className=\"text-cosmic-200\">New student registered</span>\n                        </div>\n                        <Badge variant=\"outline\">2 hours ago</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 bg-cosmic-700/50 rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <BookOpen className=\"w-5 h-5 text-blue-400\" />\n                          <span className=\"text-cosmic-200\">Course SE-101 completed</span>\n                        </div>\n                        <Badge variant=\"outline\">5 hours ago</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 bg-cosmic-700/50 rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <Award className=\"w-5 h-5 text-golden-400\" />\n                          <span className=\"text-cosmic-200\">Badge \"Mystic Scholar\" earned</span>\n                        </div>\n                        <Badge variant=\"outline\">1 day ago</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"text-ethereal-300\">Quick Actions</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Button \n                      onClick={() => setShowCreateCourse(true)}\n                      className=\"w-full bg-mystical-600 hover:bg-mystical-500\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create New Course\n                    </Button>\n                    <Button \n                      onClick={() => setShowCreateUser(true)}\n                      className=\"w-full bg-ethereal-600 hover:bg-ethereal-500\"\n                    >\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Add New User\n                    </Button>\n                    <Button \n                      onClick={() => setShowBulkEnroll(true)}\n                      className=\"w-full bg-golden-600 hover:bg-golden-500\"\n                    >\n                      <GraduationCap className=\"w-4 h-4 mr-2\" />\n                      Bulk Enrollment\n                    </Button>\n                    <Button \n                      onClick={() => exportData(\"all\")}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export All Data\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Courses Tab */}\n            <TabsContent value=\"courses\" className=\"space-y-6\">\n              <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-cosmic-400 w-4 h-4\" />\n                    <Input\n                      placeholder=\"Search courses...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                    />\n                  </div>\n                  <Select value={filterWing} onValueChange={setFilterWing}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Filter by wing\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Wings</SelectItem>\n                      <SelectItem value=\"sanctum\">Sanctum</SelectItem>\n                      <SelectItem value=\"orrery\">Orrery</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={filterLevel} onValueChange={setFilterLevel}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Filter by level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Levels</SelectItem>\n                      <SelectItem value=\"100\">Level 100</SelectItem>\n                      <SelectItem value=\"200\">Level 200</SelectItem>\n                      <SelectItem value=\"300\">Level 300</SelectItem>\n                      <SelectItem value=\"400\">Level 400</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button onClick={() => setShowCreateCourse(true)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Course\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => exportData(\"courses\")}>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export\n                  </Button>\n                </div>\n              </div>\n\n              <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-mystical-300\">Course Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Code</TableHead>\n                        <TableHead>Title</TableHead>\n                        <TableHead>Wing</TableHead>\n                        <TableHead>Level</TableHead>\n                        <TableHead>XP Reward</TableHead>\n                        <TableHead>Enrolled</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredCourses.map((course: any) => (\n                        <TableRow key={course.id}>\n                          <TableCell>\n                            <Badge variant={course.wing === \"sanctum\" ? \"default\" : \"secondary\"}>\n                              {course.code}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"font-medium\">{course.title}</TableCell>\n                          <TableCell>\n                            <Badge \n                              variant=\"outline\" \n                              className={course.wing === \"sanctum\" ? \"text-mystical-400\" : \"text-ethereal-400\"}\n                            >\n                              {course.wing === \"sanctum\" ? \"Sanctum\" : \"Orrery\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{course.level}</TableCell>\n                          <TableCell>{course.xpReward} XP</TableCell>\n                          <TableCell>\n                            {(enrollments as any[]).filter((e: any) => e.courseId === course.id).length}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedCourse(course.id);\n                                  setShowCreateLesson(true);\n                                }}\n                              >\n                                <Plus className=\"w-3 h-3\" />\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => cloneCourseMutation.mutate(course.id)}\n                              >\n                                <Copy className=\"w-3 h-3\" />\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Users Tab */}\n            <TabsContent value=\"users\" className=\"space-y-6\">\n              <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-cosmic-400 w-4 h-4\" />\n                    <Input\n                      placeholder=\"Search users...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button onClick={() => setShowCreateUser(true)}>\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    New User\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => exportData(\"users\")}>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export\n                  </Button>\n                </div>\n              </div>\n\n              <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-ethereal-300\">User Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Level</TableHead>\n                        <TableHead>XP</TableHead>\n                        <TableHead>Path</TableHead>\n                        <TableHead>Enrolled</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredUsers.map((user: any) => (\n                        <TableRow key={user.id}>\n                          <TableCell className=\"font-medium\">\n                            {user.firstName} {user.lastName}\n                          </TableCell>\n                          <TableCell>{user.email}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{user.level || \"Neophyte\"}</Badge>\n                          </TableCell>\n                          <TableCell>{user.xp || 0} XP</TableCell>\n                          <TableCell>\n                            <Badge variant=\"secondary\">{user.elementalPath || \"Mixed\"}</Badge>\n                          </TableCell>\n                          <TableCell>\n                            {(enrollments as any[]).filter((e: any) => e.userId === user.id).length}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <GraduationCap className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Enrollments Tab */}\n            <TabsContent value=\"enrollments\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-2xl font-serif font-bold text-golden-400\">Enrollment Management</h3>\n                <Button onClick={() => setShowBulkEnroll(true)}>\n                  <GraduationCap className=\"w-4 h-4 mr-2\" />\n                  Bulk Enroll\n                </Button>\n              </div>\n\n              <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-mystical-300\">Active Enrollments</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Student</TableHead>\n                        <TableHead>Course</TableHead>\n                        <TableHead>Progress</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Enrolled</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {(enrollments as any[]).map((enrollment: any) => (\n                        <TableRow key={enrollment.id}>\n                          <TableCell className=\"font-medium\">\n                            {enrollment.user?.firstName} {enrollment.user?.lastName}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={enrollment.course?.wing === \"sanctum\" ? \"default\" : \"secondary\"}>\n                              {enrollment.course?.code}\n                            </Badge>\n                            <span className=\"ml-2\">{enrollment.course?.title}</span>\n                          </TableCell>\n                          <TableCell>{enrollment.progress || 0}%</TableCell>\n                          <TableCell>\n                            <Badge \n                              variant={enrollment.status === \"completed\" ? \"default\" : \"outline\"}\n                              className={enrollment.status === \"completed\" ? \"bg-green-600\" : \"\"}\n                            >\n                              {enrollment.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {new Date(enrollment.enrolledAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <RefreshCw className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Analytics Tab */}\n            <TabsContent value=\"analytics\" className=\"space-y-6\">\n              <div className=\"grid lg:grid-cols-2 gap-6\">\n                <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"text-golden-400\">Level Distribution</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {levelDistribution.map((level: any) => (\n                        <div key={level.level} className=\"flex items-center justify-between\">\n                          <span className=\"text-cosmic-200\">{level.level}</span>\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-32 bg-cosmic-700 rounded-full h-2\">\n                              <div \n                                className=\"bg-gradient-to-r from-mystical-500 to-ethereal-500 h-2 rounded-full\"\n                                style={{ width: `${(level.count / totalStudents) * 100}%` }}\n                              />\n                            </div>\n                            <span className=\"text-cosmic-400 w-8\">{level.count}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"text-ethereal-400\">Course Popularity</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {(courses as any[]).slice(0, 5).map((course: any) => {\n                        const enrollmentCount = (enrollments as any[]).filter((e: any) => e.courseId === course.id).length;\n                        return (\n                          <div key={course.id} className=\"flex items-center justify-between\">\n                            <div>\n                              <Badge variant={course.wing === \"sanctum\" ? \"default\" : \"secondary\"} className=\"mr-2\">\n                                {course.code}\n                              </Badge>\n                              <span className=\"text-cosmic-200 text-sm\">{course.title}</span>\n                            </div>\n                            <span className=\"text-cosmic-400\">{enrollmentCount} enrolled</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Settings Tab */}\n            <TabsContent value=\"settings\" className=\"space-y-6\">\n              <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-golden-400\">Platform Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-cosmic-200\">Auto-enrollment for new courses</Label>\n                      <p className=\"text-sm text-cosmic-400\">Automatically enroll all students in new courses</p>\n                    </div>\n                    <Switch />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-cosmic-200\">Email notifications</Label>\n                      <p className=\"text-sm text-cosmic-400\">Send email notifications for course completions</p>\n                    </div>\n                    <Switch />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-cosmic-200\">Badge auto-awards</Label>\n                      <p className=\"text-sm text-cosmic-400\">Automatically award badges based on achievements</p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          {/* Create Course Dialog */}\n          <Dialog open={showCreateCourse} onOpenChange={setShowCreateCourse}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-mystical-300\">Create New Course</DialogTitle>\n              </DialogHeader>\n              <Form {...createCourseForm}>\n                <form onSubmit={createCourseForm.handleSubmit(onCreateCourse)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={createCourseForm.control}\n                      name=\"code\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course Code</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"SE-101\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={createCourseForm.control}\n                      name=\"wing\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Wing</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a wing\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"sanctum\">Sanctum of Hidden Echoes</SelectItem>\n                              <SelectItem value=\"orrery\">Orrery of Obscured Realms</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={createCourseForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Course Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Introduction to Sacred Geometry\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createCourseForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Explore the mystical principles of sacred geometry...\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={createCourseForm.control}\n                      name=\"level\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Level</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"100\" \n                              {...field} \n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={createCourseForm.control}\n                      name=\"xpReward\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>XP Reward</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"200\" \n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"flex justify-end gap-4\">\n                    <Button variant=\"outline\" type=\"button\" onClick={() => setShowCreateCourse(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createCourseMutation.isPending}>\n                      {createCourseMutation.isPending ? \"Creating...\" : \"Create Course\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          {/* Create User Dialog */}\n          <Dialog open={showCreateUser} onOpenChange={setShowCreateUser}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle className=\"text-ethereal-300\">Create New User</DialogTitle>\n              </DialogHeader>\n              <Form {...createUserForm}>\n                <form onSubmit={createUserForm.handleSubmit(onCreateUser)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={createUserForm.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"John\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={createUserForm.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Doe\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={createUserForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"john.doe@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={createUserForm.control}\n                      name=\"role\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Role</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select role\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"student\">Student</SelectItem>\n                              <SelectItem value=\"instructor\">Instructor</SelectItem>\n                              <SelectItem value=\"admin\">Administrator</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={createUserForm.control}\n                      name=\"elementalPath\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Elemental Path</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select path\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"earth\">Earth</SelectItem>\n                              <SelectItem value=\"water\">Water</SelectItem>\n                              <SelectItem value=\"air\">Air</SelectItem>\n                              <SelectItem value=\"fire\">Fire</SelectItem>\n                              <SelectItem value=\"aether\">Aether</SelectItem>\n                              <SelectItem value=\"mixed\">Mixed</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"flex justify-end gap-4\">\n                    <Button variant=\"outline\" type=\"button\" onClick={() => setShowCreateUser(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createUserMutation.isPending}>\n                      {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          {/* Create Lesson Dialog */}\n          <Dialog open={showCreateLesson} onOpenChange={setShowCreateLesson}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle className=\"text-golden-400\">Add Lesson to Course</DialogTitle>\n              </DialogHeader>\n              <Form {...createLessonForm}>\n                <form onSubmit={createLessonForm.handleSubmit(onCreateLesson)} className=\"space-y-6\">\n                  <FormField\n                    control={createLessonForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Lesson Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"The Sacred Circle\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createLessonForm.control}\n                    name=\"content\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Content</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"In this lesson, we explore the mystical properties of the sacred circle...\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={createLessonForm.control}\n                      name=\"order\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Lesson Order</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"1\" \n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={createLessonForm.control}\n                      name=\"xpReward\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>XP Reward</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"25\" \n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"flex justify-end gap-4\">\n                    <Button variant=\"outline\" type=\"button\" onClick={() => setShowCreateLesson(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createLessonMutation.isPending}>\n                      {createLessonMutation.isPending ? \"Creating...\" : \"Create Lesson\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":48678},"client/src/pages/athenaeum-certificates.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport CertificateCard from \"@/components/CertificateCard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Award, Download, Share2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Certificates() {\n  const { data: certificates = [] } = useQuery<any[]>({\n    queryKey: [\"/api/certificates\"],\n  });\n\n  const { data: userBadges = [] } = useQuery<any[]>({\n    queryKey: [\"/api/users/badges\"],\n  });\n\n  // Combine certificates with badge/course information\n  const enrichedCertificates = (certificates as any[]).map((cert: any) => {\n    if (cert.type === \"badge\" && cert.badgeId) {\n      const userBadge = userBadges.find((ub: any) => ub.badgeId === cert.badgeId);\n      return {\n        ...cert,\n        badge: userBadge?.badge,\n      };\n    }\n    return cert;\n  });\n\n  const courseCertificates = enrichedCertificates.filter((cert: any) => cert.type === \"course\");\n  const badgeCertificates = enrichedCertificates.filter((cert: any) => cert.type === \"badge\");\n  const levelCertificates = enrichedCertificates.filter((cert: any) => cert.type === \"level\");\n\n  const handleDownload = (certificateId: string) => {\n    // TODO: Implement PDF certificate generation\n    console.log(\"Downloading certificate:\", certificateId);\n  };\n\n  const handleShare = (certificateId: string) => {\n    // TODO: Implement certificate sharing\n    console.log(\"Sharing certificate:\", certificateId);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      <section className=\"relative z-10 py-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-serif font-bold text-ethereal-300 mb-4\">Sacred Certificates</h1>\n            <p className=\"text-cosmic-400\">Your mystical achievements and mastery credentials</p>\n          </div>\n\n          {/* Certificate Overview */}\n          <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm text-center\">\n              <CardHeader>\n                <CardTitle className=\"text-golden-400 flex items-center justify-center gap-2\">\n                  <Award className=\"w-5 h-5\" />\n                  Course Certificates\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{courseCertificates.length}</p>\n                <p className=\"text-sm text-cosmic-400\">courses completed</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm text-center\">\n              <CardHeader>\n                <CardTitle className=\"text-mystical-400 flex items-center justify-center gap-2\">\n                  <Award className=\"w-5 h-5\" />\n                  Badge Certificates\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{badgeCertificates.length}</p>\n                <p className=\"text-sm text-cosmic-400\">special achievements</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm text-center\">\n              <CardHeader>\n                <CardTitle className=\"text-ethereal-400 flex items-center justify-center gap-2\">\n                  <Award className=\"w-5 h-5\" />\n                  Level Certificates\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{levelCertificates.length}</p>\n                <p className=\"text-sm text-cosmic-400\">rank advancements</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Course Certificates */}\n          {courseCertificates.length > 0 && (\n            <div className=\"mb-12\">\n              <h2 className=\"text-3xl font-serif font-bold text-mystical-300 mb-8 text-center\">\n                Course Mastery Certificates\n              </h2>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {courseCertificates.map((certificate: any) => (\n                  <div key={certificate.id} className=\"relative group\">\n                    <CertificateCard certificate={certificate} />\n                    <div className=\"absolute inset-0 bg-cosmic-900/80 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl flex items-center justify-center space-x-4\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleDownload(certificate.id)}\n                        className=\"bg-mystical-600 hover:bg-mystical-500\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleShare(certificate.id)}\n                        className=\"border-ethereal-400 text-ethereal-400 hover:bg-ethereal-400/10\"\n                      >\n                        <Share2 className=\"w-4 h-4 mr-2\" />\n                        Share\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Badge Certificates */}\n          {badgeCertificates.length > 0 && (\n            <div className=\"mb-12\">\n              <h2 className=\"text-3xl font-serif font-bold text-ethereal-300 mb-8 text-center\">\n                Achievement Badges\n              </h2>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {badgeCertificates.map((certificate: any) => (\n                  <div key={certificate.id} className=\"relative group\">\n                    <CertificateCard certificate={certificate} />\n                    <div className=\"absolute inset-0 bg-cosmic-900/80 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl flex items-center justify-center space-x-4\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleDownload(certificate.id)}\n                        className=\"bg-ethereal-600 hover:bg-ethereal-500\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleShare(certificate.id)}\n                        className=\"border-mystical-400 text-mystical-400 hover:bg-mystical-400/10\"\n                      >\n                        <Share2 className=\"w-4 h-4 mr-2\" />\n                        Share\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Level Certificates */}\n          {levelCertificates.length > 0 && (\n            <div className=\"mb-12\">\n              <h2 className=\"text-3xl font-serif font-bold text-golden-400 mb-8 text-center\">\n                Rank Advancement Certificates\n              </h2>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {levelCertificates.map((certificate: any) => (\n                  <div key={certificate.id} className=\"relative group\">\n                    <CertificateCard certificate={certificate} />\n                    <div className=\"absolute inset-0 bg-cosmic-900/80 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl flex items-center justify-center space-x-4\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleDownload(certificate.id)}\n                        className=\"bg-golden-600 hover:bg-golden-500\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleShare(certificate.id)}\n                        className=\"border-golden-400 text-golden-400 hover:bg-golden-400/10\"\n                      >\n                        <Share2 className=\"w-4 h-4 mr-2\" />\n                        Share\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Empty State */}\n          {(certificates as any[]).length === 0 && (\n            <div className=\"text-center py-16\">\n              <div className=\"w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-cosmic-600 to-cosmic-700 rounded-full flex items-center justify-center\">\n                <Award className=\"text-4xl text-cosmic-400\" />\n              </div>\n              <h3 className=\"text-2xl font-serif font-bold text-cosmic-400 mb-4\">\n                No Certificates Yet\n              </h3>\n              <p className=\"text-cosmic-500 mb-8 max-w-md mx-auto\">\n                Complete courses and earn badges to receive your sacred certificates of mastery.\n              </p>\n              <Button\n                onClick={() => window.location.href = \"/courses\"}\n                className=\"bg-gradient-to-r from-mystical-600 to-ethereal-600 hover:from-mystical-500 hover:to-ethereal-500\"\n              >\n                Explore Courses\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":9987},"client/src/pages/athenaeum-course-detail.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport Navigation from \"@/components/Navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { BookOpen, CheckCircle, Lock, Star, ArrowLeft } from \"lucide-react\";\n\nexport default function CourseDetail() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const courseId = params.id;\n\n  const { data: courseData } = useQuery({\n    queryKey: [\"/api/courses\", courseId],\n    enabled: !!courseId,\n  });\n\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/enrollments\"],\n  });\n\n  const enrollment = (enrollments as any[]).find((e: any) => e.courseId === courseId);\n  const course = (courseData as any)?.course;\n  const lessons = (courseData as any)?.lessons || [];\n\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/enrollments\", { courseId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/enrollments\"] });\n      toast({\n        title: \"Enrolled Successfully\",\n        description: \"Welcome to your new course!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Enrollment Failed\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeCourseMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", `/api/enrollments/${courseId}/complete`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/enrollments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Course Completed!\",\n        description: \"Certificate issued. Congratulations!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete course.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navigation />\n        <div className=\"flex items-center justify-center py-32\">\n          <p className=\"text-cosmic-400\">Loading course details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const isEnrolled = !!enrollment;\n  const isCompleted = enrollment?.status === \"completed\";\n  const progress = enrollment?.progress || 0;\n\n  const wingColor = course.wing === \"sanctum\" \n    ? \"from-mystical-500 to-mystical-700\" \n    : \"from-ethereal-500 to-ethereal-700\";\n\n  const wingTextColor = course.wing === \"sanctum\" ? \"text-mystical-300\" : \"text-ethereal-300\";\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      <section className=\"relative z-10 py-16\">\n        <div className=\"max-w-4xl mx-auto px-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/courses\")}\n            className=\"mb-8 text-cosmic-400 hover:text-cosmic-300\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Courses\n          </Button>\n\n          <div className=\"crystal-border rounded-3xl p-8 bg-cosmic-800/50 backdrop-blur-sm mb-8\">\n            <div className=\"flex items-start justify-between mb-6\">\n              <div className=\"flex-1\">\n                <Badge className={`${course.wing === 'sanctum' ? 'bg-mystical-900/50 text-mystical-400' : 'bg-ethereal-900/50 text-ethereal-400'} mb-4`}>\n                  {course.code}\n                </Badge>\n                <h1 className=\"text-4xl font-serif font-bold text-cosmic-50 mb-4\">\n                  {course.title}\n                </h1>\n                <p className=\"text-cosmic-400 mb-6 leading-relaxed\">\n                  {course.description}\n                </p>\n                \n                <div className=\"flex items-center gap-6 text-sm text-cosmic-500\">\n                  <div className=\"flex items-center gap-2\">\n                    <BookOpen className=\"w-4 h-4\" />\n                    <span>{lessons.length} Lessons</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Star className=\"w-4 h-4\" />\n                    <span>{course.xpReward} XP</span>\n                  </div>\n                  <Badge variant=\"outline\" className={wingTextColor}>\n                    {course.wing === \"sanctum\" ? \"Sanctum\" : \"Orrery\"}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div className={`w-24 h-24 bg-gradient-to-br ${wingColor} rounded-full flex items-center justify-center mystical-glow`}>\n                {isCompleted ? (\n                  <CheckCircle className=\"text-4xl text-white\" />\n                ) : isEnrolled ? (\n                  <BookOpen className=\"text-4xl text-white\" />\n                ) : (\n                  <Lock className=\"text-4xl text-white\" />\n                )}\n              </div>\n            </div>\n\n            {isEnrolled && (\n              <div className=\"mb-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-cosmic-300\">Progress</span>\n                  <span className=\"text-sm text-cosmic-400\">{progress}%</span>\n                </div>\n                <Progress value={progress} className=\"h-2\" />\n              </div>\n            )}\n\n            <div className=\"flex gap-4\">\n              {!isEnrolled ? (\n                <Button\n                  onClick={() => enrollMutation.mutate()}\n                  disabled={enrollMutation.isPending}\n                  className={`bg-gradient-to-r ${wingColor} hover:opacity-90 text-white`}\n                >\n                  {enrollMutation.isPending ? \"Enrolling...\" : \"Enroll in Course\"}\n                </Button>\n              ) : isCompleted ? (\n                <Badge className=\"bg-green-600 text-white px-4 py-2\">\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Completed\n                </Badge>\n              ) : (\n                <Button\n                  onClick={() => completeCourseMutation.mutate()}\n                  disabled={completeCourseMutation.isPending || progress < 100}\n                  className={`bg-gradient-to-r ${wingColor} hover:opacity-90 text-white`}\n                >\n                  {completeCourseMutation.isPending ? \"Completing...\" : \"Complete Course\"}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Lessons */}\n          {lessons.length > 0 && (\n            <div className=\"crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm\">\n              <h2 className=\"text-2xl font-serif font-bold text-cosmic-50 mb-6\">Course Lessons</h2>\n              \n              <div className=\"space-y-4\">\n                {lessons.map((lesson: any, index: number) => (\n                  <Card key={lesson.id} className=\"bg-cosmic-700/50 border-cosmic-600\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg text-cosmic-50 flex items-center gap-3\">\n                        <div className={`w-8 h-8 rounded-full bg-gradient-to-br ${wingColor} flex items-center justify-center text-white text-sm font-bold`}>\n                          {index + 1}\n                        </div>\n                        {lesson.title}\n                        <Badge variant=\"outline\" className=\"ml-auto text-cosmic-400\">\n                          +{lesson.xpReward} XP\n                        </Badge>\n                      </CardTitle>\n                    </CardHeader>\n                    {lesson.content && (\n                      <CardContent>\n                        <p className=\"text-cosmic-400 text-sm\">{lesson.content}</p>\n                      </CardContent>\n                    )}\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8313},"client/src/pages/athenaeum-courses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport Navigation from \"@/components/Navigation\";\nimport CourseCard from \"@/components/CourseCard\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Courses() {\n  const [, setLocation] = useLocation();\n  const [filter, setFilter] = useState(\"all\");\n\n  const { data: courses = [] } = useQuery<any[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/enrollments\"],\n  });\n\n  // Create enrollment lookup map\n  const enrollmentMap = (enrollments as any[]).reduce((acc: any, enrollment: any) => {\n    acc[enrollment.courseId] = enrollment;\n    return acc;\n  }, {});\n\n  const filteredCourses = (courses as any[]).filter((course: any) => {\n    if (filter === \"all\") return true;\n    if (filter === \"sanctum\") return course.wing === \"sanctum\";\n    if (filter === \"orrery\") return course.wing === \"orrery\";\n    if (filter === \"electives\") return course.isElective;\n    return true;\n  });\n\n  const handleCourseClick = (courseId: string) => {\n    setLocation(`/courses/${courseId}`);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      <section className=\"relative z-10 py-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-4xl font-serif font-bold text-ethereal-300 mb-4\">Sacred Curriculum</h3>\n            <p className=\"text-cosmic-400\">Explore the complete course offerings across both wings</p>\n          </div>\n          \n          {/* Course Filters */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            <Button\n              variant={filter === \"all\" ? \"default\" : \"outline\"}\n              onClick={() => setFilter(\"all\")}\n              className={filter === \"all\" ? \"bg-mystical-600 hover:bg-mystical-500\" : \"\"}\n            >\n              All Courses\n            </Button>\n            <Button\n              variant={filter === \"sanctum\" ? \"default\" : \"outline\"}\n              onClick={() => setFilter(\"sanctum\")}\n              className={filter === \"sanctum\" ? \"bg-mystical-600 hover:bg-mystical-500\" : \"\"}\n            >\n              Sanctum (SE)\n            </Button>\n            <Button\n              variant={filter === \"orrery\" ? \"default\" : \"outline\"}\n              onClick={() => setFilter(\"orrery\")}\n              className={filter === \"orrery\" ? \"bg-ethereal-600 hover:bg-ethereal-500\" : \"\"}\n            >\n              Orrery (OR)\n            </Button>\n            <Button\n              variant={filter === \"electives\" ? \"default\" : \"outline\"}\n              onClick={() => setFilter(\"electives\")}\n              className={filter === \"electives\" ? \"bg-golden-600 hover:bg-golden-500\" : \"\"}\n            >\n              Electives\n            </Button>\n          </div>\n          \n          {/* Course Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {filteredCourses.length > 0 ? (\n              filteredCourses.map((course: any) => (\n                <CourseCard\n                  key={course.id}\n                  course={course}\n                  enrollment={enrollmentMap[course.id]}\n                  onClick={() => handleCourseClick(course.id)}\n                />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-16\">\n                <p className=\"text-cosmic-400 text-xl\">No courses found for the selected filter.</p>\n                <p className=\"text-cosmic-500 mt-2\">Try adjusting your search criteria.</p>\n              </div>\n            )}\n          </div>\n\n          {/* Admin Quick Add Button (if needed) */}\n          <div className=\"text-center mt-16\">\n            <Link href=\"/admin\">\n              <Button variant=\"outline\" className=\"text-cosmic-400 border-cosmic-400 hover:bg-cosmic-800\">\n                Course Management (Admin)\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":4120},"client/src/pages/athenaeum-home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/Navigation\";\nimport ProgressCard from \"@/components/ProgressCard\";\nimport ElementalPaths from \"@/components/ElementalPaths\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Star, BookOpen, Tag, Scroll, Globe } from \"lucide-react\";\n\nexport default function Home() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/enrollments\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: userBadges = [] } = useQuery<any[]>({\n    queryKey: [\"/api/users/badges\"],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-mystical-500 to-ethereal-400 rounded-full flex items-center justify-center animate-pulse-glow\">\n            <BookOpen className=\"text-white text-2xl\" />\n          </div>\n          <p className=\"text-cosmic-300\">Loading the Athenaeum...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  const currentEnrollments = (enrollments as any[]).filter((e: any) => e.status === \"enrolled\");\n  const sanctumEnrollments = currentEnrollments.filter((e: any) => e.course?.wing === \"sanctum\");\n  const orreryEnrollments = currentEnrollments.filter((e: any) => e.course?.wing === \"orrery\");\n  const completedCount = (enrollments as any[]).filter((e: any) => e.status === \"completed\").length;\n\n  const userXp = (user as any)?.xp || 0;\n  const userLevel = (user as any)?.level || 'Neophyte';\n  const userElementalPath = (user as any)?.elementalPath || 'mixed';\n\n  const getNextLevel = () => {\n    if (userXp >= 1500) return \"Archon (Max)\";\n    if (userXp >= 750) return \"Archon\";\n    if (userXp >= 250) return \"Acolyte\";\n    return \"Prophyte\";\n  };\n\n  const getNextLevelXP = () => {\n    if (userXp >= 1500) return 1500;\n    if (userXp >= 750) return 1500;\n    if (userXp >= 250) return 750;\n    return 250;\n  };\n\n  const progressToNext = Math.min((userXp / getNextLevelXP()) * 100, 100);\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"relative z-10 py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 text-center\">\n          <div className=\"mb-12\">\n            <h2 className=\"text-6xl font-serif font-bold mb-6 bg-gradient-to-r from-ethereal-300 via-mystical-400 to-golden-400 bg-clip-text text-transparent\">\n              Choose Your Wing\n            </h2>\n            <p className=\"text-xl text-cosmic-300 max-w-3xl mx-auto leading-relaxed\">\n              The Athenaeum awaits you with two sacred paths of learning. Continue your journey through the cosmic library-school.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            <Link href=\"/courses?wing=sanctum\">\n              <div className=\"group cursor-pointer\">\n                <div className=\"crystal-border rounded-3xl p-8 h-full transition-all duration-500 hover:scale-105 hover:mystical-glow bg-cosmic-800/50 backdrop-blur-sm\">\n                  <div className=\"text-center\">\n                    <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-mystical-600 to-mystical-800 rounded-full flex items-center justify-center mystical-glow animate-float\">\n                      <Scroll className=\"text-3xl text-cosmic-50\" />\n                    </div>\n                    <h3 className=\"text-3xl font-serif font-bold text-mystical-300 mb-4\">Sanctum of Hidden Echoes</h3>\n                    <p className=\"text-cosmic-400 mb-6 italic\">West Wing</p>\n                    <p className=\"text-cosmic-300 mb-8 leading-relaxed\">\n                      Memory, lineage, history, and the deep ancestral archive. Candlelit halls where lore-keepers whisper to the bones of the past.\n                    </p>\n                    \n                    <div className=\"space-y-3 text-left mb-8\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-mystical-400 rounded-full\" />\n                        <span className=\"text-sm text-cosmic-300\">Ancestral Wisdom & Cultural Repair</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-mystical-400 rounded-full\" />\n                        <span className=\"text-sm text-cosmic-300\">Shadow Work & Healing Patterns</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-mystical-400 rounded-full\" />\n                        <span className=\"text-sm text-cosmic-300\">Creating Personal Codex</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Link>\n            \n            <Link href=\"/courses?wing=orrery\">\n              <div className=\"group cursor-pointer\">\n                <div className=\"crystal-border rounded-3xl p-8 h-full transition-all duration-500 hover:scale-105 hover:mystical-glow bg-cosmic-800/50 backdrop-blur-sm\">\n                  <div className=\"text-center\">\n                    <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-ethereal-500 to-ethereal-700 rounded-full flex items-center justify-center mystical-glow animate-float\">\n                      <Globe className=\"text-3xl text-cosmic-50\" />\n                    </div>\n                    <h3 className=\"text-3xl font-serif font-bold text-ethereal-300 mb-4\">Orrery of Obscured Realms</h3>\n                    <p className=\"text-cosmic-400 mb-6 italic\">East Wing</p>\n                    <p className=\"text-cosmic-300 mb-8 leading-relaxed\">\n                      The cosmic, the future, mapping unseen worlds. Starlit observatories where arcane cartographers chart realms beyond perception.\n                    </p>\n                    \n                    <div className=\"space-y-3 text-left mb-8\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-ethereal-400 rounded-full\" />\n                        <span className=\"text-sm text-cosmic-300\">Cosmic Navigation & Astrology</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-ethereal-400 rounded-full\" />\n                        <span className=\"text-sm text-cosmic-300\">Elemental Sciences & Magic</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-ethereal-400 rounded-full\" />\n                        <span className=\"text-sm text-cosmic-300\">Astral Operations & Journeys</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Progress Overview */}\n      <section className=\"relative z-10 py-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-4xl font-serif font-bold text-ethereal-300 mb-4\">Your Journey Progress</h3>\n            <p className=\"text-cosmic-400\">Track your advancement through the sacred curriculum</p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n            <div className=\"crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-golden-400 to-golden-600 rounded-full flex items-center justify-center mystical-glow\">\n                <Star className=\"text-2xl text-white\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-golden-400 mb-2\">Current Level</h4>\n              <p className=\"text-3xl font-bold text-cosmic-50\">{userLevel}</p>\n              <p className=\"text-sm text-cosmic-400\">{userXp} / {getNextLevelXP()} XP</p>\n              <div className=\"mt-4 bg-cosmic-700 rounded-full h-2\">\n                <div \n                  className=\"bg-gradient-to-r from-golden-400 to-golden-600 h-2 rounded-full transition-all duration-500\" \n                  style={{ width: `${progressToNext}%` }}\n                />\n              </div>\n            </div>\n            \n            <div className=\"crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-mystical-500 to-mystical-700 rounded-full flex items-center justify-center mystical-glow\">\n                <BookOpen className=\"text-2xl text-white\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-mystical-400 mb-2\">Courses Completed</h4>\n              <p className=\"text-3xl font-bold text-cosmic-50\">{completedCount}</p>\n              <p className=\"text-sm text-cosmic-400\">across both wings</p>\n            </div>\n            \n            <div className=\"crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-ethereal-500 to-ethereal-700 rounded-full flex items-center justify-center mystical-glow\">\n                <Tag className=\"text-2xl text-white\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-ethereal-400 mb-2\">Badges Earned</h4>\n              <p className=\"text-3xl font-bold text-cosmic-50\">{(userBadges as any[]).length}</p>\n              <p className=\"text-sm text-cosmic-400\">sacred achievements</p>\n            </div>\n          </div>\n          \n          {/* Current Courses */}\n          {currentEnrollments.length > 0 && (\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <div className=\"crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm\">\n                <h4 className=\"text-2xl font-serif font-bold text-mystical-300 mb-6 flex items-center\">\n                  <Scroll className=\"mr-3\" />\n                  Sanctum Progress\n                </h4>\n                \n                <div className=\"space-y-4\">\n                  {sanctumEnrollments.length > 0 ? (\n                    sanctumEnrollments.map((enrollment: any) => (\n                      <ProgressCard key={enrollment.id} enrollment={enrollment} />\n                    ))\n                  ) : (\n                    <p className=\"text-cosmic-400 text-center py-4\">No active Sanctum courses</p>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"crystal-border rounded-2xl p-6 bg-cosmic-800/50 backdrop-blur-sm\">\n                <h4 className=\"text-2xl font-serif font-bold text-ethereal-300 mb-6 flex items-center\">\n                  <Globe className=\"mr-3\" />\n                  Orrery Progress\n                </h4>\n                \n                <div className=\"space-y-4\">\n                  {orreryEnrollments.length > 0 ? (\n                    orreryEnrollments.map((enrollment: any) => (\n                      <ProgressCard key={enrollment.id} enrollment={enrollment} />\n                    ))\n                  ) : (\n                    <p className=\"text-cosmic-400 text-center py-4\">No active Orrery courses</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Elemental Paths */}\n      <ElementalPaths currentPath={userElementalPath} />\n    </div>\n  );\n}\n","size_bytes":12381},"client/src/pages/athenaeum-login.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Lock, Mail, Eye, EyeOff } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\n\nexport default function AthenaeumLogin() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Simple admin credential check\n    if (email === \"beca@jakintzaruha.com\" && password === \"Raquel8388$$\") {\n      // Store admin session\n      localStorage.setItem(\"athenaeum_admin\", \"true\");\n      localStorage.setItem(\"admin_email\", email);\n      \n      toast({\n        title: \"Sacred Access Granted\",\n        description: \"Welcome to the Athenaeum, Sacred Administrator.\",\n        duration: 5000,\n      });\n      \n      // Redirect to Admin Dashboard\n      setTimeout(() => {\n        setLocation(\"/admin\");\n      }, 1000);\n    } else {\n      toast({\n        title: \"Access Denied\",\n        description: \"The cosmic guardians do not recognize these credentials.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    }\n    \n    setIsLoading(false);\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white flex items-center justify-center\" \n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/80\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"absolute top-0 left-0 right-0 z-50 p-6\">\n        <Link \n          href=\"/\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          ← Back to Sacred Remembering\n        </Link>\n      </nav>\n\n      <div className=\"relative z-10 w-full max-w-md px-6\">\n        <motion.div\n          {...fadeInUp}\n          className=\"mystical-border p-8 rounded-lg grimoire-texture text-center\"\n        >\n          <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-golden-rune to-cosmic-blue rounded-full flex items-center justify-center\">\n            <Lock className=\"w-10 h-10 text-void-black\" />\n          </div>\n          \n          <h1 className=\"font-gothic text-3xl text-golden-rune mb-4\">\n            Sacred Gateway\n          </h1>\n          \n          <p className=\"text-silver-star/90 mb-8\">\n            Enter your sacred credentials to access the Athenaeum's inner sanctum.\n          </p>\n\n          <form onSubmit={handleLogin} className=\"space-y-6\">\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-3 w-5 h-5 text-silver-star/60\" />\n              <Input\n                type=\"email\"\n                placeholder=\"Sacred email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"pl-10 bg-cosmic-blue/30 border border-golden-rune/50 rounded-lg px-6 py-4 text-ethereal-white placeholder:text-silver-star/70 focus:border-golden-rune focus:outline-none transition-colors\"\n                required\n              />\n            </div>\n\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 w-5 h-5 text-silver-star/60\" />\n              <Input\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Sacred password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"pl-10 pr-10 bg-cosmic-blue/30 border border-golden-rune/50 rounded-lg px-6 py-4 text-ethereal-white placeholder:text-silver-star/70 focus:border-golden-rune focus:outline-none transition-colors\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-3 text-silver-star/60 hover:text-golden-rune transition-colors\"\n              >\n                {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n              </button>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-golden-rune to-cosmic-blue hover:from-golden-rune/90 hover:to-cosmic-blue/90 text-void-black font-semibold py-3 transition-all duration-500 hover:scale-105 relative z-50\"\n              style={{ pointerEvents: 'auto' }}\n            >\n              {isLoading ? \"Seeking Permission...\" : \"Enter the Athenaeum\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 p-4 bg-golden-rune/10 border border-golden-rune/30 rounded-lg\">\n            <p className=\"text-golden-rune text-sm font-semibold\">\n              🔮 Admin Access Only\n            </p>\n            <p className=\"text-silver-star/70 text-xs mt-1\">\n              This portal is reserved for the sacred administrator to oversee the cosmic library-school.\n            </p>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":5831},"client/src/pages/athenaeum-progress.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport ProgressCard from \"@/components/ProgressCard\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress as ProgressBar } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, BookOpen, Award, Calendar } from \"lucide-react\";\n\nexport default function Progress() {\n  const { user } = useAuth();\n\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/enrollments\"],\n  });\n\n  const { data: journalEntries = [] } = useQuery<any[]>({\n    queryKey: [\"/api/journal\"],\n  });\n\n  const completedEnrollments = (enrollments as any[]).filter((e: any) => e.status === \"completed\");\n  const activeEnrollments = (enrollments as any[]).filter((e: any) => e.status === \"enrolled\");\n  \n  const sanctumEnrollments = activeEnrollments.filter((e: any) => e.course?.wing === \"sanctum\");\n  const orreryEnrollments = activeEnrollments.filter((e: any) => e.course?.wing === \"orrery\");\n\n  const totalXP = (user as any)?.xp || 0;\n  const currentLevel = (user as any)?.level || \"Neophyte\";\n\n  const getNextLevelXP = () => {\n    if (totalXP >= 1500) return 1500;\n    if (totalXP >= 750) return 1500;\n    if (totalXP >= 250) return 750;\n    return 250;\n  };\n\n  const getLevelProgress = () => {\n    const nextXP = getNextLevelXP();\n    return Math.min((totalXP / nextXP) * 100, 100);\n  };\n\n  const getRecentActivity = () => {\n    const recentEntries = (journalEntries as any[])\n      .slice(0, 5)\n      .map((entry: any) => ({\n        ...entry,\n        type: \"journal\",\n        date: new Date(entry.createdAt),\n      }));\n\n    const recentCompletions = completedEnrollments\n      .filter((e: any) => e.completedAt)\n      .slice(0, 3)\n      .map((enrollment: any) => ({\n        ...enrollment,\n        type: \"completion\",\n        date: new Date(enrollment.completedAt),\n      }));\n\n    return [...recentEntries, ...recentCompletions]\n      .sort((a, b) => b.date.getTime() - a.date.getTime())\n      .slice(0, 8);\n  };\n\n  const recentActivity = getRecentActivity();\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      <section className=\"relative z-10 py-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-serif font-bold text-ethereal-300 mb-4\">Your Sacred Journey</h1>\n            <p className=\"text-cosmic-400\">Track your progression through the mystical curriculum</p>\n          </div>\n\n          {/* Level Progress Overview */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-12\">\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm border-golden-400/30\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-golden-400 flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Current Level\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50 mb-2\">{currentLevel}</p>\n                <p className=\"text-sm text-cosmic-400 mb-3\">{totalXP} / {getNextLevelXP()} XP</p>\n                <ProgressBar value={getLevelProgress()} className=\"h-2\" />\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-mystical-400 flex items-center gap-2\">\n                  <BookOpen className=\"w-5 h-5\" />\n                  Active Courses\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{activeEnrollments.length}</p>\n                <p className=\"text-sm text-cosmic-400\">in progress</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-ethereal-400 flex items-center gap-2\">\n                  <Award className=\"w-5 h-5\" />\n                  Completed\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{completedEnrollments.length}</p>\n                <p className=\"text-sm text-cosmic-400\">courses finished</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-golden-400 flex items-center gap-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Journal Entries\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-cosmic-50\">{journalEntries.length}</p>\n                <p className=\"text-sm text-cosmic-400\">reflections written</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Wing Progress */}\n          <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-mystical-300 text-2xl font-serif\">\n                  Sanctum of Hidden Echoes\n                </CardTitle>\n                <p className=\"text-cosmic-400\">West Wing Progress</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {sanctumEnrollments.length > 0 ? (\n                  sanctumEnrollments.map((enrollment: any) => (\n                    <ProgressCard key={enrollment.id} enrollment={enrollment} />\n                  ))\n                ) : (\n                  <p className=\"text-cosmic-500 text-center py-8\">\n                    No active courses in the Sanctum wing\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-ethereal-300 text-2xl font-serif\">\n                  Orrery of Obscured Realms\n                </CardTitle>\n                <p className=\"text-cosmic-400\">East Wing Progress</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {orreryEnrollments.length > 0 ? (\n                  orreryEnrollments.map((enrollment: any) => (\n                    <ProgressCard key={enrollment.id} enrollment={enrollment} />\n                  ))\n                ) : (\n                  <p className=\"text-cosmic-500 text-center py-8\">\n                    No active courses in the Orrery wing\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activity */}\n          <Card className=\"crystal-border bg-cosmic-800/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-ethereal-300 text-2xl font-serif\">\n                Recent Activity\n              </CardTitle>\n              <p className=\"text-cosmic-400\">Your latest achievements and reflections</p>\n            </CardHeader>\n            <CardContent>\n              {recentActivity.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {recentActivity.map((activity: any, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 bg-cosmic-700/50 rounded-xl\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                          activity.type === \"journal\" \n                            ? \"bg-golden-600\" \n                            : \"bg-green-600\"\n                        }`}>\n                          {activity.type === \"journal\" ? (\n                            <Calendar className=\"w-5 h-5 text-white\" />\n                          ) : (\n                            <Award className=\"w-5 h-5 text-white\" />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-cosmic-50\">\n                            {activity.type === \"journal\" \n                              ? \"Journal Entry\"\n                              : `Completed ${activity.course?.title}`\n                            }\n                          </p>\n                          <p className=\"text-sm text-cosmic-400\">\n                            {activity.date.toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-cosmic-400\">\n                        {activity.type === \"journal\" ? \"+10 XP\" : `+${activity.course?.xpReward || 0} XP`}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-cosmic-500 text-center py-8\">\n                  No recent activity. Start your mystical journey!\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":9515},"client/src/pages/athenaeum-simple.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Book, Star, Scroll, Globe, Crown, Sparkles, BookOpen } from \"lucide-react\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\n\nexport default function AthenaeumSimple() {\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\" \n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/70\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"absolute top-0 left-0 right-0 z-50 p-6\">\n        <Link \n          href=\"/\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          ← Back to Sacred Remembering\n        </Link>\n      </nav>\n\n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          {/* Header */}\n          <motion.div \n            className=\"text-center mb-16\"\n            {...fadeInUp}\n          >\n            <h1 className=\"font-gothic text-5xl md:text-7xl font-semibold mb-6 text-golden-rune\">\n              The Athenaeum\n            </h1>\n            <p className=\"text-xl md:text-2xl text-silver-star/90 leading-relaxed max-w-4xl mx-auto\">\n              Your cosmic library-school where ancient wisdom meets modern awakening. \n              Choose your sacred wing and begin your journey of mystical learning.\n            </p>\n          </motion.div>\n\n          {/* Wings Selection */}\n          <div className=\"grid lg:grid-cols-2 gap-8 mb-16\">\n            {/* Sanctum of Hidden Echoes */}\n            <motion.div\n              className=\"mystical-border p-8 rounded-lg grimoire-texture bg-gradient-to-br from-deep-purple/20 to-shadow-purple/20 hover:scale-105 transition-transform cursor-pointer\"\n              initial={{ opacity: 0, x: -30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.3 }}\n            >\n              <div className=\"text-center\">\n                <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-mystical-600 to-mystical-800 rounded-full flex items-center justify-center\">\n                  <Scroll className=\"w-10 h-10 text-ethereal-white\" />\n                </div>\n                <h3 className=\"font-gothic text-3xl text-golden-rune mb-4\">\n                  Sanctum of Hidden Echoes\n                </h3>\n                <p className=\"text-silver-star/90 mb-6 italic\">West Wing</p>\n                <p className=\"text-ethereal-white/90 mb-8 leading-relaxed\">\n                  Memory, lineage, history, and the deep ancestral archive. Candlelit halls where lore-keepers whisper to the bones of the past.\n                </p>\n                \n                <div className=\"space-y-3 text-left mb-8\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Sparkles className=\"w-4 h-4 text-golden-rune\" />\n                    <span className=\"text-sm text-ethereal-white/80\">Ancestral Wisdom & Cultural Repair</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Sparkles className=\"w-4 h-4 text-golden-rune\" />\n                    <span className=\"text-sm text-ethereal-white/80\">Shadow Work & Healing Patterns</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Sparkles className=\"w-4 h-4 text-golden-rune\" />\n                    <span className=\"text-sm text-ethereal-white/80\">Creating Personal Codex</span>\n                  </div>\n                </div>\n\n                <div className=\"bg-golden-rune/10 border border-golden-rune/30 rounded-lg p-4 mb-6\">\n                  <p className=\"text-golden-rune font-semibold\">Coming Soon</p>\n                  <p className=\"text-silver-star/70 text-sm\">The sacred halls are being prepared</p>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Orrery of Obscured Realms */}\n            <motion.div\n              className=\"mystical-border p-8 rounded-lg grimoire-texture bg-gradient-to-br from-cosmic-blue/20 to-ethereal-blue/20 hover:scale-105 transition-transform cursor-pointer\"\n              initial={{ opacity: 0, x: 30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.5 }}\n            >\n              <div className=\"text-center\">\n                <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-ethereal-600 to-cosmic-600 rounded-full flex items-center justify-center\">\n                  <Globe className=\"w-10 h-10 text-ethereal-white\" />\n                </div>\n                <h3 className=\"font-gothic text-3xl text-golden-rune mb-4\">\n                  Orrery of Obscured Realms\n                </h3>\n                <p className=\"text-silver-star/90 mb-6 italic\">East Wing</p>\n                <p className=\"text-ethereal-white/90 mb-8 leading-relaxed\">\n                  The study of other worlds, dimensions beyond the veil, and cosmic mechanics. Star-maps and dimensional doorways await.\n                </p>\n                \n                <div className=\"space-y-3 text-left mb-8\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Star className=\"w-4 h-4 text-golden-rune\" />\n                    <span className=\"text-sm text-ethereal-white/80\">Astral Projection & Dimensional Travel</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Star className=\"w-4 h-4 text-golden-rune\" />\n                    <span className=\"text-sm text-ethereal-white/80\">Cosmic Mechanics & Universal Laws</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Star className=\"w-4 h-4 text-golden-rune\" />\n                    <span className=\"text-sm text-ethereal-white/80\">Interdimensional Communication</span>\n                  </div>\n                </div>\n\n                <div className=\"bg-golden-rune/10 border border-golden-rune/30 rounded-lg p-4 mb-6\">\n                  <p className=\"text-golden-rune font-semibold\">Coming Soon</p>\n                  <p className=\"text-silver-star/70 text-sm\">The cosmic observatory is aligning</p>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Center Message */}\n          <motion.div\n            className=\"text-center mystical-border p-8 rounded-lg grimoire-texture\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.7 }}\n          >\n            <Crown className=\"w-16 h-16 mx-auto mb-6 text-golden-rune\" />\n            <h3 className=\"font-gothic text-3xl text-golden-rune mb-4\">\n              The Sacred Academy Awaits\n            </h3>\n            <p className=\"text-xl text-silver-star/90 leading-relaxed mb-6\">\n              The full Athenaeum experience with course management, progress tracking, and certificates is currently being infused with deeper cosmic energies.\n            </p>\n            <div className=\"flex justify-center items-center space-x-2 text-ethereal-white/70 mb-6\">\n              <Sparkles className=\"w-5 h-5 animate-pulse\" />\n              <span>Mystical renovation in progress</span>\n              <Sparkles className=\"w-5 h-5 animate-pulse\" />\n            </div>\n            \n            <Link href=\"/athenaeum/login-portal\">\n              <button className=\"inline-flex items-center bg-gradient-to-r from-mystical-500 to-ethereal-500 hover:from-mystical-400 hover:to-ethereal-400 text-void-black font-semibold px-8 py-4 rounded-lg hover:scale-105 transition-transform\">\n                <BookOpen className=\"mr-3 w-6 h-6\" />\n                Enter Full Athenaeum\n              </button>\n            </Link>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":8354},"client/src/pages/sacred-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Moon, Sun, Star, Flame, Leaf, Snowflake, Crown, Clock, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\nimport type { SacredEvent, YearlyConfiguration } from \"@shared/schema\";\n\nconst seasonColors = {\n  winter: \"from-blue-900/50 to-indigo-800/50\",\n  spring: \"from-green-700/50 to-emerald-600/50\", \n  summer: \"from-yellow-600/50 to-orange-500/50\",\n  fall: \"from-orange-700/50 to-red-600/50\"\n};\n\nconst festivalIcons = {\n  yule: Snowflake,\n  ostara: Leaf,\n  beltane: Flame,\n  solstice: Sun,\n  lunar: Moon,\n  seasonal: Star\n};\n\nexport default function SacredCalendar() {\n  const [selectedEvent, setSelectedEvent] = useState<SacredEvent | null>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: sacredEvents = [], isLoading: eventsLoading } = useQuery<SacredEvent[]>({\n    queryKey: ['/api/sacred-events']\n  });\n\n  const { data: yearlyConfig } = useQuery<YearlyConfiguration>({\n    queryKey: ['/api/yearly-configurations', new Date().getFullYear().toString()]\n  });\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  const categorizedEvents = {\n    seasonal: sacredEvents.filter(event => event.category === 'seasonal'),\n    lunar: sacredEvents.filter(event => event.category === 'lunar'),\n    cosmic: sacredEvents.filter(event => event.category === 'cosmic'),\n    ritual: sacredEvents.filter(event => event.category === 'ritual')\n  };\n\n  const renderEventCard = (event: SacredEvent) => {\n    const IconComponent = festivalIcons[event.festivalType as keyof typeof festivalIcons] || Star;\n    \n    return (\n      <motion.div\n        key={event.id}\n        className=\"mystical-border rounded-lg grimoire-texture p-4 cursor-pointer hover:scale-105 transition-all duration-300\"\n        onClick={() => setSelectedEvent(event)}\n        whileHover={{ y: -3 }}\n        data-testid={`card-event-${event.id}`}\n      >\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center\">\n            <IconComponent className=\"w-6 h-6 text-golden-rune mr-3\" />\n            <div>\n              <h3 className=\"text-lg font-bold text-ethereal-white\">{event.title}</h3>\n              <p className=\"text-sm text-silver-star/80\">{event.startDate} - {event.endDate}</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-deep-purple/30 text-silver-star\">\n            {event.category}\n          </Badge>\n        </div>\n        \n        <p className=\"text-silver-star/90 text-sm mb-3 line-clamp-2\">\n          {event.description}\n        </p>\n        \n        {event.tags && event.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {event.tags.slice(0, 3).map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs border-silver-star/30 text-silver-star/70\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n      </motion.div>\n    );\n  };\n\n  if (selectedEvent) {\n    const IconComponent = festivalIcons[selectedEvent.festivalType as keyof typeof festivalIcons] || Star;\n    \n    return (\n      <section \n        className=\"min-h-screen text-ethereal-white\"\n        style={{\n          backgroundImage: `url(${backgroundImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundAttachment: 'fixed'\n        }}\n        data-testid=\"event-detail-section\"\n      >\n        <div className=\"absolute inset-0 bg-black/70\"></div>\n        \n        <div className=\"relative z-10 py-20\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <motion.div {...fadeInUp} className=\"mb-8\">\n              <Button \n                onClick={() => setSelectedEvent(null)}\n                variant=\"ghost\" \n                className=\"text-golden-rune hover:text-silver-star\"\n                data-testid=\"button-back-to-calendar\"\n              >\n                <ArrowLeft className=\"mr-2 w-4 h-4\" />\n                Back to Sacred Calendar\n              </Button>\n            </motion.div>\n\n            <motion.div \n              className=\"mystical-border p-8 rounded-lg grimoire-texture\"\n              {...fadeInUp}\n            >\n              <div className=\"flex items-center mb-6\">\n                <IconComponent className=\"w-8 h-8 text-golden-rune mr-4\" />\n                <div>\n                  <h1 className=\"font-gothic text-3xl font-bold text-golden-rune mb-2\">\n                    {selectedEvent.title}\n                  </h1>\n                  <p className=\"text-silver-star/80 text-lg\">\n                    {selectedEvent.startDate} - {selectedEvent.endDate}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                <Card className=\"bg-black/40 mystical-border\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-golden-rune text-sm\">Category</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-ethereal-white capitalize\">{selectedEvent.category}</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-black/40 mystical-border\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-golden-rune text-sm\">Recurrence</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-ethereal-white\">\n                      {selectedEvent.isRecurring === \"true\" ? \"Annual\" : \"One-time\"}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-black/40 mystical-border\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-golden-rune text-sm\">Festival Type</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-ethereal-white capitalize\">\n                      {selectedEvent.festivalType || \"General\"}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-golden-rune mb-3\">Description</h3>\n                  <p className=\"text-silver-star/90 leading-relaxed\">\n                    {selectedEvent.description}\n                  </p>\n                </div>\n\n                {selectedEvent.ritualFlow && (\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-golden-rune mb-3\">Ritual Flow</h3>\n                    <div className=\"bg-black/30 rounded-lg p-4 mystical-border\">\n                      <pre className=\"text-silver-star/90 whitespace-pre-wrap font-mono text-sm\">\n                        {JSON.stringify(selectedEvent.ritualFlow, null, 2)}\n                      </pre>\n                    </div>\n                  </div>\n                )}\n\n                {selectedEvent.yearlyVariables && (\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-golden-rune mb-3\">Yearly Variables</h3>\n                    <div className=\"bg-black/30 rounded-lg p-4 mystical-border\">\n                      <pre className=\"text-silver-star/90 whitespace-pre-wrap font-mono text-sm\">\n                        {JSON.stringify(selectedEvent.yearlyVariables, null, 2)}\n                      </pre>\n                    </div>\n                  </div>\n                )}\n\n                {selectedEvent.tags && selectedEvent.tags.length > 0 && (\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-golden-rune mb-3\">Tags</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedEvent.tags.map((tag, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"bg-deep-purple/30 text-silver-star\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"sacred-calendar-section\"\n    >\n      <div className=\"absolute inset-0 bg-black/60\"></div>\n      \n      <div className=\"relative z-10 py-20\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          {/* Header */}\n          <motion.div \n            className=\"text-center mb-16\"\n            {...fadeInUp}\n          >\n            <h1 className=\"font-gothic text-4xl md:text-6xl font-semibold mb-6 text-golden-rune\" data-testid=\"calendar-title\">\n              Sacred Living Year\n            </h1>\n            <p className=\"text-xl md:text-2xl text-silver-star/90 leading-relaxed max-w-3xl mx-auto\" data-testid=\"calendar-description\">\n              A perpetual ritual almanac of remembrance and becoming\n            </p>\n          </motion.div>\n\n          {/* Year Configuration */}\n          {yearlyConfig && (\n            <motion.div \n              className=\"mb-12 mystical-border rounded-xl p-6 grimoire-texture\"\n              {...fadeInUp}\n            >\n              <h2 className=\"text-2xl font-semibold text-golden-rune mb-4 flex items-center\">\n                <Crown className=\"mr-3 w-6 h-6\" />\n                {yearlyConfig.year} - Year Configuration\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-golden-rune font-semibold mb-2\">Zodiac Animal</h3>\n                  <p className=\"text-ethereal-white text-lg\">{yearlyConfig.zodiacAnimal}</p>\n                  <p className=\"text-silver-star/80\">{yearlyConfig.zodiacElement} Element</p>\n                </div>\n                <div className=\"text-center\">\n                  <h3 className=\"text-golden-rune font-semibold mb-2\">Intention Word</h3>\n                  <p className=\"text-ethereal-white text-xl font-semibold\">{yearlyConfig.intentionWord}</p>\n                </div>\n                <div className=\"text-center\">\n                  <h3 className=\"text-golden-rune font-semibold mb-2\">Lunar New Year</h3>\n                  <p className=\"text-ethereal-white text-lg\">{yearlyConfig.lunarNewYear}</p>\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Sacred Events Tabs */}\n          <motion.div {...fadeInUp}>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-5 mb-8 bg-black/50 mystical-border\">\n                <TabsTrigger \n                  value=\"upcoming\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-upcoming\"\n                >\n                  <Clock className=\"mr-2 w-4 h-4\" />\n                  Upcoming\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"seasonal\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-seasonal\"\n                >\n                  <Leaf className=\"mr-2 w-4 h-4\" />\n                  Seasonal\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"lunar\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-lunar\"\n                >\n                  <Moon className=\"mr-2 w-4 h-4\" />\n                  Lunar\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"overview\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-overview\"\n                >\n                  <Calendar className=\"mr-2 w-4 h-4\" />\n                  All Events\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"yearly\" \n                  className=\"text-silver-star data-[state=active]:text-golden-rune data-[state=active]:bg-deep-purple/30\"\n                  data-testid=\"tab-yearly\"\n                >\n                  <Crown className=\"mr-2 w-4 h-4\" />\n                  Year View\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"upcoming\" className=\"space-y-6\">\n                <div className=\"mb-6 text-center\">\n                  <h3 className=\"text-2xl font-semibold text-golden-rune mb-2\">\n                    Next Sacred Celebrations\n                  </h3>\n                  <p className=\"text-silver-star/80\">\n                    Look ahead to prepare for upcoming rituals and traditions\n                  </p>\n                </div>\n                \n                {/* Next Major Events */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {/* Show next few events based on current date */}\n                  {categorizedEvents.seasonal.slice(0, 3).map(renderEventCard)}\n                  {categorizedEvents.lunar.slice(0, 3).map(renderEventCard)}\n                </div>\n\n                {/* Monthly Calendar Preview */}\n                <div className=\"mt-12 mystical-border rounded-xl p-6 grimoire-texture\">\n                  <h4 className=\"text-xl font-semibold text-golden-rune mb-4 flex items-center\">\n                    <Calendar className=\"mr-3 w-5 h-5\" />\n                    This Month's Sacred Dates\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between border-b border-silver-star/20 pb-1\">\n                        <span className=\"text-silver-star\">New Moon</span>\n                        <span className=\"text-golden-rune\">Next cycle</span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-silver-star/20 pb-1\">\n                        <span className=\"text-silver-star\">Full Moon</span>\n                        <span className=\"text-golden-rune\">Mid-cycle</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between border-b border-silver-star/20 pb-1\">\n                        <span className=\"text-silver-star\">Next Seasonal Festival</span>\n                        <span className=\"text-golden-rune\">Check events above</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {sacredEvents.map(renderEventCard)}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"seasonal\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {categorizedEvents.seasonal.map(renderEventCard)}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"lunar\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {categorizedEvents.lunar.map(renderEventCard)}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"yearly\" className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-semibold text-golden-rune mb-2\">\n                    Sacred Living Year Overview\n                  </h3>\n                  <p className=\"text-silver-star/80\">\n                    Your complete ritual almanac for spiritual celebration\n                  </p>\n                </div>\n\n                {/* Year at a Glance */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                  <Card className=\"bg-gradient-to-br from-blue-900/30 to-indigo-800/30 mystical-border\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-golden-rune text-sm flex items-center\">\n                        <Snowflake className=\"mr-2 w-4 h-4\" />\n                        Winter\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-xs text-silver-star/90\">\n                      <div>Dec 20-31: Yule</div>\n                      <div>Jan 29-Feb 15: Lunar New Year</div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-br from-green-700/30 to-emerald-600/30 mystical-border\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-golden-rune text-sm flex items-center\">\n                        <Leaf className=\"mr-2 w-4 h-4\" />\n                        Spring\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-xs text-silver-star/90\">\n                      <div>Mar 20-22: Ostara</div>\n                      <div>May 1: Beltane</div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-br from-yellow-600/30 to-orange-500/30 mystical-border\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-golden-rune text-sm flex items-center\">\n                        <Sun className=\"mr-2 w-4 h-4\" />\n                        Summer\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-xs text-silver-star/90\">\n                      <div>Jun 15-26: Solstice Fire</div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-br from-orange-700/30 to-red-600/30 mystical-border\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-golden-rune text-sm flex items-center\">\n                        <Flame className=\"mr-2 w-4 h-4\" />\n                        Autumn\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-xs text-silver-star/90\">\n                      <div>Sep 22-24: Fall Equinox</div>\n                      <div>Oct 30-Nov 2: Veil Festival</div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Monthly Lunar Cycles */}\n                <div className=\"mystical-border rounded-xl p-6 grimoire-texture\">\n                  <h4 className=\"text-xl font-semibold text-golden-rune mb-4 flex items-center\">\n                    <Moon className=\"mr-3 w-5 h-5\" />\n                    Monthly Lunar Practices\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <h5 className=\"text-golden-rune font-semibold mb-2\">New Moon Intentions</h5>\n                      <p className=\"text-silver-star/90 text-sm\">\n                        Monthly ritual for setting intentions and new beginnings. Light candles, write intentions, place under moonlight.\n                      </p>\n                    </div>\n                    <div>\n                      <h5 className=\"text-golden-rune font-semibold mb-2\">Full Moon Gratitude</h5>\n                      <p className=\"text-silver-star/90 text-sm\">\n                        Monthly ritual for release and gratitude. Create moon water, charge crystals, practice gratitude.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </motion.div>\n\n          {/* Quick Actions */}\n          <motion.div \n            className=\"text-center mt-16\"\n            {...fadeInUp}\n          >\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Link href=\"/astro-calendar\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-silver-star/50 text-silver-star hover:bg-silver-star/10\"\n                  data-testid=\"button-astro-calendar\"\n                >\n                  <Clock className=\"mr-2 w-4 h-4\" />\n                  View AstroCal\n                </Button>\n              </Link>\n              <Link href=\"/grimoires\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-silver-star/50 text-silver-star hover:bg-silver-star/10\"\n                  data-testid=\"button-grimoires\"\n                >\n                  <Calendar className=\"mr-2 w-4 h-4\" />\n                  Document in Grimoire\n                </Button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":22056},"client/src/pages/athenaeum-student-login.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Lock, Mail, Eye, EyeOff, BookOpen, GraduationCap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\n\nexport default function AthenaeumStudentLogin() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const fadeInUp = {\n    initial: { opacity: 0, y: 30 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 1, ease: \"easeOut\" }\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // Call the auth API for students/teachers\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        email,\n        password\n      });\n\n      const data = await response.json();\n      \n      if (response.ok) {\n        // Store user session\n        localStorage.setItem(\"athenaeum_user\", \"true\");\n        localStorage.setItem(\"user_email\", email);\n        localStorage.setItem(\"user_role\", data.role || \"student\");\n        localStorage.setItem(\"user_name\", data.name || \"\");\n        \n        toast({\n          title: \"Sacred Portal Opened\",\n          description: `Welcome to the Athenaeum, ${data.role === 'instructor' ? 'Esteemed Teacher' : 'Dear Student'}.`,\n          duration: 5000,\n        });\n        \n        // Redirect to full Athenaeum based on role\n        setTimeout(() => {\n          if (data.role === 'instructor') {\n            setLocation(\"/athenaeum/instructor\");\n          } else {\n            setLocation(\"/athenaeum/student\");\n          }\n        }, 1000);\n      } else {\n        throw new Error(data.message || \"Login failed\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Access Denied\",\n        description: \"The mystical guardians do not recognize these credentials. Please check your email and password.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    }\n    \n    setIsLoading(false);\n  };\n\n  return (\n    <section \n      className=\"min-h-screen text-ethereal-white flex items-center justify-center\" \n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/80\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"absolute top-0 left-0 right-0 z-50 p-6\">\n        <Link \n          href=\"/athenaeum\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          ← Back to Athenaeum\n        </Link>\n      </nav>\n\n      <div className=\"relative z-10 w-full max-w-md px-6\">\n        <motion.div\n          {...fadeInUp}\n          className=\"mystical-border p-8 rounded-lg grimoire-texture text-center\"\n        >\n          <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-mystical-400 to-ethereal-400 rounded-full flex items-center justify-center\">\n            <BookOpen className=\"w-10 h-10 text-void-black\" />\n          </div>\n          \n          <h1 className=\"font-gothic text-3xl text-golden-rune mb-4\">\n            Athenaeum Portal\n          </h1>\n          \n          <p className=\"text-silver-star/90 mb-8\">\n            Enter your sacred credentials to access your mystical learning journey.\n          </p>\n\n          <form onSubmit={handleLogin} className=\"space-y-6\">\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-3 w-5 h-5 text-silver-star/60\" />\n              <Input\n                type=\"email\"\n                placeholder=\"Student or teacher email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"pl-10 bg-mystical-600/30 border border-ethereal-400/50 rounded-lg px-6 py-4 text-ethereal-white placeholder:text-silver-star/70 focus:border-ethereal-400 focus:outline-none transition-colors\"\n                required\n              />\n            </div>\n\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 w-5 h-5 text-silver-star/60\" />\n              <Input\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"pl-10 pr-10 bg-mystical-600/30 border border-ethereal-400/50 rounded-lg px-6 py-4 text-ethereal-white placeholder:text-silver-star/70 focus:border-ethereal-400 focus:outline-none transition-colors\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-3 text-silver-star/60 hover:text-ethereal-400 transition-colors\"\n              >\n                {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n              </button>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-mystical-500 to-ethereal-500 hover:from-mystical-400 hover:to-ethereal-400 text-void-black font-semibold py-3 transition-all duration-500 hover:scale-105 relative z-50\"\n              style={{ pointerEvents: 'auto' }}\n            >\n              {isLoading ? \"Seeking Permission...\" : \"Enter the Athenaeum\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 space-y-4\">\n            <div className=\"p-4 bg-mystical-500/10 border border-mystical-400/30 rounded-lg\">\n              <p className=\"text-mystical-400 text-sm font-semibold flex items-center justify-center\">\n                <GraduationCap className=\"w-4 h-4 mr-2\" />\n                Students & Teachers\n              </p>\n              <p className=\"text-silver-star/70 text-xs mt-1\">\n                Access your courses, progress, and mystical learning materials.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <Link\n                href=\"/athenaeum/register\"\n                className=\"text-ethereal-400 hover:text-golden-rune text-sm transition-colors\"\n              >\n                Don't have an account? Request enrollment →\n              </Link>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":7001},"client/src/pages/pillar1-cultural-respect.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ArrowLeft, ChevronLeft, ChevronRight, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\nimport { CulturalRespectIcon } from \"@/components/pillar-icons\";\n\nexport default function Pillar1CulturalRespect() {\n  return (\n    <section \n      className=\"min-h-screen relative overflow-hidden\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"pillar1-cultural-respect\"\n    >\n      {/* Dark overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/80\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"relative z-50 p-6\">\n        <Link \n          href=\"/four-pillars\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n          data-testid=\"link-back-pillars\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          Return to Four Pillars\n        </Link>\n      </nav>\n      \n      <div className=\"relative z-10 container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n        >\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-6\">\n              <CulturalRespectIcon className=\"w-20 h-20 text-emerald-400\" />\n            </div>\n            <h1 className=\"font-gothic text-4xl md:text-5xl text-emerald-400 mb-4\">\n              Pillar I: Cultural Respect\n            </h1>\n            <h2 className=\"text-2xl text-silver-star/80 font-medium\">\n              Honoring what was erased\n            </h2>\n          </div>\n\n          {/* Core Principle */}\n          <div className=\"bg-gradient-to-b from-emerald-900/20 to-emerald-600/10 backdrop-blur-sm rounded-lg p-8 mb-8 border border-emerald-400/20\">\n            <h3 className=\"font-gothic text-2xl text-emerald-400 mb-4 text-center\">Core Principle</h3>\n            <p className=\"text-silver-star/90 leading-relaxed text-lg\">\n              Cultural Respect is the unwavering commitment to honor, protect, and defend the sacred traditions, \n              wisdom, and practices of all peoples. We stand against appropriation, assimilation, and erasure. \n              We recognize that culture is not costume, tradition is not trend, and spirituality is not commodity. \n              To practice cultural respect is to be a guardian of memory, a protector of lineage, and a defender \n              of the sacred right of all peoples to maintain their identity without theft or distortion.\n            </p>\n          </div>\n\n          {/* Key Commitments */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-emerald-400/20\">\n            <h3 className=\"font-gothic text-2xl text-emerald-400 mb-6 text-center\">Key Commitments</h3>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-gothic text-xl text-emerald-300 mb-3\">Against Appropriation</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We will not wear sacred symbols as fashion accessories</li>\n                  <li>• We will not practice closed traditions without proper initiation and permission</li>\n                  <li>• We distinguish between appreciation (which honors) and appropriation (which exploits)</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-emerald-300 mb-3\">Protecting Sacred Knowledge</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We honor elders as living libraries of wisdom</li>\n                  <li>• We guard traditions from theft, commercialization, and distortion</li>\n                  <li>• We seek permission, not forgiveness, when engaging with cultural practices</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-emerald-300 mb-3\">Reciprocity & Responsibility</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• What we receive, we give back through support and advocacy</li>\n                  <li>• What we inherit, we protect for future generations</li>\n                  <li>• We amplify Indigenous voices rather than speaking over them</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Practical Actions */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-emerald-400/20\">\n            <h3 className=\"font-gothic text-2xl text-emerald-400 mb-6 text-center\">Practical Actions</h3>\n            <ul className=\"text-silver-star/90 space-y-3\">\n              <li><strong className=\"text-emerald-300\">Cultural Education:</strong> Members study the histories and contexts of practices they wish to engage with</li>\n              <li><strong className=\"text-emerald-300\">Elder Councils:</strong> Direct relationships with cultural keepers and traditional practitioners</li>\n              <li><strong className=\"text-emerald-300\">Reparative Support:</strong> Financial and advocacy support for Indigenous communities and cultural preservation</li>\n              <li><strong className=\"text-emerald-300\">Decolonizing Practices:</strong> Examining and removing colonial influences from spiritual work</li>\n            </ul>\n          </div>\n\n          {/* Manifesto */}\n          <div className=\"bg-gradient-to-b from-emerald-900/30 to-black/60 backdrop-blur-sm rounded-lg p-8 mb-8 border-l-6 border-emerald-400\">\n            <h3 className=\"font-gothic text-2xl text-emerald-400 mb-6 text-center\">Manifesto Declarations</h3>\n            <div className=\"text-silver-star/95 leading-relaxed space-y-3 text-center italic\">\n              <p>We will not wear culture as costume.</p>\n              <p>We will not erase the blood, the struggle, or the memory.</p>\n              <p>We honor elders as living libraries,<br/>and we guard traditions from theft.</p>\n              <p>What we take, we give back.<br/>What we inherit, we protect.</p>\n              <p className=\"text-emerald-300 font-semibold not-italic text-lg\">\n                Cultural respect is not accessory — it is justice.\n              </p>\n            </div>\n          </div>\n\n          {/* Pillar Navigation */}\n          <div className=\"flex justify-center items-center gap-6 mt-12\">\n            <div className=\"opacity-50 cursor-not-allowed\">\n              <span className=\"inline-flex items-center text-silver-star/50\">\n                <ChevronLeft className=\"w-5 h-5 mr-1\" />\n                Previous Pillar\n              </span>\n            </div>\n\n            <Link \n              href=\"/four-pillars\"\n              className=\"inline-flex items-center text-golden-rune hover:text-emerald-400 transition-colors\"\n              data-testid=\"link-home\"\n            >\n              <Home className=\"w-5 h-5 mr-2\" />\n              Temple Home\n            </Link>\n\n            <Link \n              href=\"/pillar2-cosmic-vision\"\n              className=\"inline-flex items-center text-golden-rune hover:text-emerald-400 transition-colors group\"\n              data-testid=\"link-next-pillar\"\n            >\n              Next Pillar\n              <ChevronRight className=\"w-5 h-5 ml-1 group-hover:translate-x-1 transition-transform\" />\n            </Link>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":7871},"client/src/pages/pillar2-cosmic-vision.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ArrowLeft, ChevronLeft, ChevronRight, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\nimport { CosmicVisionIcon } from \"@/components/pillar-icons\";\n\nexport default function Pillar2CosmicVision() {\n  return (\n    <section \n      className=\"min-h-screen relative overflow-hidden\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"pillar2-cosmic-vision\"\n    >\n      {/* Dark overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/80\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"relative z-50 p-6\">\n        <Link \n          href=\"/four-pillars\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n          data-testid=\"link-back-pillars\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          Return to Four Pillars\n        </Link>\n      </nav>\n      \n      <div className=\"relative z-10 container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n        >\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-6\">\n              <CosmicVisionIcon className=\"w-20 h-20 text-violet-400\" />\n            </div>\n            <h1 className=\"font-gothic text-4xl md:text-5xl text-violet-400 mb-4\">\n              Pillar II: Cosmic Vision\n            </h1>\n            <h2 className=\"text-2xl text-silver-star/80 font-medium\">\n              Remembering our place in the universe\n            </h2>\n          </div>\n\n          {/* Core Principle */}\n          <div className=\"bg-gradient-to-b from-violet-900/20 to-purple-600/10 backdrop-blur-sm rounded-lg p-8 mb-8 border border-violet-400/20\">\n            <h3 className=\"font-gothic text-2xl text-violet-400 mb-4 text-center\">Core Principle</h3>\n            <p className=\"text-silver-star/90 leading-relaxed text-lg\">\n              Cosmic Vision is the practice of remembering that we are not separate from the universe — \n              we are the universe becoming conscious of itself. It is the refusal to live small when we \n              are made of starlight. This pillar calls us to lift our eyes from the grindstone to the \n              galaxies, to remember our cosmic inheritance, and to live as luminous threads in the great \n              web of existence.\n            </p>\n          </div>\n\n          {/* Key Commitments */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-violet-400/20\">\n            <h3 className=\"font-gothic text-2xl text-violet-400 mb-6 text-center\">Key Commitments</h3>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-gothic text-xl text-violet-300 mb-3\">Cosmic Consciousness</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We remember that we are stardust made flesh, cosmic dust dreaming itself awake</li>\n                  <li>• We practice seeing ourselves as part of an interconnected cosmic web</li>\n                  <li>• We honor the sacred marriage between matter and consciousness</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-violet-300 mb-3\">Celestial Wisdom</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We study the movements of planets, stars, and cosmic cycles as sources of guidance</li>\n                  <li>• We recognize astrology as both art and science, myth and mathematics</li>\n                  <li>• We listen to the sky as scripture, reading cosmic signs and seasonal wisdom</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-violet-300 mb-3\">Future Visioning</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We dream futures worthy of our cosmic heritage</li>\n                  <li>• We refuse to accept limitation when we are children of infinite space</li>\n                  <li>• We envision humanity's role in the larger cosmic story</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-violet-300 mb-3\">Wonder & Responsibility</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We balance cosmic wonder with earthly responsibility</li>\n                  <li>• We do not use spirituality to bypass social justice work</li>\n                  <li>• We remember: as above, so below — cosmic vision must translate into earthly action</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Practical Actions */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-violet-400/20\">\n            <h3 className=\"font-gothic text-2xl text-violet-400 mb-6 text-center\">Practical Actions</h3>\n            <ul className=\"text-silver-star/90 space-y-3\">\n              <li><strong className=\"text-violet-300\">Astrological Education:</strong> Comprehensive study of planetary cycles, natal charts, and cosmic timing</li>\n              <li><strong className=\"text-violet-300\">Cosmic Ceremonies:</strong> Rituals aligned with lunar phases, solar seasons, and planetary transits</li>\n              <li><strong className=\"text-violet-300\">Visioning Councils:</strong> Collective dreaming sessions for humanity's cosmic future</li>\n              <li><strong className=\"text-violet-300\">Stellar Observations:</strong> Regular gatherings for stargazing, cosmic meditation, and celestial study</li>\n            </ul>\n          </div>\n\n          {/* Manifesto */}\n          <div className=\"bg-gradient-to-b from-violet-900/30 to-black/60 backdrop-blur-sm rounded-lg p-8 mb-8 border-l-6 border-violet-400\">\n            <h3 className=\"font-gothic text-2xl text-violet-400 mb-6 text-center\">Manifesto Declarations</h3>\n            <div className=\"text-silver-star/95 leading-relaxed space-y-3 text-center italic\">\n              <p>We lift our eyes from the grindstone to the stars.</p>\n              <p>We remember that we are stardust made flesh.</p>\n              <p>We will not sever science from spirit,<br/>nor wonder from responsibility.</p>\n              <p>We dream futures worthy of our descendants,<br/>listening to the sky as scripture.</p>\n              <p className=\"text-violet-300 font-semibold not-italic text-lg\">\n                We live as luminous threads in a cosmic web.\n              </p>\n            </div>\n          </div>\n\n          {/* Pillar Navigation */}\n          <div className=\"flex justify-center items-center gap-6 mt-12\">\n            <Link \n              href=\"/pillar1-cultural-respect\"\n              className=\"inline-flex items-center text-golden-rune hover:text-violet-400 transition-colors group\"\n              data-testid=\"link-prev-pillar\"\n            >\n              <ChevronLeft className=\"w-5 h-5 mr-1 group-hover:translate-x-[-4px] transition-transform\" />\n              Previous Pillar\n            </Link>\n\n            <Link \n              href=\"/four-pillars\"\n              className=\"inline-flex items-center text-golden-rune hover:text-violet-400 transition-colors\"\n              data-testid=\"link-home\"\n            >\n              <Home className=\"w-5 h-5 mr-2\" />\n              Temple Home\n            </Link>\n\n            <Link \n              href=\"/pillar3-ancestral-stewardship\"\n              className=\"inline-flex items-center text-golden-rune hover:text-violet-400 transition-colors group\"\n              data-testid=\"link-next-pillar\"\n            >\n              Next Pillar\n              <ChevronRight className=\"w-5 h-5 ml-1 group-hover:translate-x-1 transition-transform\" />\n            </Link>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":8402},"client/src/pages/pillar3-ancestral-stewardship.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ArrowLeft, ChevronLeft, ChevronRight, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\nimport { AncestralStewardshipIcon } from \"@/components/pillar-icons\";\n\nexport default function Pillar3AncestralStewardship() {\n  return (\n    <section \n      className=\"min-h-screen relative overflow-hidden\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"pillar3-ancestral-stewardship\"\n    >\n      {/* Dark overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/80\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"relative z-50 p-6\">\n        <Link \n          href=\"/four-pillars\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n          data-testid=\"link-back-pillars\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          Return to Four Pillars\n        </Link>\n      </nav>\n      \n      <div className=\"relative z-10 container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n        >\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-6\">\n              <AncestralStewardshipIcon className=\"w-20 h-20 text-amber-400\" />\n            </div>\n            <h1 className=\"font-gothic text-4xl md:text-5xl text-amber-400 mb-4\">\n              Pillar III: Ancestral Stewardship\n            </h1>\n            <h2 className=\"text-2xl text-silver-star/80 font-medium\">\n              The relationship with time\n            </h2>\n          </div>\n\n          {/* Core Principle */}\n          <div className=\"bg-gradient-to-b from-amber-900/20 to-yellow-600/10 backdrop-blur-sm rounded-lg p-8 mb-8 border border-amber-400/20\">\n            <h3 className=\"font-gothic text-2xl text-amber-400 mb-4 text-center\">Core Principle</h3>\n            <p className=\"text-silver-star/90 leading-relaxed text-lg\">\n              Ancestral Stewardship is the act of walking through time with reverence. It is remembering \n              that we are not the beginning and we are not the end. We are the bridge: between the blood \n              that carried us here and the descendants who will inherit the soil we leave behind. To honor \n              this pillar is to reclaim memory, to repair the severed threads of lineage, and to ensure \n              that erasure does not win.\n            </p>\n          </div>\n\n          {/* Key Commitments */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-amber-400/20\">\n            <h3 className=\"font-gothic text-2xl text-amber-400 mb-6 text-center\">Key Commitments</h3>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-gothic text-xl text-amber-300 mb-3\">Memory as Resistance</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We commit to remembering what colonizers, empires, and oppressors tried to erase</li>\n                  <li>• We tell the stories of genocide, slavery, forced assimilation — not as tragedy porn, but as truth-telling that heals</li>\n                  <li>• We hold memory as a weapon against erasure, and as medicine for those yet to come</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-amber-300 mb-3\">Lineage & Continuity</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We honor our direct bloodlines and the wider human ancestry that binds us all</li>\n                  <li>• We recognize that every ritual, language, and story is a chain-link holding generations together</li>\n                  <li>• We do not abandon our dead to silence — we invite them to walk with us</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-amber-300 mb-3\">Repair & Responsibility</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We recognize inherited wounds and inherited privileges</li>\n                  <li>• We do not carry guilt as weight, but responsibility as fuel</li>\n                  <li>• We seek to repair what can be repaired, to return what was stolen, to name what was buried</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-amber-300 mb-3\">Living Legacy</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• We commit to being good ancestors — planting trees whose shade we will never sit in</li>\n                  <li>• We measure success not by immediate gain, but by generational thriving</li>\n                  <li>• We keep time not in hours or dollars, but in centuries and legacies</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Practical Actions */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-amber-400/20\">\n            <h3 className=\"font-gothic text-2xl text-amber-400 mb-6 text-center\">Practical Actions</h3>\n            <ul className=\"text-silver-star/90 space-y-3\">\n              <li><strong className=\"text-amber-300\">Ancestral Mapping:</strong> Members are encouraged to research, reclaim, and document their lineages — both blood and chosen</li>\n              <li><strong className=\"text-amber-300\">Story Archives:</strong> The Athenaeum builds a living repository of oral histories, rituals, and testimonies to preserve against erasure</li>\n              <li><strong className=\"text-amber-300\">Remembrance Rites:</strong> Seasonal rituals invite ancestors into the circle, not as ghosts to fear but as kin to consult</li>\n              <li><strong className=\"text-amber-300\">Generational Oaths:</strong> Members write commitments to future descendants, ritually sealed and stored within the movement</li>\n            </ul>\n          </div>\n\n          {/* Manifesto */}\n          <div className=\"bg-gradient-to-b from-amber-900/30 to-black/60 backdrop-blur-sm rounded-lg p-8 mb-8 border-l-6 border-amber-400\">\n            <h3 className=\"font-gothic text-2xl text-amber-400 mb-6 text-center\">Manifesto Declarations</h3>\n            <div className=\"text-silver-star/95 leading-relaxed space-y-3 text-center italic\">\n              <p>We walk with the dead and the unborn.</p>\n              <p>We will not allow our ancestors to be erased.</p>\n              <p>We speak the names of the silenced,<br/>we repair what we can,<br/>we plant seeds we may never see grow.</p>\n              <p>To forget is to die twice.</p>\n              <p className=\"text-amber-300 font-semibold not-italic text-lg\">\n                To remember is to live forever.\n              </p>\n            </div>\n          </div>\n\n          {/* Framework */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-amber-400/20\">\n            <h3 className=\"font-gothic text-2xl text-amber-400 mb-6 text-center\">Framework Beneath the Manifesto</h3>\n            <ul className=\"text-silver-star/90 space-y-3\">\n              <li><strong className=\"text-amber-300\">Memory:</strong> Truth-telling as act of resistance against erasure</li>\n              <li><strong className=\"text-amber-300\">Lineage:</strong> Every member reconnects with their heritage, blood or chosen, to strengthen continuity</li>\n              <li><strong className=\"text-amber-300\">Repair:</strong> Responsibility, not guilt, drives restitution and healing</li>\n              <li><strong className=\"text-amber-300\">Legacy:</strong> We act not just for ourselves, but for the seventh generation to come</li>\n            </ul>\n          </div>\n\n          {/* Pillar Navigation */}\n          <div className=\"flex justify-center items-center gap-6 mt-12\">\n            <Link \n              href=\"/pillar2-cosmic-vision\"\n              className=\"inline-flex items-center text-golden-rune hover:text-amber-400 transition-colors group\"\n              data-testid=\"link-prev-pillar\"\n            >\n              <ChevronLeft className=\"w-5 h-5 mr-1 group-hover:translate-x-[-4px] transition-transform\" />\n              Previous Pillar\n            </Link>\n\n            <Link \n              href=\"/four-pillars\"\n              className=\"inline-flex items-center text-golden-rune hover:text-amber-400 transition-colors\"\n              data-testid=\"link-home\"\n            >\n              <Home className=\"w-5 h-5 mr-2\" />\n              Temple Home\n            </Link>\n\n            <Link \n              href=\"/pillar4-magic-science\"\n              className=\"inline-flex items-center text-golden-rune hover:text-amber-400 transition-colors group\"\n              data-testid=\"link-next-pillar\"\n            >\n              Next Pillar\n              <ChevronRight className=\"w-5 h-5 ml-1 group-hover:translate-x-1 transition-transform\" />\n            </Link>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":9542},"client/src/pages/pillar4-magic-science.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ArrowLeft, ChevronLeft, ChevronRight, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport backgroundImage from \"@assets/background_1755498699765.webp\";\nimport { MagicScienceIcon } from \"@/components/pillar-icons\";\n\nexport default function Pillar4MagicScience() {\n  return (\n    <section \n      className=\"min-h-screen relative overflow-hidden\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n      data-testid=\"pillar4-magic-science\"\n    >\n      {/* Dark overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/80\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"relative z-50 p-6\">\n        <Link \n          href=\"/four-pillars\"\n          className=\"inline-flex items-center text-golden-rune hover:text-silver-star transition-colors group\"\n          data-testid=\"link-back-pillars\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2 group-hover:translate-x-[-2px] transition-transform\" />\n          Return to Four Pillars\n        </Link>\n      </nav>\n      \n      <div className=\"relative z-10 container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1 }}\n        >\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-6\">\n              <MagicScienceIcon className=\"w-20 h-20 text-cyan-400\" />\n            </div>\n            <h1 className=\"font-gothic text-4xl md:text-5xl bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent mb-4\">\n              Pillar IV: Integration of Magic & Science\n            </h1>\n            <h2 className=\"text-2xl text-silver-star/80 font-medium\">\n              The reconciliation of what was never truly separate\n            </h2>\n          </div>\n\n          {/* Core Principle */}\n          <div className=\"bg-gradient-to-b from-blue-900/20 to-cyan-600/10 backdrop-blur-sm rounded-lg p-8 mb-8 border border-cyan-400/20\">\n            <h3 className=\"font-gothic text-2xl text-cyan-400 mb-4 text-center\">Core Principle</h3>\n            <p className=\"text-silver-star/90 leading-relaxed text-lg\">\n              This pillar is our refusal to accept the false divide between the mystical and the measurable. \n              Magic and science are not rivals — they are twin languages of the same truth. Science is the map. \n              Magic is the compass. Together, they orient us toward wisdom. Integration means refusing reductionism: \n              not stripping spirit from matter, nor matter from spirit, but seeing both as sacred expressions of the cosmos.\n            </p>\n          </div>\n\n          {/* Key Commitments */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-cyan-400/20\">\n            <h3 className=\"font-gothic text-2xl text-cyan-400 mb-6 text-center\">Key Commitments</h3>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-gothic text-xl text-cyan-300 mb-3\">No More False Binaries</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• Reject the cultural lie that says: choose spirit or science</li>\n                  <li>• Hold that data without wonder is soulless, and ritual without knowledge is rootless</li>\n                  <li>• Live in synthesis, not division</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-cyan-300 mb-3\">Magic as Technology</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• Recognize that ancient rituals were technologies of survival, healing, and transcendence</li>\n                  <li>• Affirm that modern science often re-discovers what ancestors already knew through intuition and observation</li>\n                  <li>• Honor both laboratory and altar, telescope and tarot, microscope and medicine bag</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-cyan-300 mb-3\">Curiosity as Sacred Practice</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• Hold experimentation, exploration, and discovery as spiritual disciplines</li>\n                  <li>• Treat questions as prayers, and knowledge as a form of devotion</li>\n                  <li>• Teach that skepticism without humility becomes arrogance, but curiosity with reverence becomes wisdom</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-gothic text-xl text-cyan-300 mb-3\">Applied Integration</h4>\n                <ul className=\"text-silver-star/90 space-y-2 ml-6\">\n                  <li>• Do not use science to disprove magic, nor magic to ignore science</li>\n                  <li>• Weave quantum physics into mystical teachings, biology into ritual, astronomy into ceremony</li>\n                  <li>• Teach members how to hold both equations and invocations in the same hand</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Practical Actions */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-cyan-400/20\">\n            <h3 className=\"font-gothic text-2xl text-cyan-400 mb-6 text-center\">Practical Actions</h3>\n            <ul className=\"text-silver-star/90 space-y-3\">\n              <li><strong className=\"text-cyan-300\">The Athenaeum Curriculum:</strong> Courses that pair mystical traditions with scientific insights (e.g., lunar rituals with astronomy; herbalism with botany and pharmacology)</li>\n              <li><strong className=\"text-cyan-300\">Experiments in the Sacred:</strong> Ritual spaces that invite both measurable outcomes and mystical intention</li>\n              <li><strong className=\"text-cyan-300\">Sacred Labs:</strong> Spaces where members can test, track, and refine magical practices as living sciences</li>\n              <li><strong className=\"text-cyan-300\">Annual Symposium:</strong> Gathering where healers, scientists, mystics, and researchers present side by side, modeling integration</li>\n            </ul>\n          </div>\n\n          {/* Manifesto */}\n          <div className=\"bg-gradient-to-b from-blue-900/30 to-black/60 backdrop-blur-sm rounded-lg p-8 mb-8 border-l-6 border-cyan-400\">\n            <h3 className=\"font-gothic text-2xl text-cyan-400 mb-6 text-center\">Manifesto Declarations</h3>\n            <div className=\"text-silver-star/95 leading-relaxed space-y-3 text-center italic\">\n              <p>We will not choose between microscope and moonlight.</p>\n              <p>We honor ritual as technology and technology as ritual.</p>\n              <p>We treat questions as prayers,<br/>and knowledge as devotion.</p>\n              <p>We heal with medicine and with magic.</p>\n              <p className=\"text-cyan-300 font-semibold not-italic text-lg\">\n                Integration is wholeness, and wholeness is power.\n              </p>\n            </div>\n          </div>\n\n          {/* Framework */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg p-8 mb-8 border border-cyan-400/20\">\n            <h3 className=\"font-gothic text-2xl text-cyan-400 mb-6 text-center\">Framework Beneath the Manifesto</h3>\n            <ul className=\"text-silver-star/90 space-y-3\">\n              <li><strong className=\"text-cyan-300\">Synthesis:</strong> Reject binaries. Hold both ways of knowing in harmony</li>\n              <li><strong className=\"text-cyan-300\">Technology:</strong> See rituals as ancestral technologies; see science as rediscovery of ancient wisdom</li>\n              <li><strong className=\"text-cyan-300\">Curiosity:</strong> Inquiry is not a threat to faith but its highest form</li>\n              <li><strong className=\"text-cyan-300\">Application:</strong> Mysticism and science are both made practical — for healing, for knowledge, for liberation</li>\n            </ul>\n          </div>\n\n          {/* Pillar Navigation */}\n          <div className=\"flex justify-center items-center gap-6 mt-12\">\n            <Link \n              href=\"/pillar3-ancestral-stewardship\"\n              className=\"inline-flex items-center text-golden-rune hover:text-cyan-400 transition-colors group\"\n              data-testid=\"link-prev-pillar\"\n            >\n              <ChevronLeft className=\"w-5 h-5 mr-1 group-hover:translate-x-[-4px] transition-transform\" />\n              Previous Pillar\n            </Link>\n\n            <Link \n              href=\"/four-pillars\"\n              className=\"inline-flex items-center text-golden-rune hover:text-cyan-400 transition-colors\"\n              data-testid=\"link-home\"\n            >\n              <Home className=\"w-5 h-5 mr-2\" />\n              Temple Home\n            </Link>\n\n            <div className=\"opacity-50 cursor-not-allowed\">\n              <span className=\"inline-flex items-center text-silver-star/50\">\n                Next Pillar\n                <ChevronRight className=\"w-5 h-5 ml-1\" />\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":9496}}}